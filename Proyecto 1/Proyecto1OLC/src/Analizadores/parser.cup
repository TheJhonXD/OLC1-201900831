package Analizadores;
import java_cup.runtime.Symbol;
import Errores.*;
import Instrucciones.*;
import AST.*;
import java.util.ArrayList;


parser code 
{:

    public String resultado = "";
    public int cont = 1;

    /*Method that is called when parser can be recovered*/
    public void syntax_error(Symbol s){ 
        //System.out.println("Unexpected token: " +s.value);
        //System.out.println("Error sintactico en la linea " + (s.right + 1) + " column " + (s.left + 1));
        Instruction.list.addError(new Error_("Token no valido: " + s.value, "Sintactico", s.right + 1, s.left + 1));
    }

    /*Method that is called when parser can't be recovered*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        //System.out.println("Error sintactico unrecovered: " + s.value);
        //System.out.println("Error sintactico unrecovered en la linea " + s.right + " column " + s.left);
        Instruction.list.addError(new Error_("Token no valido unrecovered: " + s.value, "Sintactico", s.right + 1, s.left + 1));
    } 
:}


terminal String tnum;
terminal String tletras;
terminal tpcoma, tunder;
terminal tinicio, tfin;
terminal tint, tstring, tbool, tchar;
terminal trest,tsum,tdiv,tmul,tpot,tmod, tparA, tparC, tcorA, tcorC;
terminal tmayor, tmenor, tmayor_igual, tmenor_igual, tes_igual, tdifer;
terminal tor, tand, tnot;
terminal tingresar, tcomo, tcon_val, tcoma, tvar_name, tarrow;
terminal tif, tthen, tendif, telse, telseif;
terminal tcadena, tboolean, tcaracter;
terminal tsegun, tdo, tfin_segun, tQn_A, tQn_C;
terminal tfor, thasta, tfin_for, tincrease;
terminal twhile, tend_while;
terminal trepeat, tuntil;
terminal treturn;
terminal tmetodo, tfin_metodo, tparams;
terminal tfuncion, tfin_funcion;
terminal texec, tprint, tprintln;

non terminal S;
non terminal ArrayList<Nodo> INSTRUCTIONS;
non terminal INSTRUCTION;
non terminal STATEMENT, VAR, DATATYPE;
non terminal ASSIGNMENT;
non terminal EXPRESSION;
non terminal CONDITIONAL, CONDITIONALS, CONDITION, REL, OP_REL;
non terminal SWITCH, VALOR, CASE, DEFAULT, C, OPC;
non terminal FOR, INCREASE, INSTRUCCIONES;
non terminal WHILE;
non terminal REPETIR;
non terminal RETURN;
non terminal METODO, PARAMS, LISTPARAMS;
non terminal FUNCION;
non terminal EXEC, PARAMETROS;
non terminal PRINT;
non terminal INIT;
non terminal LISTREL;

precedence left tcoma;

precedence left tmayor, tmenor, tmayor_igual, tmenor_igual;
precedence left tes_igual, tdifer;

precedence left tand, tor;
precedence right tnot;
precedence left tsum, trest;
precedence left tdiv, tmul;
precedence left tmod, tpot;
precedence left tparA, tparC;
precedence left tcorA, tcorC;



start with S;

S ::= tinicio INSTRUCTIONS:s tfin {:
        Nodo n = new Nodo("tinicio");
        Nodo n1 = new Nodo("Instructions");
        Nodo n2 = new Nodo("tfin");
        n.setValor("inicio");
        n.setIdNodo(parser.cont++);
        n1.setIdNodo(parser.cont++);
        n2.setValor("fin");
        n2.setIdNodo(parser.cont++);
        for (int i=0; i<s.size(); i++){
            n1.addHijo(s.get(i));
        }
        Instruction.ast.addHijo(n);
        Instruction.ast.addHijo(n1);
        Instruction.ast.addHijo(n2);
        Instruction.ast.setIdNodo(parser.cont++);
    :}
    | tinicio tfin
    | error
;

INSTRUCTIONS ::= INSTRUCTIONS:ins1 INSTRUCTION:ins2 {:
        // RESULT = new ArrayList<Nodo>();
        ArrayList<Nodo> aux = new ArrayList<Nodo>();
        // System.out.println("ins1.get(i).getNombre()");
        for (int i=0; i<ins1.size(); i++){
            aux.add(ins1.get(i));
        }
        aux.add((Nodo) ins2);
        RESULT = aux;
    :}
    | INSTRUCTION:ins {:
        ArrayList<Nodo> aux = new ArrayList<Nodo>();
        aux.add((Nodo) ins);
        RESULT = aux;
    :}
;

INSTRUCTION ::= STATEMENT:s tpcoma {:
        Nodo n = new Nodo("Instruction");
        Nodo n2 = new Nodo("tpcoma");
        n2.setValor(";");
        n2.setIdNodo(parser.cont++);
        Nodo aux = (Nodo) s;
        aux.addHijo(n2);
        n.addHijo((Nodo) aux);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | STATEMENT:a {: Instruction.list.addError(new Error_("Falta un: \";\"", "Sintactico", aright, aleft)); :}
    | ASSIGNMENT:s tpcoma {:
        Nodo n = new Nodo("Instruction");
        Nodo n2 = new Nodo("tpcoma");
        n2.setValor(";");
        n2.setIdNodo(parser.cont++);
        Nodo aux = (Nodo) s;
        aux.addHijo(n2);
        n.addHijo((Nodo) aux);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | ASSIGNMENT:a {: Instruction.list.addError(new Error_("Falta un: \";\"", "Sintactico", aright, aleft)); :}
    | CONDITIONAL:s tendif:a {:
        Nodo n = new Nodo("Instruction");
        Nodo n2 = new Nodo("tendif");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        Nodo aux = (Nodo) s;
        aux.addHijo(n2);
        n.addHijo((Nodo) aux);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | SWITCH:s tfin_segun:a {:
        Nodo n = new Nodo("Instruction");
        Nodo n2 = new Nodo("tfin_segun");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        Nodo aux = (Nodo) s;
        aux.addHijo(n2);
        n.addHijo((Nodo) aux);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | FOR:s tfin_for:a {:
        Nodo n = new Nodo("Instruction");
        Nodo n2 = new Nodo("tfin_for");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        Nodo aux = (Nodo) s;
        aux.addHijo(n2);
        n.addHijo((Nodo) aux);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | WHILE:s tend_while:a {:
        Nodo n = new Nodo("Instruction");
        Nodo n2 = new Nodo("tend_while");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        Nodo aux = (Nodo) s;
        aux.addHijo(n2);
        n.addHijo((Nodo) aux);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | REPETIR:s {:
        Nodo n = new Nodo("Instruction");
        n.addHijo((Nodo) s);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | METODO:s tfin_metodo:a {:
        Nodo n = new Nodo("Instruction");
        Nodo n2 = new Nodo("tfin_metodo");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        Nodo aux = (Nodo) s;
        aux.addHijo(n2);
        n.addHijo((Nodo) aux);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | FUNCION:s tfin_funcion:a {:
        Nodo n = new Nodo("Instruction");
        Nodo n2 = new Nodo("tfin_funcion");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        Nodo aux = (Nodo) s;
        aux.addHijo(n2);
        n.addHijo((Nodo) aux);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | EXEC:s tpcoma:a {:
        Nodo n = new Nodo("Instruction");
        Nodo n2 = new Nodo("tpcoma");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        Nodo aux = (Nodo) s;
        aux.addHijo(n2);
        n.addHijo((Nodo) aux);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | EXEC:a {: Instruction.list.addError(new Error_("Falta un: \";\"", "Sintactico", aright, aleft)); :}
    | PRINT:s tpcoma:a {:
        Nodo n = new Nodo("Instruction");
        Nodo n2 = new Nodo("tpcoma");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        Nodo aux = (Nodo) s;
        aux.addHijo(n2);
        n.addHijo((Nodo) aux);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | PRINT:a {: Instruction.list.addError(new Error_("Falta un: \";\"", "Sintactico", aright, aleft)); :}
    | error tpcoma
    | error tendif
    | error tfin_segun
    | error tfin_for
    | error tend_while
    | error tfin_metodo
    | error tfin_funcion
;

STATEMENT ::= tingresar:a VAR:v tcomo DATATYPE:d tcon_val:b LISTREL:r {:
        Nodo n = new Nodo("Declaracion");
        Nodo n2 = new Nodo("tingresar");
        Nodo n3 = new Nodo("tcon_val");
        Nodo n4 = new Nodo("Lista_valores");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n3.setValor(b.toString());
        n3.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo((Nodo) v);
        n.addHijo((Nodo) d);
        n.addHijo(n3);
        n.addHijo((Nodo) r);
        n.setIdNodo(parser.cont++);
        RESULT =  n;
    :}
;

LISTREL ::= LISTREL:a tcoma:b LISTREL:c {:
        Nodo n = new Nodo("Lista_valores");
        Nodo n2 = new Nodo("tcoma");
        n2.setValor(b.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo((Nodo) a);
        n.addHijo(n2);
        n.addHijo((Nodo) c);
        n.setIdNodo(parser.cont++);
        RESULT =  n;
    :}
    | REL:n {:
        RESULT = n;
    :}
;

VAR ::= VAR:a tcoma VAR:b {:
        Nodo n = new Nodo("Var");
        Nodo n2 = new Nodo("tcoma");
        n2.setValor(",");
        n2.setIdNodo(parser.cont++);
        n.addHijo((Nodo) a);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.setIdNodo(parser.cont++);
        RESULT =  n;
    :}
    | tvar_name:a {:
        Nodo aux = new Nodo("id");
        aux.setValor(a.toString());
        aux.setIdNodo(parser.cont++);
        RESULT = aux;
    :}
;

DATATYPE ::= tint:a {:
        Nodo aux = new Nodo("type");
        aux.setValor(a.toString());
        aux.setIdNodo(parser.cont++);
        RESULT = aux;
    :}
    | tstring:a {:
        Nodo aux = new Nodo("type");
        aux.setValor(a.toString());
        aux.setIdNodo(parser.cont++);
        RESULT = aux;
    :}
    | tbool:a {:
        Nodo aux = new Nodo("type");
        aux.setValor(a.toString());
        aux.setIdNodo(parser.cont++);
        RESULT = aux;
    :}
    | tchar:a {:
        Nodo aux = new Nodo("type");
        aux.setValor(a.toString());
        aux.setIdNodo(parser.cont++);
        RESULT = aux;
    :}
;

ASSIGNMENT ::= VAR:a tarrow:x LISTREL:b {:
        Nodo n = new Nodo("Asignacion");
        Nodo n2 = new Nodo("tarrow");
        n2.setValor(x.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo((Nodo) a);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
;


CONDITIONAL ::= tif:a CONDITION:b tthen:c INSTRUCTIONS:d {:
        Nodo n = new Nodo("Condicional");
        Nodo n2 = new Nodo("tif");
        Nodo n3 = new Nodo("tthen");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n3.setValor(c.toString());
        n3.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.addHijo(n3);
        for (int i=0; i<d.size(); i++){
            n.addHijo(d.get(i));
        }
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | tif:a CONDITION:b tthen:c INSTRUCTIONS:d telse:e INSTRUCTIONS:f {:    
        Nodo n = new Nodo("Condicional");
        Nodo n2 = new Nodo("tif");
        Nodo n3 = new Nodo("tthen");
        Nodo n4 = new Nodo("telse");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n3.setValor(c.toString());
        n3.setIdNodo(parser.cont++);
        n4.setValor(e.toString());
        n4.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.addHijo(n3);
        for (int i=0; i<d.size(); i++){
            n.addHijo(d.get(i));
        }
        n.addHijo(n4);
        for (int i=0; i<f.size(); i++){
            n.addHijo(f.get(i));
        }
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | tif:a CONDITION:b tthen:c INSTRUCTIONS:d CONDITIONALS:e {:
        Nodo n = new Nodo("Condicional");
        Nodo n2 = new Nodo("tif");
        Nodo n3 = new Nodo("tthen");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n3.setValor(c.toString());
        n3.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.addHijo(n3);
        for (int i=0; i<d.size(); i++){
            n.addHijo(d.get(i));
        }
        n.addHijo((Nodo) e);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | tif:a CONDITION:b tthen:c INSTRUCTIONS:d CONDITIONALS:e telse:f INSTRUCTIONS:g {:
        Nodo n = new Nodo("Condicional");
        Nodo n2 = new Nodo("tif");
        Nodo n3 = new Nodo("tthen");
        Nodo n4 = new Nodo("telse");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n3.setValor(c.toString());
        n3.setIdNodo(parser.cont++);
        n4.setValor(f.toString());
        n4.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.addHijo(n3);
        for (int i=0; i<d.size(); i++){
            n.addHijo(d.get(i));
        }
        n.addHijo((Nodo) e);
        n.addHijo(n4);
        for (int i=0; i<g.size(); i++){
            n.addHijo(g.get(i));
        }
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
;

CONDITIONALS ::= CONDITIONALS:a telseif:b CONDITION:c tthen:d INSTRUCTIONS:e {:
        Nodo n = new Nodo("Condicionales");
        Nodo n2 = new Nodo("telseif");
        Nodo n3 = new Nodo("tthen");
        n2.setValor(b.toString());
        n2.setIdNodo(parser.cont++);
        n3.setValor(d.toString());
        n3.setIdNodo(parser.cont++);
        n.addHijo((Nodo) a);
        n.addHijo(n2);
        n.addHijo((Nodo) c);
        n.addHijo(n3);
        for (int i=0; i<e.size(); i++){
            n.addHijo(e.get(i));
        }
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | telseif:b CONDITION:c tthen:d INSTRUCTIONS:e {:
        Nodo n = new Nodo("Condicionales");
        Nodo n2 = new Nodo("telseif");
        Nodo n3 = new Nodo("tthen");
        n2.setValor(b.toString());
        n2.setIdNodo(parser.cont++);
        n3.setValor(d.toString());
        n3.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo((Nodo) c);
        n.addHijo(n3);
        for (int i=0; i<e.size(); i++){
            n.addHijo(e.get(i));
        }
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
;

CONDITION ::= CONDITION:a tor:b CONDITION:c {:
        Nodo n = new Nodo("Condicion");
        Nodo n2 = new Nodo("tor");
        n2.setValor(b.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo((Nodo) a);
        n.addHijo(n2);
        n.addHijo((Nodo) c);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | CONDITION:a tand:b CONDITION:c {:
        Nodo n = new Nodo("Condicion");
        Nodo n2 = new Nodo("tand");
        n2.setValor(b.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo((Nodo) a);
        n.addHijo(n2);
        n.addHijo((Nodo) c);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | tnot:a CONDITION:b {:
        Nodo n = new Nodo("Condicion");
        Nodo n2 = new Nodo("tnot");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | tparA:a CONDITION:b tparC:c {:
        Nodo n = new Nodo("Condicion");
        Nodo n2 = new Nodo("tparA");
        Nodo n3 = new Nodo("tparC");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n2.setValor(c.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.addHijo(n3);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | REL:a {:
        Nodo n = new Nodo("Condicion");
        n.addHijo((Nodo) a);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
;

REL ::= EXPRESSION:a OP_REL:c EXPRESSION:b {:
        Nodo n = new Nodo("Rel");
        n.addHijo((Nodo) a);
        n.addHijo((Nodo) c);
        n.addHijo((Nodo) b);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | EXPRESSION:a {:
        RESULT = a;
    :}
;

OP_REL ::= tmayor:a {:
        Nodo aux = new Nodo("Op_Relacional");
        aux.setValor(a.toString());
        aux.setIdNodo(parser.cont++);
        RESULT = aux;
    :}
    | tmenor:a {:
        Nodo aux = new Nodo("Op_Relacional");
        aux.setValor(a.toString());
        aux.setIdNodo(parser.cont++);
        RESULT = aux;
    :}
    | tmayor_igual:a {:
        Nodo aux = new Nodo("Op_Relacional");
        aux.setValor(a.toString());
        aux.setIdNodo(parser.cont++);
        RESULT = aux;
    :}
    | tmenor_igual:a {:
        Nodo aux = new Nodo("Op_Relacional");
        aux.setValor(a.toString());
        aux.setIdNodo(parser.cont++);
        RESULT = aux;
    :}
    | tes_igual:a {:
        Nodo aux = new Nodo("Op_Relacional");
        aux.setValor(a.toString());
        aux.setIdNodo(parser.cont++);
        RESULT = aux;
    :}
    | tdifer:a {:
        Nodo aux = new Nodo("Op_Relacional");
        aux.setValor(a.toString());
        aux.setIdNodo(parser.cont++);
        RESULT = aux;
    :}
;

EXPRESSION ::= trest:s EXPRESSION:a {:
        Nodo n = new Nodo("Expresion");
        Nodo n2 = new Nodo("Operador");
        n2.setValor(s.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo((Nodo) a);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | EXPRESSION:a tsum:s EXPRESSION:b {:
        Nodo n = new Nodo("Expresion");
        Nodo n2 = new Nodo("Operador");
        n2.setValor(s.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo((Nodo) a);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | EXPRESSION:a trest:s EXPRESSION:b {:
        Nodo n = new Nodo("Expresion");
        Nodo n2 = new Nodo("Operador");
        n2.setValor(s.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo((Nodo) a);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | EXPRESSION:a tdiv:s EXPRESSION:b {:
        Nodo n = new Nodo("Expresion");
        Nodo n2 = new Nodo("Operador");
        n2.setValor(s.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo((Nodo) a);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | EXPRESSION:a tmul:s EXPRESSION:b {:
        Nodo n = new Nodo("Expresion");
        Nodo n2 = new Nodo("Operador");
        n2.setValor(s.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo((Nodo) a);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | EXPRESSION:a tpot:s tcorA:c EXPRESSION:b tcorC:d {:
        Nodo n = new Nodo("Expresion");
        Nodo n2 = new Nodo("Operador");
        Nodo n3 = new Nodo("tcorA");
        Nodo n4 = new Nodo("tcorC");
        n2.setValor(s.toString());
        n2.setIdNodo(parser.cont++);
        n3.setValor(c.toString());
        n3.setIdNodo(parser.cont++);
        n4.setValor(d.toString());
        n4.setIdNodo(parser.cont++);
        n.addHijo((Nodo) a);
        n.addHijo(n2);
        n.addHijo(n3);
        n.addHijo((Nodo) b);
        n.addHijo(n4);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | EXPRESSION:a tmod:s EXPRESSION:b {:
        Nodo n = new Nodo("Expresion");
        Nodo n2 = new Nodo("Operador");
        n2.setValor(s.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo((Nodo) a);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | tparA:s1 EXPRESSION:a tparC:s2 {:
        Nodo n = new Nodo("Expresion");
        Nodo n2 = new Nodo("tparA");
        Nodo n3 = new Nodo("tparC");
        n2.setValor(s1.toString());
        n2.setIdNodo(parser.cont++);
        n3.setValor(s2.toString());
        n3.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo((Nodo) a);
        n.addHijo(n3);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | tvar_name:a {:
        Nodo aux = new Nodo("tvar_name");
        aux.setValor(a.toString());
        aux.setIdNodo(parser.cont++);
        RESULT = aux;
    :}
    | tnum:a {:
        Nodo aux = new Nodo("tnum");
        aux.setValor(a.toString());
        aux.setIdNodo(parser.cont++);
        RESULT = aux;
    :}
    | tcadena:a {:
        Nodo aux = new Nodo("tcadena");
        aux.setValor(a.toString().replaceAll("\"", ""));
        aux.setIdNodo(parser.cont++);
        RESULT = aux;
    :}
    | tboolean:a {:
        Nodo aux = new Nodo("tboolean");
        aux.setValor(a.toString());
        aux.setIdNodo(parser.cont++);
        RESULT = aux;
    :}
    | tcaracter:a {:
        Nodo aux = new Nodo("tcaracter");
        aux.setValor(a.toString());
        aux.setIdNodo(parser.cont++);
        RESULT = aux;
    :}       
;

SWITCH ::= tsegun:a EXPRESSION:b tdo:c CASE:d DEFAULT:e {:
        Nodo n = new Nodo("Switch");
        Nodo n2 = new Nodo("tsegun");
        Nodo n3 = new Nodo("tdo");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n3.setValor(c.toString());
        n3.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.addHijo(n3);
        n.addHijo((Nodo) d);
        if (e != null){
            n.addHijo((Nodo) e);
        }
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
;

CASE ::= CASE:a C:b {:
        Nodo n = new Nodo("Casos");
        n.addHijo((Nodo) a);
        n.addHijo((Nodo) b);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | C:n {:
        RESULT = n;
    :}
;

C ::= tQn_A:a OPC:b tQn_C:c tthen:d INSTRUCTIONS:e {:
        Nodo n = new Nodo("Caso");
        Nodo n2 = new Nodo("tQn_A");
        Nodo n3 = new Nodo("tQn_C");
        Nodo n4 = new Nodo("tthen");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n3.setValor(c.toString());
        n3.setIdNodo(parser.cont++);
        n4.setValor(d.toString());
        n4.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.addHijo(n3);
        n.addHijo(n4);
        for (int i=0; i<e.size(); i++){
            n.addHijo(e.get(i));
        }
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
;

OPC ::= tnum:a {:
        Nodo n = new Nodo("tnum");
        n.setValor(a.toString());
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | tcaracter:a {:
        Nodo n = new Nodo("tcaracter");
        n.setValor(a.toString());
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | tcadena:a {:
        Nodo n = new Nodo("tcadena");
        n.setValor(a.toString().replaceAll("\"", ""));
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
;

DEFAULT ::= telse:a tthen:b INSTRUCTIONS:c {:
        Nodo n = new Nodo("Default");
        Nodo n2 = new Nodo("telse");
        Nodo n3 = new Nodo("tthen");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n3.setValor(b.toString());
        n3.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo(n3);
        for (int i=0; i<c.size(); i++){
            n.addHijo(c.get(i));
        }
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | //empty
;

FOR ::= tfor:a tvar_name:b tarrow:c EXPRESSION:d thasta:e EXPRESSION:f INCREASE:g tdo:h INSTRUCCIONES:j {:
        Nodo n = new Nodo("For");
        Nodo n2 = new Nodo("tfor");
        Nodo n3 = new Nodo("tvar_name");
        Nodo n4 = new Nodo("tarrow");
        Nodo n5 = new Nodo("thasta");
        Nodo n6 = new Nodo("tdo");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n3.setValor(b.toString());
        n3.setIdNodo(parser.cont++);
        n4.setValor(c.toString());
        n4.setIdNodo(parser.cont++);
        n5.setValor(e.toString());
        n5.setIdNodo(parser.cont++);
        n6.setValor(h.toString());
        n6.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo(n3);
        n.addHijo(n4);
        n.addHijo((Nodo) d);
        n.addHijo(n5);
        n.addHijo((Nodo) f);
        if (g != null){
            n.addHijo((Nodo) g);
        }
        n.addHijo(n6);
        if (j != null){
            n.addHijo((Nodo) j);
        }
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
;

INCREASE ::= tincrease:a EXPRESSION:b {:
        Nodo n = new Nodo("Incremento");
        Nodo n2 = new Nodo("tincrease");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | //empty
;

INSTRUCCIONES ::= INSTRUCTIONS:a {:
        Nodo n = new Nodo("Instrucciones");
        for (int i=0; i<a.size(); i++){
            n.addHijo(a.get(i));
        }
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | //empty
;

WHILE ::= twhile:a CONDITION:b tdo:c INSTRUCCIONES:d {:
        Nodo n = new Nodo("While");
        Nodo n2 = new Nodo("twhile");
        Nodo n3 = new Nodo("tdo");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n3.setValor(c.toString());
        n3.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.addHijo(n3);
        if (d != null){
            n.addHijo((Nodo) d);
        }
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
;

REPETIR ::= trepeat:a INSTRUCCIONES:b tuntil:c CONDITION:d {:
        Nodo n = new Nodo("Repetir");
        Nodo n2 = new Nodo("trepeat");
        Nodo n3 = new Nodo("tuntil");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n3.setValor(c.toString());
        n3.setIdNodo(parser.cont++);
        n.addHijo(n2);
        if (b != null){
            n.addHijo((Nodo) b);
        }
        n.addHijo(n3);
        n.addHijo((Nodo) d);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
;

RETURN ::= treturn:a CONDITION:b tpcoma:c {:
        Nodo n = new Nodo("Return");
        Nodo n2 = new Nodo("treturn");
        Nodo n3 = new Nodo("tpcoma");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n3.setValor(c.toString());
        n3.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.addHijo(n3);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
;

METODO ::= tmetodo:a tvar_name:b PARAMS:c INSTRUCTIONS:d {:
        Nodo n = new Nodo("Metodo");
        Nodo n2 = new Nodo("tmetodo");
        Nodo n3 = new Nodo("tvar_name");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n3.setValor(b.toString());
        n3.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo(n3);
        if (c != null){
            n.addHijo((Nodo) c);
        }
        for (int i=0; i<d.size(); i++){
            n.addHijo(d.get(i));
        }
        n.setIdNodo(parser.cont++);
        RESULT = n;
:}
;

PARAMS ::= tparams:a tparA:b LISTPARAMS:c tparC:d {:
        Nodo n = new Nodo("Parametros");
        Nodo n2 = new Nodo("tparams");
        Nodo n3 = new Nodo("tparA");
        Nodo n4 = new Nodo("tparC");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n3.setValor(b.toString());
        n3.setIdNodo(parser.cont++);
        n4.setValor(d.toString());
        n4.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo(n3);
        n.addHijo((Nodo) c);
        n.addHijo(n4);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | //empty
;

LISTPARAMS ::= LISTPARAMS:a tcoma:b LISTPARAMS:c {:
        Nodo n = new Nodo("ListaParametros");
        Nodo n2 = new Nodo("tcoma");
        n2.setValor(b.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo((Nodo) a);
        n.addHijo(n2);
        n.addHijo((Nodo) c);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | tvar_name:a DATATYPE:b {: 
        Nodo n = new Nodo("Parametro");
        Nodo n2 = new Nodo("tvar_name");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
;

FUNCION ::= tfuncion:a tvar_name:b DATATYPE:c PARAMS:d INSTRUCTIONS:e RETURN:f {:
        Nodo n = new Nodo("Funcion");
        Nodo n2 = new Nodo("tfuncion");
        Nodo n3 = new Nodo("tvar_name");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n3.setValor(b.toString());
        n3.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo(n3);
        n.addHijo((Nodo) c);
        if (d != null){
            n.addHijo((Nodo) d);
        }
        for (int i=0; i<e.size(); i++){
            n.addHijo(e.get(i));
        }
        n.addHijo((Nodo) f);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
;

EXEC ::= texec:a tvar_name:b tparA:c PARAMETROS:d tparC:e {:
        Nodo n = new Nodo("Exec");
        Nodo n2 = new Nodo("texec");
        Nodo n3 = new Nodo("tvar_name");
        Nodo n4 = new Nodo("tparA");
        Nodo n5 = new Nodo("tparC");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n3.setValor(b.toString());
        n3.setIdNodo(parser.cont++);
        n4.setValor(c.toString());
        n4.setIdNodo(parser.cont++);
        n5.setValor(e.toString());
        n5.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo(n3);
        n.addHijo(n4);
        if (d != null){
            n.addHijo((Nodo) d);
        }
        n.addHijo(n5);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
;

PARAMETROS ::= PARAMETROS:a tcoma:b PARAMETROS:c {:
        Nodo n = new Nodo("ParamExec");
        Nodo n2 = new Nodo("tcoma");
        n2.setValor(b.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo((Nodo) a);
        n.addHijo(n2);
        n.addHijo((Nodo) c);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | EXPRESSION:n {:
        RESULT = n;
    :}
    | //empty
;

PRINT ::= tprint:a REL:b {:
        Nodo n = new Nodo("Print");
        Nodo n2 = new Nodo("tprint");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | tprint:a EXEC:b {:
        Nodo n = new Nodo("Print");
        Nodo n2 = new Nodo("tprint");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | tprintln:a REL:b {:
        Nodo n = new Nodo("Print");
        Nodo n2 = new Nodo("tprintln");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
    | tprintln:a EXEC:b {:
        Nodo n = new Nodo("Print");
        Nodo n2 = new Nodo("tprintln");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    :}
;