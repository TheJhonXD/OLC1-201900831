package Analizadores;
import java_cup.runtime.Symbol;


parser code 
{:
    /*Method that is called when parser can be recovered*/
    public void syntax_error(Symbol s){ 
        System.out.println("Unexpected token: " +s.value);
        System.out.println("Error sintactico en la linea " + (s.left + 1) + " column " + (s.right + 1));
    }

    /*Method that is called when parser can't be recovered*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error sintactico unrecovered: " + s.value);
        System.out.println("Error sintactico unrecovered en la linea " + s.right + " column " + s.left);
    } 
:}


terminal String tnum;
terminal tpcoma;
terminal tinicio, tfin;
terminal tint, tstring, tbool, tchar;
terminal trest,tsum,tdiv,tmul,tpot,tmod, tpar1, tparA, tparC;
terminal tmayor, tmenor, tmayor_igual, tmenor_igual, tes_igual, tdifer;
terminal tor, tand, tnot;
terminal tingresar, tcomo, tcon_val, tcoma, tvar_name, tarrow;
terminal tif, tthen, tendif, telse, telseif;
terminal tcadena, tboolean, tcaracter, tsgl_cmt, tml_cmt;

non terminal S;
non terminal INSTRUCTIONS, INSTRUCTION;
non terminal STATEMENTS, STATEMENT, VAR, DATATYPE;
non terminal ASSIGNMENT;
non terminal EXPRESSION;

precedence left tsum, trest;
precedence left tdiv, tmul;
precedence left tmod, tpot;

precedence left tcoma;


start with S;

S ::= tinicio INSTRUCTIONS tfin
    | error tfin
;

INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION tpcoma
    | INSTRUCTION tpcoma
    | error tpcoma
;

INSTRUCTION ::= STATEMENT
    | ASSIGNMENT
;

STATEMENT ::= tingresar VAR tcomo DATATYPE tcon_val EXPRESSION
;

VAR ::= VAR tcoma VAR
    | tvar_name
;

DATATYPE ::= tint
    | tstring
    | tbool
    | tchar
;

ASSIGNMENT ::= VAR tarrow EXPRESSION;

EXPRESSION ::= EXPRESSION tsum EXPRESSION 
    | EXPRESSION trest EXPRESSION
    | EXPRESSION tdiv EXPRESSION 
    | EXPRESSION tmul EXPRESSION 
    | EXPRESSION tpot EXPRESSION  
    | EXPRESSION tmod EXPRESSION 
    | tnum        
;