package Analizadores;
import java_cup.runtime.Symbol;


parser code 
{:
    /*Method that is called when parser can be recovered*/
    public void syntax_error(Symbol s){ 
        System.out.println("Unexpected token: " +s.value);
        System.out.println("Error sintactico en la linea " + (s.right + 1) + " column " + (s.left + 1));
    }

    /*Method that is called when parser can't be recovered*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error sintactico unrecovered: " + s.value);
        System.out.println("Error sintactico unrecovered en la linea " + s.right + " column " + s.left);
    } 
:}


terminal String tnum;
terminal tpcoma;
terminal tinicio, tfin;
terminal tint, tstring, tbool, tchar;
terminal trest,tsum,tdiv,tmul,tpot,tmod, tparA, tparC;
terminal tmayor, tmenor, tmayor_igual, tmenor_igual, tes_igual, tdifer;
terminal tor, tand, tnot;
terminal tingresar, tcomo, tcon_val, tcoma, tvar_name, tarrow;
terminal tif, tthen, tendif, telse, telseif;
terminal tcadena, tboolean, tcaracter;
terminal tsegun, tdo, tfin_segun, tQn_A, tQn_C;
terminal tfor, thasta, tfin_for, tincrease;
terminal twhile, tend_while;
terminal trepeat, tuntil;
terminal treturn;
terminal tmetodo, tfin_metodo, tparams;
terminal tfuncion, tfin_funcion;
terminal texec, tprint, tprintln;

non terminal S;
non terminal INSTRUCTIONS, INSTRUCTION;
non terminal STATEMENT, VAR, DATATYPE;
non terminal ASSIGNMENT;
non terminal EXPRESSION;
non terminal CONDITIONAL, CONDITIONALS, CONDITION, REL, OP_REL;
non terminal SWITCH, VALOR, CASE, DEFAULT, C, OPC;
non terminal FOR, INCREASE, INSTRUCCIONES;
non terminal WHILE;
non terminal REPETIR;
non terminal RETURN;
non terminal METODO, PARAMS, LISTPARAMS;
non terminal FUNCION;
non terminal EXEC, PARAMETROS;
non terminal PRINT;

precedence left tcoma;

precedence nonassoc tmayor, tmenor, tmayor_igual, tmenor_igual;
precedence nonassoc tes_igual, tdifer;

precedence left tand, tor;
precedence right tnot;
precedence left tsum, trest;
precedence left tdiv, tmul;
precedence left tmod, tpot;
precedence left tparA, tparC;



start with S;

S ::= tinicio INSTRUCTIONS tfin
    | tinicio tfin
    | error tfin
;

INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION
    | INSTRUCTION
;

INSTRUCTION ::= STATEMENT tpcoma
    | ASSIGNMENT tpcoma
    | CONDITIONAL tendif
    | SWITCH tfin_segun
    | FOR tfin_for
    | WHILE tend_while
    | REPETIR
    | RETURN tpcoma
    | METODO tfin_metodo
    | FUNCION tfin_funcion
    | EXEC tpcoma
    | PRINT tpcoma
    | error tpcoma
    | error tendif
    | error tfin_segun
    | error tfin_for
    | error tend_while
    | error tfin_metodo
    | error tfin_funcion
;

STATEMENT ::= tingresar VAR tcomo DATATYPE tcon_val EXPRESSION
;

VAR ::= VAR tcoma VAR
    | tvar_name
;

DATATYPE ::= tint
    | tstring
    | tbool
    | tchar
;

ASSIGNMENT ::= VAR tarrow EXPRESSION;


CONDITIONAL ::= tif CONDITION tthen INSTRUCTIONS
    | tif CONDITION INSTRUCTIONS telse INSTRUCTIONS
    | tif CONDITION CONDITIONALS
;

CONDITIONALS ::= CONDITIONALS telseif CONDITION tthen INSTRUCTIONS
    | telse INSTRUCTIONS
;

CONDITION ::= CONDITION tor CONDITION
    | CONDITION tand CONDITION
    | tnot CONDITION
    | REL
;

REL ::= EXPRESSION OP_REL EXPRESSION
    | EXPRESSION
;

OP_REL ::= tmayor
    | tmenor
    | tmayor_igual
    | tmenor_igual
    | tes_igual
    | tdifer
;

EXPRESSION ::= trest EXPRESSION
    | EXPRESSION tsum EXPRESSION 
    | EXPRESSION trest EXPRESSION
    | EXPRESSION tdiv EXPRESSION 
    | EXPRESSION tmul EXPRESSION 
    | EXPRESSION tpot EXPRESSION  
    | EXPRESSION tmod EXPRESSION
    | tvar_name
    | tparA EXPRESSION tparC
    | tnum
    | tcadena
    | tboolean
    | tcaracter        
;

SWITCH ::= tsegun EXPRESSION tdo CASE DEFAULT;

CASE ::= CASE C
    | C
;

C ::= tQn_A OPC tQn_C tthen INSTRUCTIONS;

OPC ::= tnum
    | tcaracter
    | tcadena
;

DEFAULT ::= telse tthen INSTRUCTIONS
    | //empty
;

FOR ::= tfor tvar_name tarrow VALOR thasta VALOR INCREASE tdo INSTRUCTIONS
    | tfor tvar_name tarrow VALOR thasta VALOR INCREASE INSTRUCTIONS
;

INCREASE ::= tincrease tnum
    | //empty
;

INSTRUCCIONES ::= INSTRUCTIONS
    | //empty
;

WHILE ::= twhile CONDITION tdo INSTRUCCIONES;

REPETIR ::= trepeat INSTRUCCIONES tuntil CONDITION;

RETURN ::= treturn CONDITION;

METODO ::= tmetodo tvar_name PARAMS INSTRUCTIONS;

PARAMS ::= tparams tparA LISTPARAMS tparC INSTRUCTIONS
    | //empty
;

LISTPARAMS ::= LISTPARAMS tcoma LISTPARAMS
    | tvar_name DATATYPE
;

FUNCION ::= tfuncion tvar_name DATATYPE PARAMS INSTRUCTIONS RETURN;

EXEC ::= texec tvar_name tparA PARAMETROS tparC;

PARAMETROS ::= PARAMETROS tcoma PARAMETROS 
    | EXPRESSION
    | //empty
;

PRINT ::= tprint EXPRESSION
    | tprintln EXPRESSION
;