
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import Errores.*;
import Instrucciones.*;
import AST.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\002\003\000\002\003\004\000\002\003\003" +
    "\000\002\004\004\000\002\004\003\000\002\004\004\000" +
    "\002\004\003\000\002\004\004\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\003\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\004\000\002\005\010\000\002\006\005\000\002\006" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\010\005\000\002\012\006\000" +
    "\002\012\010\000\002\012\005\000\002\013\007\000\002" +
    "\013\004\000\002\014\005\000\002\014\005\000\002\014" +
    "\004\000\002\014\005\000\002\014\003\000\002\015\005" +
    "\000\002\015\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\011\004\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\007" +
    "\000\002\011\005\000\002\011\005\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\017\007\000\002\021\004\000\002\021" +
    "\003\000\002\023\007\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\022\005\000\002\022\002\000" +
    "\002\025\013\000\002\026\004\000\002\026\002\000\002" +
    "\027\003\000\002\027\002\000\002\030\006\000\002\031" +
    "\006\000\002\032\005\000\002\033\006\000\002\034\006" +
    "\000\002\034\002\000\002\035\005\000\002\035\004\000" +
    "\002\036\010\000\002\037\007\000\002\040\005\000\002" +
    "\040\003\000\002\040\002\000\002\041\004\000\002\041" +
    "\004\000\002\041\004\000\002\041\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\006\003\004\010\006\001\002\000\004\002" +
    "\ufffe\001\002\000\004\002\273\001\002\000\036\003\030" +
    "\011\012\041\015\045\011\047\032\057\031\064\010\070" +
    "\036\072\040\075\024\100\037\102\014\103\017\104\020" +
    "\001\002\000\004\006\272\001\002\000\004\045\260\001" +
    "\002\000\010\042\uffe5\044\uffe5\046\uffe5\001\002\000\004" +
    "\002\uffff\001\002\000\004\071\257\001\002\000\004\045" +
    "\250\001\002\000\004\045\011\001\002\000\004\061\242" +
    "\001\002\000\022\004\051\016\047\024\052\045\054\054" +
    "\053\055\050\056\057\102\014\001\002\000\022\004\051" +
    "\016\047\024\052\045\054\054\053\055\050\056\057\102" +
    "\014\001\002\000\004\051\235\001\002\000\036\003\030" +
    "\011\234\041\015\045\011\047\032\057\031\064\010\070" +
    "\036\072\040\075\024\100\037\102\014\103\017\104\020" +
    "\001\002\000\004\076\233\001\002\000\004\045\230\001" +
    "\002\000\062\003\ufffc\011\ufffc\041\ufffc\045\ufffc\047\ufffc" +
    "\051\ufffc\052\ufffc\053\ufffc\057\ufffc\061\ufffc\062\ufffc\064" +
    "\ufffc\066\ufffc\070\ufffc\071\ufffc\072\ufffc\073\ufffc\074\ufffc" +
    "\075\ufffc\076\ufffc\100\ufffc\102\ufffc\103\ufffc\104\ufffc\001" +
    "\002\000\004\006\227\001\002\000\062\003\ufff3\011\ufff3" +
    "\041\ufff3\045\ufff3\047\ufff3\051\ufff3\052\ufff3\053\ufff3\057" +
    "\ufff3\061\ufff3\062\ufff3\064\ufff3\066\ufff3\070\ufff3\071\ufff3" +
    "\072\ufff3\073\ufff3\074\ufff3\075\ufff3\076\ufff3\100\ufff3\102" +
    "\ufff3\103\ufff3\104\ufff3\001\002\000\020\006\222\051\220" +
    "\061\223\066\224\071\225\076\221\101\226\001\002\000" +
    "\020\004\051\016\047\024\052\045\054\054\053\055\050" +
    "\056\057\001\002\000\022\004\051\016\047\024\115\040" +
    "\120\045\054\054\053\055\050\056\057\001\002\000\064" +
    "\003\ufff8\006\162\011\ufff8\041\ufff8\045\ufff8\047\ufff8\051" +
    "\ufff8\052\ufff8\053\ufff8\057\ufff8\061\ufff8\062\ufff8\064\ufff8" +
    "\066\ufff8\070\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8\075" +
    "\ufff8\076\ufff8\100\ufff8\102\ufff8\103\ufff8\104\ufff8\001\002" +
    "\000\064\003\ufffa\006\161\011\ufffa\041\ufffa\045\ufffa\047" +
    "\ufffa\051\ufffa\052\ufffa\053\ufffa\057\ufffa\061\ufffa\062\ufffa" +
    "\064\ufffa\066\ufffa\070\ufffa\071\ufffa\072\ufffa\073\ufffa\074" +
    "\ufffa\075\ufffa\076\ufffa\100\ufffa\102\ufffa\103\ufffa\104\ufffa" +
    "\001\002\000\004\066\160\001\002\000\022\004\051\016" +
    "\047\024\115\040\120\045\054\054\053\055\050\056\057" +
    "\001\002\000\004\045\131\001\002\000\036\003\030\041" +
    "\015\045\011\047\032\057\031\064\010\070\036\072\040" +
    "\073\uffb3\075\024\100\037\102\014\103\017\104\020\001" +
    "\002\000\006\044\045\046\044\001\002\000\004\101\043" +
    "\001\002\000\062\003\ufff1\011\ufff1\041\ufff1\045\ufff1\047" +
    "\ufff1\051\ufff1\052\ufff1\053\ufff1\057\ufff1\061\ufff1\062\ufff1" +
    "\064\ufff1\066\ufff1\070\ufff1\071\ufff1\072\ufff1\073\ufff1\074" +
    "\ufff1\075\ufff1\076\ufff1\100\ufff1\102\ufff1\103\ufff1\104\ufff1" +
    "\001\002\000\020\004\051\016\047\024\052\045\054\054" +
    "\053\055\050\056\057\001\002\000\004\045\011\001\002" +
    "\000\010\042\uffe6\044\uffe6\046\uffe6\001\002\000\020\004" +
    "\051\016\047\024\052\045\054\054\053\055\050\056\057" +
    "\001\002\000\132\003\uffc2\006\uffc2\011\uffc2\016\uffc2\017" +
    "\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\025\uffc2\027\uffc2" +
    "\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036" +
    "\uffc2\037\uffc2\041\uffc2\044\uffc2\045\uffc2\047\uffc2\050\uffc2" +
    "\051\uffc2\052\uffc2\053\uffc2\057\uffc2\060\uffc2\061\uffc2\062" +
    "\uffc2\064\uffc2\066\uffc2\070\uffc2\071\uffc2\072\uffc2\073\uffc2" +
    "\074\uffc2\075\uffc2\076\uffc2\100\uffc2\102\uffc2\103\uffc2\104" +
    "\uffc2\001\002\000\132\003\uffc4\006\uffc4\011\uffc4\016\uffc4" +
    "\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\025\uffc4\027" +
    "\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4" +
    "\036\uffc4\037\uffc4\041\uffc4\044\uffc4\045\uffc4\047\uffc4\050" +
    "\uffc4\051\uffc4\052\uffc4\053\uffc4\057\uffc4\060\uffc4\061\uffc4" +
    "\062\uffc4\064\uffc4\066\uffc4\070\uffc4\071\uffc4\072\uffc4\073" +
    "\uffc4\074\uffc4\075\uffc4\076\uffc4\100\uffc4\102\uffc4\103\uffc4" +
    "\104\uffc4\001\002\000\020\004\051\016\047\024\052\045" +
    "\054\054\053\055\050\056\057\001\002\000\132\003\uffc3" +
    "\006\uffc3\011\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022" +
    "\uffc3\023\uffc3\025\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3" +
    "\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\041\uffc3\044" +
    "\uffc3\045\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3" +
    "\057\uffc3\060\uffc3\061\uffc3\062\uffc3\064\uffc3\066\uffc3\070" +
    "\uffc3\071\uffc3\072\uffc3\073\uffc3\074\uffc3\075\uffc3\076\uffc3" +
    "\100\uffc3\102\uffc3\103\uffc3\104\uffc3\001\002\000\132\003" +
    "\uffc5\006\uffc5\011\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5" +
    "\022\uffc5\023\uffc5\025\uffc5\027\uffc5\030\uffc5\031\uffc5\032" +
    "\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\041\uffc5" +
    "\044\uffc5\045\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053" +
    "\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\064\uffc5\066\uffc5" +
    "\070\uffc5\071\uffc5\072\uffc5\073\uffc5\074\uffc5\075\uffc5\076" +
    "\uffc5\100\uffc5\102\uffc5\103\uffc5\104\uffc5\001\002\000\064" +
    "\003\uffe0\006\uffe0\011\uffe0\041\uffe0\045\uffe0\047\uffe0\051" +
    "\uffe0\052\uffe0\053\uffe0\057\uffe0\061\uffe0\062\uffe0\064\uffe0" +
    "\066\uffe0\070\uffe0\071\uffe0\072\uffe0\073\uffe0\074\uffe0\075" +
    "\uffe0\076\uffe0\100\uffe0\102\uffe0\103\uffe0\104\uffe0\001\002" +
    "\000\126\003\uffd4\006\uffd4\011\uffd4\016\062\017\065\020" +
    "\074\021\060\022\067\023\070\025\uffd4\030\071\031\063" +
    "\032\066\033\064\034\073\035\072\036\uffd4\037\uffd4\041" +
    "\uffd4\045\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4" +
    "\057\uffd4\060\uffd4\061\uffd4\062\uffd4\064\uffd4\066\uffd4\070" +
    "\uffd4\071\uffd4\072\uffd4\073\uffd4\074\uffd4\075\uffd4\076\uffd4" +
    "\100\uffd4\102\uffd4\103\uffd4\104\uffd4\001\002\000\132\003" +
    "\uffc1\006\uffc1\011\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1" +
    "\022\uffc1\023\uffc1\025\uffc1\027\uffc1\030\uffc1\031\uffc1\032" +
    "\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\041\uffc1" +
    "\044\uffc1\045\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053" +
    "\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\064\uffc1\066\uffc1" +
    "\070\uffc1\071\uffc1\072\uffc1\073\uffc1\074\uffc1\075\uffc1\076" +
    "\uffc1\100\uffc1\102\uffc1\103\uffc1\104\uffc1\001\002\000\020" +
    "\004\051\016\047\024\052\045\054\054\053\055\050\056" +
    "\057\001\002\000\020\004\051\016\047\024\052\045\054" +
    "\054\053\055\050\056\057\001\002\000\020\004\051\016" +
    "\047\024\052\045\054\054\053\055\050\056\057\001\002" +
    "\000\020\004\uffd2\016\uffd2\024\uffd2\045\uffd2\054\uffd2\055" +
    "\uffd2\056\uffd2\001\002\000\020\004\uffd0\016\uffd0\024\uffd0" +
    "\045\uffd0\054\uffd0\055\uffd0\056\uffd0\001\002\000\020\004" +
    "\051\016\047\024\052\045\054\054\053\055\050\056\057" +
    "\001\002\000\020\004\uffd1\016\uffd1\024\uffd1\045\uffd1\054" +
    "\uffd1\055\uffd1\056\uffd1\001\002\000\004\026\077\001\002" +
    "\000\020\004\051\016\047\024\052\045\054\054\053\055" +
    "\050\056\057\001\002\000\020\004\uffd3\016\uffd3\024\uffd3" +
    "\045\uffd3\054\uffd3\055\uffd3\056\uffd3\001\002\000\020\004" +
    "\uffce\016\uffce\024\uffce\045\uffce\054\uffce\055\uffce\056\uffce" +
    "\001\002\000\020\004\uffcf\016\uffcf\024\uffcf\045\uffcf\054" +
    "\uffcf\055\uffcf\056\uffcf\001\002\000\020\004\051\016\047" +
    "\024\052\045\054\054\053\055\050\056\057\001\002\000" +
    "\132\003\uffca\006\uffca\011\uffca\016\uffca\017\uffca\020\uffca" +
    "\021\uffca\022\067\023\070\025\uffca\027\uffca\030\uffca\031" +
    "\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca" +
    "\041\uffca\044\uffca\045\uffca\047\uffca\050\uffca\051\uffca\052" +
    "\uffca\053\uffca\057\uffca\060\uffca\061\uffca\062\uffca\064\uffca" +
    "\066\uffca\070\uffca\071\uffca\072\uffca\073\uffca\074\uffca\075" +
    "\uffca\076\uffca\100\uffca\102\uffca\103\uffca\104\uffca\001\002" +
    "\000\132\003\uffc7\006\uffc7\011\uffc7\016\uffc7\017\uffc7\020" +
    "\uffc7\021\uffc7\022\uffc7\023\uffc7\025\uffc7\027\uffc7\030\uffc7" +
    "\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037" +
    "\uffc7\041\uffc7\044\uffc7\045\uffc7\047\uffc7\050\uffc7\051\uffc7" +
    "\052\uffc7\053\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\064" +
    "\uffc7\066\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7" +
    "\075\uffc7\076\uffc7\100\uffc7\102\uffc7\103\uffc7\104\uffc7\001" +
    "\002\000\020\004\051\016\047\024\052\045\054\054\053" +
    "\055\050\056\057\001\002\000\020\016\062\017\065\020" +
    "\074\021\060\022\067\023\070\027\101\001\002\000\132" +
    "\003\uffc8\006\uffc8\011\uffc8\016\uffc8\017\uffc8\020\uffc8\021" +
    "\uffc8\022\uffc8\023\uffc8\025\uffc8\027\uffc8\030\uffc8\031\uffc8" +
    "\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\041" +
    "\uffc8\044\uffc8\045\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8" +
    "\053\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\064\uffc8\066" +
    "\uffc8\070\uffc8\071\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8" +
    "\076\uffc8\100\uffc8\102\uffc8\103\uffc8\104\uffc8\001\002\000" +
    "\132\003\uffcc\006\uffcc\011\uffcc\016\uffcc\017\uffcc\020\074" +
    "\021\060\022\067\023\070\025\uffcc\027\uffcc\030\uffcc\031" +
    "\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc" +
    "\041\uffcc\044\uffcc\045\uffcc\047\uffcc\050\uffcc\051\uffcc\052" +
    "\uffcc\053\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\064\uffcc" +
    "\066\uffcc\070\uffcc\071\uffcc\072\uffcc\073\uffcc\074\uffcc\075" +
    "\uffcc\076\uffcc\100\uffcc\102\uffcc\103\uffcc\104\uffcc\001\002" +
    "\000\132\003\uffcb\006\uffcb\011\uffcb\016\uffcb\017\uffcb\020" +
    "\074\021\060\022\067\023\070\025\uffcb\027\uffcb\030\uffcb" +
    "\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037" +
    "\uffcb\041\uffcb\044\uffcb\045\uffcb\047\uffcb\050\uffcb\051\uffcb" +
    "\052\uffcb\053\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\064" +
    "\uffcb\066\uffcb\070\uffcb\071\uffcb\072\uffcb\073\uffcb\074\uffcb" +
    "\075\uffcb\076\uffcb\100\uffcb\102\uffcb\103\uffcb\104\uffcb\001" +
    "\002\000\112\003\uffd5\006\uffd5\011\uffd5\016\062\017\065" +
    "\020\074\021\060\022\067\023\070\025\uffd5\036\uffd5\037" +
    "\uffd5\041\uffd5\045\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5" +
    "\053\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\064\uffd5\066" +
    "\uffd5\070\uffd5\071\uffd5\072\uffd5\073\uffd5\074\uffd5\075\uffd5" +
    "\076\uffd5\100\uffd5\102\uffd5\103\uffd5\104\uffd5\001\002\000" +
    "\132\003\uffc9\006\uffc9\011\uffc9\016\uffc9\017\uffc9\020\uffc9" +
    "\021\uffc9\022\067\023\070\025\uffc9\027\uffc9\030\uffc9\031" +
    "\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9" +
    "\041\uffc9\044\uffc9\045\uffc9\047\uffc9\050\uffc9\051\uffc9\052" +
    "\uffc9\053\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9\064\uffc9" +
    "\066\uffc9\070\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9\075" +
    "\uffc9\076\uffc9\100\uffc9\102\uffc9\103\uffc9\104\uffc9\001\002" +
    "\000\020\016\062\017\065\020\074\021\060\022\067\023" +
    "\070\025\107\001\002\000\132\003\uffc6\006\uffc6\011\uffc6" +
    "\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\025" +
    "\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6" +
    "\035\uffc6\036\uffc6\037\uffc6\041\uffc6\044\uffc6\045\uffc6\047" +
    "\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\057\uffc6\060\uffc6" +
    "\061\uffc6\062\uffc6\064\uffc6\066\uffc6\070\uffc6\071\uffc6\072" +
    "\uffc6\073\uffc6\074\uffc6\075\uffc6\076\uffc6\100\uffc6\102\uffc6" +
    "\103\uffc6\104\uffc6\001\002\000\132\003\uffcd\006\uffcd\011" +
    "\uffcd\016\uffcd\017\uffcd\020\074\021\060\022\067\023\070" +
    "\025\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034" +
    "\uffcd\035\uffcd\036\uffcd\037\uffcd\041\uffcd\044\uffcd\045\uffcd" +
    "\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\057\uffcd\060" +
    "\uffcd\061\uffcd\062\uffcd\064\uffcd\066\uffcd\070\uffcd\071\uffcd" +
    "\072\uffcd\073\uffcd\074\uffcd\075\uffcd\076\uffcd\100\uffcd\102" +
    "\uffcd\103\uffcd\104\uffcd\001\002\000\004\073\114\001\002" +
    "\000\040\003\030\041\015\045\011\047\032\057\031\064" +
    "\010\070\036\071\uffb4\072\040\073\uffb4\075\024\100\037" +
    "\102\014\103\017\104\020\001\002\000\062\003\ufffd\011" +
    "\ufffd\041\ufffd\045\ufffd\047\ufffd\051\ufffd\052\ufffd\053\ufffd" +
    "\057\ufffd\061\ufffd\062\ufffd\064\ufffd\066\ufffd\070\ufffd\071" +
    "\ufffd\072\ufffd\073\ufffd\074\ufffd\075\ufffd\076\ufffd\100\ufffd" +
    "\102\ufffd\103\ufffd\104\ufffd\001\002\000\022\004\051\016" +
    "\047\024\115\040\120\045\054\054\053\055\050\056\057" +
    "\001\002\000\022\004\051\016\047\024\115\040\120\045" +
    "\054\054\053\055\050\056\057\001\002\000\076\003\uffd6" +
    "\006\uffd6\011\uffd6\025\uffd6\036\uffd6\037\uffd6\041\uffd6\045" +
    "\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\057\uffd6" +
    "\060\uffd6\061\uffd6\062\uffd6\064\uffd6\066\uffd6\070\uffd6\071" +
    "\uffd6\072\uffd6\073\uffd6\074\uffd6\075\uffd6\076\uffd6\100\uffd6" +
    "\102\uffd6\103\uffd6\104\uffd6\001\002\000\066\003\uffb1\011" +
    "\uffb1\036\122\037\123\041\uffb1\045\uffb1\047\uffb1\051\uffb1" +
    "\052\uffb1\053\uffb1\057\uffb1\061\uffb1\062\uffb1\064\uffb1\066" +
    "\uffb1\070\uffb1\071\uffb1\072\uffb1\073\uffb1\074\uffb1\075\uffb1" +
    "\076\uffb1\100\uffb1\102\uffb1\103\uffb1\104\uffb1\001\002\000" +
    "\022\004\051\016\047\024\115\040\120\045\054\054\053" +
    "\055\050\056\057\001\002\000\076\003\uffd8\006\uffd8\011" +
    "\uffd8\025\uffd8\036\uffd8\037\uffd8\041\uffd8\045\uffd8\047\uffd8" +
    "\050\uffd8\051\uffd8\052\uffd8\053\uffd8\057\uffd8\060\uffd8\061" +
    "\uffd8\062\uffd8\064\uffd8\066\uffd8\070\uffd8\071\uffd8\072\uffd8" +
    "\073\uffd8\074\uffd8\075\uffd8\076\uffd8\100\uffd8\102\uffd8\103" +
    "\uffd8\104\uffd8\001\002\000\022\004\051\016\047\024\115" +
    "\040\120\045\054\054\053\055\050\056\057\001\002\000" +
    "\022\004\051\016\047\024\115\040\120\045\054\054\053" +
    "\055\050\056\057\001\002\000\076\003\uffd9\006\uffd9\011" +
    "\uffd9\025\uffd9\036\uffd9\037\uffd9\041\uffd9\045\uffd9\047\uffd9" +
    "\050\uffd9\051\uffd9\052\uffd9\053\uffd9\057\uffd9\060\uffd9\061" +
    "\uffd9\062\uffd9\064\uffd9\066\uffd9\070\uffd9\071\uffd9\072\uffd9" +
    "\073\uffd9\074\uffd9\075\uffd9\076\uffd9\100\uffd9\102\uffd9\103" +
    "\uffd9\104\uffd9\001\002\000\076\003\uffda\006\uffda\011\uffda" +
    "\025\uffda\036\uffda\037\uffda\041\uffda\045\uffda\047\uffda\050" +
    "\uffda\051\uffda\052\uffda\053\uffda\057\uffda\060\uffda\061\uffda" +
    "\062\uffda\064\uffda\066\uffda\070\uffda\071\uffda\072\uffda\073" +
    "\uffda\074\uffda\075\uffda\076\uffda\100\uffda\102\uffda\103\uffda" +
    "\104\uffda\001\002\000\010\025\130\036\122\037\123\001" +
    "\002\000\040\016\062\017\065\020\074\021\060\022\067" +
    "\023\070\025\107\030\071\031\063\032\066\033\064\034" +
    "\073\035\072\036\uffd4\037\uffd4\001\002\000\076\003\uffd7" +
    "\006\uffd7\011\uffd7\025\uffd7\036\uffd7\037\uffd7\041\uffd7\045" +
    "\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\057\uffd7" +
    "\060\uffd7\061\uffd7\062\uffd7\064\uffd7\066\uffd7\070\uffd7\071" +
    "\uffd7\072\uffd7\073\uffd7\074\uffd7\075\uffd7\076\uffd7\100\uffd7" +
    "\102\uffd7\103\uffd7\104\uffd7\001\002\000\012\012\135\013" +
    "\132\014\134\015\136\001\002\000\044\003\uffe3\025\uffe3" +
    "\041\uffe3\043\uffe3\044\uffe3\045\uffe3\047\uffe3\057\uffe3\064" +
    "\uffe3\070\uffe3\072\uffe3\075\uffe3\077\uffe3\100\uffe3\102\uffe3" +
    "\103\uffe3\104\uffe3\001\002\000\036\003\uffad\041\uffad\045" +
    "\uffad\047\uffad\057\uffad\064\uffad\070\uffad\072\uffad\075\uffad" +
    "\077\137\100\uffad\102\uffad\103\uffad\104\uffad\001\002\000" +
    "\044\003\uffe2\025\uffe2\041\uffe2\043\uffe2\044\uffe2\045\uffe2" +
    "\047\uffe2\057\uffe2\064\uffe2\070\uffe2\072\uffe2\075\uffe2\077" +
    "\uffe2\100\uffe2\102\uffe2\103\uffe2\104\uffe2\001\002\000\044" +
    "\003\uffe4\025\uffe4\041\uffe4\043\uffe4\044\uffe4\045\uffe4\047" +
    "\uffe4\057\uffe4\064\uffe4\070\uffe4\072\uffe4\075\uffe4\077\uffe4" +
    "\100\uffe4\102\uffe4\103\uffe4\104\uffe4\001\002\000\044\003" +
    "\uffe1\025\uffe1\041\uffe1\043\uffe1\044\uffe1\045\uffe1\047\uffe1" +
    "\057\uffe1\064\uffe1\070\uffe1\072\uffe1\075\uffe1\077\uffe1\100" +
    "\uffe1\102\uffe1\103\uffe1\104\uffe1\001\002\000\004\024\146" +
    "\001\002\000\034\003\030\041\015\045\011\047\032\057" +
    "\031\064\010\070\036\072\040\075\024\100\037\102\014" +
    "\103\017\104\020\001\002\000\036\003\030\041\015\045" +
    "\011\047\032\057\031\064\010\070\036\072\040\074\143" +
    "\075\024\100\037\102\014\103\017\104\020\001\002\000" +
    "\004\101\uffaa\001\002\000\022\004\051\016\047\024\115" +
    "\040\120\045\054\054\053\055\050\056\057\001\002\000" +
    "\010\006\145\036\122\037\123\001\002\000\004\101\uffb0" +
    "\001\002\000\004\045\150\001\002\000\006\025\152\044" +
    "\153\001\002\000\012\012\135\013\132\014\134\015\136" +
    "\001\002\000\006\025\uffab\044\uffab\001\002\000\034\003" +
    "\uffae\041\uffae\045\uffae\047\uffae\057\uffae\064\uffae\070\uffae" +
    "\072\uffae\075\uffae\100\uffae\102\uffae\103\uffae\104\uffae\001" +
    "\002\000\004\045\150\001\002\000\006\025\uffac\044\uffac" +
    "\001\002\000\010\036\122\037\123\060\156\001\002\000" +
    "\036\003\030\041\015\045\011\047\032\057\031\064\010" +
    "\070\036\071\uffb3\072\040\075\024\100\037\102\014\103" +
    "\017\104\020\001\002\000\004\071\uffb2\001\002\000\062" +
    "\003\ufff5\011\ufff5\041\ufff5\045\ufff5\047\ufff5\051\ufff5\052" +
    "\ufff5\053\ufff5\057\ufff5\061\ufff5\062\ufff5\064\ufff5\066\ufff5" +
    "\070\ufff5\071\ufff5\072\ufff5\073\ufff5\074\ufff5\075\ufff5\076" +
    "\ufff5\100\ufff5\102\ufff5\103\ufff5\104\ufff5\001\002\000\062" +
    "\003\ufffb\011\ufffb\041\ufffb\045\ufffb\047\ufffb\051\ufffb\052" +
    "\ufffb\053\ufffb\057\ufffb\061\ufffb\062\ufffb\064\ufffb\066\ufffb" +
    "\070\ufffb\071\ufffb\072\ufffb\073\ufffb\074\ufffb\075\ufffb\076" +
    "\ufffb\100\ufffb\102\ufffb\103\ufffb\104\ufffb\001\002\000\062" +
    "\003\ufff9\011\ufff9\041\ufff9\045\ufff9\047\ufff9\051\ufff9\052" +
    "\ufff9\053\ufff9\057\ufff9\061\ufff9\062\ufff9\064\ufff9\066\ufff9" +
    "\070\ufff9\071\ufff9\072\ufff9\073\ufff9\074\ufff9\075\ufff9\076" +
    "\ufff9\100\ufff9\102\ufff9\103\ufff9\104\ufff9\001\002\000\012" +
    "\036\122\037\123\050\165\052\164\001\002\000\034\003" +
    "\030\041\015\045\011\047\032\057\031\064\010\070\036" +
    "\072\040\075\024\100\037\102\014\103\017\104\020\001" +
    "\002\000\034\003\030\041\015\045\011\047\032\057\031" +
    "\064\010\070\036\072\040\075\024\100\037\102\014\103" +
    "\017\104\020\001\002\000\006\051\uffdd\053\167\001\002" +
    "\000\022\004\051\016\047\024\115\040\120\045\054\054" +
    "\053\055\050\056\057\001\002\000\010\036\122\037\123" +
    "\050\171\001\002\000\034\003\030\041\015\045\011\047" +
    "\032\057\031\064\010\070\036\072\040\075\024\100\037" +
    "\102\014\103\017\104\020\001\002\000\040\003\030\041" +
    "\015\045\011\047\032\051\uffdc\053\uffdc\057\031\064\010" +
    "\070\036\072\040\075\024\100\037\102\014\103\017\104" +
    "\020\001\002\000\040\003\030\041\015\045\011\047\032" +
    "\051\uffdf\052\174\057\031\064\010\070\036\072\040\075" +
    "\024\100\037\102\014\103\017\104\020\001\002\000\034" +
    "\003\030\041\015\045\011\047\032\057\031\064\010\070" +
    "\036\072\040\075\024\100\037\102\014\103\017\104\020" +
    "\001\002\000\036\003\030\041\015\045\011\047\032\051" +
    "\uffde\057\031\064\010\070\036\072\040\075\024\100\037" +
    "\102\014\103\017\104\020\001\002\000\040\003\030\041" +
    "\015\045\011\047\032\051\uffdb\053\uffdb\057\031\064\010" +
    "\070\036\072\040\075\024\100\037\102\014\103\017\104" +
    "\020\001\002\000\020\016\062\017\065\020\074\021\060" +
    "\022\067\023\070\060\200\001\002\000\004\062\201\001" +
    "\002\000\010\004\212\054\211\056\214\001\002\000\010" +
    "\052\uffbe\061\uffbe\062\uffbe\001\002\000\010\052\205\061" +
    "\uffb8\062\201\001\002\000\004\061\uffc0\001\002\000\004" +
    "\050\207\001\002\000\010\052\uffbf\061\uffbf\062\uffbf\001" +
    "\002\000\034\003\030\041\015\045\011\047\032\057\031" +
    "\064\010\070\036\072\040\075\024\100\037\102\014\103" +
    "\017\104\020\001\002\000\036\003\030\041\015\045\011" +
    "\047\032\057\031\061\uffb9\064\010\070\036\072\040\075" +
    "\024\100\037\102\014\103\017\104\020\001\002\000\004" +
    "\063\uffba\001\002\000\004\063\uffbc\001\002\000\004\063" +
    "\215\001\002\000\004\063\uffbb\001\002\000\004\050\216" +
    "\001\002\000\034\003\030\041\015\045\011\047\032\057" +
    "\031\064\010\070\036\072\040\075\024\100\037\102\014" +
    "\103\017\104\020\001\002\000\042\003\030\041\015\045" +
    "\011\047\032\052\uffbd\057\031\061\uffbd\062\uffbd\064\010" +
    "\070\036\072\040\075\024\100\037\102\014\103\017\104" +
    "\020\001\002\000\062\003\uffed\011\uffed\041\uffed\045\uffed" +
    "\047\uffed\051\uffed\052\uffed\053\uffed\057\uffed\061\uffed\062" +
    "\uffed\064\uffed\066\uffed\070\uffed\071\uffed\072\uffed\073\uffed" +
    "\074\uffed\075\uffed\076\uffed\100\uffed\102\uffed\103\uffed\104" +
    "\uffed\001\002\000\062\003\uffe9\011\uffe9\041\uffe9\045\uffe9" +
    "\047\uffe9\051\uffe9\052\uffe9\053\uffe9\057\uffe9\061\uffe9\062" +
    "\uffe9\064\uffe9\066\uffe9\070\uffe9\071\uffe9\072\uffe9\073\uffe9" +
    "\074\uffe9\075\uffe9\076\uffe9\100\uffe9\102\uffe9\103\uffe9\104" +
    "\uffe9\001\002\000\062\003\uffee\011\uffee\041\uffee\045\uffee" +
    "\047\uffee\051\uffee\052\uffee\053\uffee\057\uffee\061\uffee\062" +
    "\uffee\064\uffee\066\uffee\070\uffee\071\uffee\072\uffee\073\uffee" +
    "\074\uffee\075\uffee\076\uffee\100\uffee\102\uffee\103\uffee\104" +
    "\uffee\001\002\000\062\003\uffec\011\uffec\041\uffec\045\uffec" +
    "\047\uffec\051\uffec\052\uffec\053\uffec\057\uffec\061\uffec\062" +
    "\uffec\064\uffec\066\uffec\070\uffec\071\uffec\072\uffec\073\uffec" +
    "\074\uffec\075\uffec\076\uffec\100\uffec\102\uffec\103\uffec\104" +
    "\uffec\001\002\000\062\003\uffeb\011\uffeb\041\uffeb\045\uffeb" +
    "\047\uffeb\051\uffeb\052\uffeb\053\uffeb\057\uffeb\061\uffeb\062" +
    "\uffeb\064\uffeb\066\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb" +
    "\074\uffeb\075\uffeb\076\uffeb\100\uffeb\102\uffeb\103\uffeb\104" +
    "\uffeb\001\002\000\062\003\uffea\011\uffea\041\uffea\045\uffea" +
    "\047\uffea\051\uffea\052\uffea\053\uffea\057\uffea\061\uffea\062" +
    "\uffea\064\uffea\066\uffea\070\uffea\071\uffea\072\uffea\073\uffea" +
    "\074\uffea\075\uffea\076\uffea\100\uffea\102\uffea\103\uffea\104" +
    "\uffea\001\002\000\062\003\uffe8\011\uffe8\041\uffe8\045\uffe8" +
    "\047\uffe8\051\uffe8\052\uffe8\053\uffe8\057\uffe8\061\uffe8\062" +
    "\uffe8\064\uffe8\066\uffe8\070\uffe8\071\uffe8\072\uffe8\073\uffe8" +
    "\074\uffe8\075\uffe8\076\uffe8\100\uffe8\102\uffe8\103\uffe8\104" +
    "\uffe8\001\002\000\062\003\uffef\011\uffef\041\uffef\045\uffef" +
    "\047\uffef\051\uffef\052\uffef\053\uffef\057\uffef\061\uffef\062" +
    "\uffef\064\uffef\066\uffef\070\uffef\071\uffef\072\uffef\073\uffef" +
    "\074\uffef\075\uffef\076\uffef\100\uffef\102\uffef\103\uffef\104" +
    "\uffef\001\002\000\036\003\uffad\041\uffad\045\uffad\047\uffad" +
    "\057\uffad\064\uffad\070\uffad\072\uffad\075\uffad\077\137\100" +
    "\uffad\102\uffad\103\uffad\104\uffad\001\002\000\034\003\030" +
    "\041\015\045\011\047\032\057\031\064\010\070\036\072" +
    "\040\075\024\100\037\102\014\103\017\104\020\001\002" +
    "\000\036\003\030\041\015\045\011\047\032\057\031\064" +
    "\010\070\036\072\040\075\024\076\uffaf\100\037\102\014" +
    "\103\017\104\020\001\002\000\062\003\ufff2\011\ufff2\041" +
    "\ufff2\045\ufff2\047\ufff2\051\ufff2\052\ufff2\053\ufff2\057\ufff2" +
    "\061\ufff2\062\ufff2\064\ufff2\066\ufff2\070\ufff2\071\ufff2\072" +
    "\ufff2\073\ufff2\074\ufff2\075\ufff2\076\ufff2\100\ufff2\102\ufff2" +
    "\103\ufff2\104\ufff2\001\002\000\004\002\000\001\002\000" +
    "\062\003\ufff7\011\ufff7\041\ufff7\045\ufff7\047\ufff7\051\ufff7" +
    "\052\ufff7\053\ufff7\057\ufff7\061\ufff7\062\ufff7\064\ufff7\066" +
    "\ufff7\070\ufff7\071\ufff7\072\ufff7\073\ufff7\074\ufff7\075\ufff7" +
    "\076\ufff7\100\ufff7\102\ufff7\103\ufff7\104\ufff7\001\002\000" +
    "\004\006\uffa2\001\002\000\004\006\uffa3\001\002\000\004" +
    "\006\uffa4\001\002\000\004\006\uffa5\001\002\000\062\003" +
    "\ufff6\011\ufff6\041\ufff6\045\ufff6\047\ufff6\051\ufff6\052\ufff6" +
    "\053\ufff6\057\ufff6\061\ufff6\062\ufff6\064\ufff6\066\ufff6\070" +
    "\ufff6\071\ufff6\072\ufff6\073\ufff6\074\ufff6\075\ufff6\076\ufff6" +
    "\100\ufff6\102\ufff6\103\ufff6\104\ufff6\001\002\000\006\042" +
    "\244\044\045\001\002\000\012\012\135\013\132\014\134" +
    "\015\136\001\002\000\004\043\246\001\002\000\020\004" +
    "\051\016\047\024\052\045\054\054\053\055\050\056\057" +
    "\001\002\000\064\003\uffe7\006\uffe7\011\uffe7\041\uffe7\045" +
    "\uffe7\047\uffe7\051\uffe7\052\uffe7\053\uffe7\057\uffe7\061\uffe7" +
    "\062\uffe7\064\uffe7\066\uffe7\070\uffe7\071\uffe7\072\uffe7\073" +
    "\uffe7\074\uffe7\075\uffe7\076\uffe7\100\uffe7\102\uffe7\103\uffe7" +
    "\104\uffe7\001\002\000\004\024\251\001\002\000\024\004" +
    "\051\016\047\024\052\025\uffa6\044\uffa6\045\054\054\053" +
    "\055\050\056\057\001\002\000\022\016\062\017\065\020" +
    "\074\021\060\022\067\023\070\025\uffa7\044\uffa7\001\002" +
    "\000\006\025\254\044\255\001\002\000\004\006\uffa9\001" +
    "\002\000\024\004\051\016\047\024\052\025\uffa6\044\uffa6" +
    "\045\054\054\053\055\050\056\057\001\002\000\006\025" +
    "\uffa8\044\uffa8\001\002\000\062\003\ufff4\011\ufff4\041\ufff4" +
    "\045\ufff4\047\ufff4\051\ufff4\052\ufff4\053\ufff4\057\ufff4\061" +
    "\ufff4\062\ufff4\064\ufff4\066\ufff4\070\ufff4\071\ufff4\072\ufff4" +
    "\073\ufff4\074\ufff4\075\ufff4\076\ufff4\100\ufff4\102\ufff4\103" +
    "\ufff4\104\ufff4\001\002\000\004\046\261\001\002\000\002" +
    "\001\002\000\004\065\263\001\002\000\002\001\002\000" +
    "\006\060\uffb5\067\266\001\002\000\004\060\270\001\002" +
    "\000\020\004\051\016\047\024\052\045\054\054\053\055" +
    "\050\056\057\001\002\000\020\016\062\017\065\020\074" +
    "\021\060\022\067\023\070\060\uffb6\001\002\000\034\003" +
    "\030\041\015\045\011\047\032\057\031\064\010\070\036" +
    "\072\040\075\024\100\037\102\014\103\017\104\020\001" +
    "\002\000\036\003\030\041\015\045\011\047\032\057\031" +
    "\064\010\066\uffb7\070\036\072\040\075\024\100\037\102" +
    "\014\103\017\104\020\001\002\000\062\003\ufff0\011\ufff0" +
    "\041\ufff0\045\ufff0\047\ufff0\051\ufff0\052\ufff0\053\ufff0\057" +
    "\ufff0\061\ufff0\062\ufff0\064\ufff0\066\ufff0\070\ufff0\071\ufff0" +
    "\072\ufff0\073\ufff0\074\ufff0\075\ufff0\076\ufff0\100\ufff0\102" +
    "\ufff0\103\ufff0\104\ufff0\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\021\004\024\005\033\006\040" +
    "\010\032\012\020\017\015\025\034\030\012\031\026\033" +
    "\022\036\041\037\006\041\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\242\001\001" +
    "\000\002\001\001\000\010\011\055\015\240\037\237\001" +
    "\001\000\010\011\055\015\236\037\235\001\001\000\002" +
    "\001\001\000\034\004\112\005\033\006\040\010\032\012" +
    "\020\017\015\025\034\030\012\031\026\033\022\036\041" +
    "\037\006\041\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\176\001\001\000\010\011" +
    "\055\014\162\015\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\055\014\154\015" +
    "\115\001\001\000\002\001\001\000\040\003\111\004\024" +
    "\005\033\006\040\010\032\012\020\017\015\025\034\027" +
    "\110\030\012\031\026\033\022\036\041\037\006\041\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\055\015\054\001\001\000\004\006\045" +
    "\001\001\000\002\001\001\000\004\011\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\060\001\001\000\002\001\001\000\004\011\104" +
    "\001\001\000\004\011\103\001\001\000\004\011\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\004" +
    "\112\005\033\006\040\010\032\012\020\017\015\025\034" +
    "\030\012\031\026\033\022\036\041\037\006\041\025\001" +
    "\001\000\002\001\001\000\010\011\055\014\116\015\115" +
    "\001\001\000\010\011\126\014\125\015\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\055\014\120" +
    "\015\115\001\001\000\002\001\001\000\010\011\055\014" +
    "\124\015\115\001\001\000\010\011\055\014\123\015\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\060\001\001\000\002\001\001\000\004" +
    "\007\132\001\001\000\002\001\001\000\004\034\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\140\004\024\005\033\006" +
    "\040\010\032\012\020\017\015\025\034\030\012\031\026" +
    "\033\022\036\041\037\006\041\025\001\001\000\036\004" +
    "\112\005\033\006\040\010\032\012\020\017\015\025\034" +
    "\030\012\031\026\032\141\033\022\036\041\037\006\041" +
    "\025\001\001\000\002\001\001\000\010\011\055\014\143" +
    "\015\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\146\001\001\000\002\001\001\000\004\007\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\111\004\024\005\033\006\040\010\032\012\020\017" +
    "\015\025\034\027\156\030\012\031\026\033\022\036\041" +
    "\037\006\041\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\165" +
    "\001\001\000\036\003\175\004\024\005\033\006\040\010" +
    "\032\012\020\017\015\025\034\030\012\031\026\033\022" +
    "\036\041\037\006\041\025\001\001\000\036\003\172\004" +
    "\024\005\033\006\040\010\032\012\020\017\015\025\034" +
    "\030\012\031\026\033\022\036\041\037\006\041\025\001" +
    "\001\000\002\001\001\000\010\011\055\014\167\015\115" +
    "\001\001\000\002\001\001\000\036\003\171\004\024\005" +
    "\033\006\040\010\032\012\020\017\015\025\034\030\012" +
    "\031\026\033\022\036\041\037\006\041\025\001\001\000" +
    "\034\004\112\005\033\006\040\010\032\012\020\017\015" +
    "\025\034\030\012\031\026\033\022\036\041\037\006\041" +
    "\025\001\001\000\034\004\112\005\033\006\040\010\032" +
    "\012\020\017\015\025\034\030\012\031\026\033\022\036" +
    "\041\037\006\041\025\001\001\000\036\003\174\004\024" +
    "\005\033\006\040\010\032\012\020\017\015\025\034\030" +
    "\012\031\026\033\022\036\041\037\006\041\025\001\001" +
    "\000\034\004\112\005\033\006\040\010\032\012\020\017" +
    "\015\025\034\030\012\031\026\033\022\036\041\037\006" +
    "\041\025\001\001\000\034\004\112\005\033\006\040\010" +
    "\032\012\020\017\015\025\034\030\012\031\026\033\022" +
    "\036\041\037\006\041\025\001\001\000\002\001\001\000" +
    "\006\021\202\023\201\001\001\000\004\024\212\001\001" +
    "\000\002\001\001\000\006\022\203\023\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\207\004\024\005\033\006\040\010\032\012\020\017" +
    "\015\025\034\030\012\031\026\033\022\036\041\037\006" +
    "\041\025\001\001\000\034\004\112\005\033\006\040\010" +
    "\032\012\020\017\015\025\034\030\012\031\026\033\022" +
    "\036\041\037\006\041\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\216\004\024\005\033\006\040\010" +
    "\032\012\020\017\015\025\034\030\012\031\026\033\022" +
    "\036\041\037\006\041\025\001\001\000\034\004\112\005" +
    "\033\006\040\010\032\012\020\017\015\025\034\030\012" +
    "\031\026\033\022\036\041\037\006\041\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\230\001\001\000\036" +
    "\003\231\004\024\005\033\006\040\010\032\012\020\017" +
    "\015\025\034\030\012\031\026\033\022\036\041\037\006" +
    "\041\025\001\001\000\034\004\112\005\033\006\040\010" +
    "\032\012\020\017\015\025\034\030\012\031\026\033\022" +
    "\036\041\037\006\041\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\244\001\001\000\002" +
    "\001\001\000\006\011\055\015\246\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\251\040\252\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\251\040\255\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\261\001\001\000" +
    "\002\001\001\000\004\020\263\001\001\000\004\026\264" +
    "\001\001\000\002\001\001\000\004\011\266\001\001\000" +
    "\002\001\001\000\036\003\270\004\024\005\033\006\040" +
    "\010\032\012\020\017\015\025\034\030\012\031\026\033" +
    "\022\036\041\037\006\041\025\001\001\000\034\004\112" +
    "\005\033\006\040\010\032\012\020\017\015\025\034\030" +
    "\012\031\026\033\022\036\041\037\006\041\025\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public String resultado = "";
    public int cont = 1;

    /*Method that is called when parser can be recovered*/
    public void syntax_error(Symbol s){ 
        //System.out.println("Unexpected token: " +s.value);
        //System.out.println("Error sintactico en la linea " + (s.right + 1) + " column " + (s.left + 1));
        Instruction.list.addError(new Error_("Error sintactico: " + s.value, "Sintactico", s.right + 1, s.left + 1));
    }

    /*Method that is called when parser can't be recovered*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        //System.out.println("Error sintactico unrecovered: " + s.value);
        //System.out.println("Error sintactico unrecovered en la linea " + s.right + " column " + s.left);
        Instruction.list.addError(new Error_("Error sintactico unrecovered: " + s.value, "Sintactico", s.right + 1, s.left + 1));
    } 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= tinicio INSTRUCTIONS tfin 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Nodo> s = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        Nodo n = new Nodo("tinicio");
        Nodo n1 = new Nodo("Instructions");
        Nodo n2 = new Nodo("tfin");
        n.setValor("inicio");
        n.setIdNodo(parser.cont++);
        n1.setIdNodo(parser.cont++);
        n2.setValor("fin");
        n2.setIdNodo(parser.cont++);
        for (int i=0; i<s.size(); i++){
            n1.addHijo(s.get(i));
        }
        Instruction.ast.addHijo(n);
        Instruction.ast.addHijo(n1);
        Instruction.ast.addHijo(n2);
        Instruction.ast.setIdNodo(parser.cont++);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= tinicio tfin 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              ArrayList<Nodo> RESULT =null;
		int ins1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ins1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Nodo> ins1 = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ins2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ins2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ins2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        // RESULT = new ArrayList<Nodo>();
        ArrayList<Nodo> aux = new ArrayList<Nodo>();
        System.out.println("ins1.get(i).getNombre()");
        for (int i=0; i<ins1.size(); i++){
            aux.add(ins1.get(i));
        }
        aux.add((Nodo) ins2);
        RESULT = aux;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCTIONS ::= INSTRUCTION 
            {
              ArrayList<Nodo> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        ArrayList<Nodo> aux = new ArrayList<Nodo>();
        aux.add((Nodo) ins);
        RESULT = aux;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCTION ::= STATEMENT tpcoma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        Nodo n = new Nodo("Instruction");
        Nodo n2 = new Nodo("tpcoma");
        n2.setValor(";");
        n2.setIdNodo(parser.cont++);
        Nodo aux = (Nodo) s;
        aux.addHijo(n2);
        n.addHijo((Nodo) aux);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCTION ::= STATEMENT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Instruction.list.addError(new Error_("Falta un: \";\"", "Sintactico", aright, -1)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCTION ::= ASSIGNMENT tpcoma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        Nodo n = new Nodo("Instruction");
        Nodo n2 = new Nodo("tpcoma");
        n2.setValor(";");
        n2.setIdNodo(parser.cont++);
        Nodo aux = (Nodo) s;
        aux.addHijo(n2);
        n.addHijo((Nodo) aux);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCTION ::= ASSIGNMENT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Instruction.list.addError(new Error_("Falta un: \";\"", "Sintactico", aright, -1)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCTION ::= CONDITIONAL tendif 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Instruction");
        Nodo n2 = new Nodo("tendif");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        Nodo aux = (Nodo) s;
        aux.addHijo(n2);
        n.addHijo((Nodo) aux);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCTION ::= SWITCH tfin_segun 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Instruction");
        Nodo n2 = new Nodo("tfin_segun");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        Nodo aux = (Nodo) s;
        aux.addHijo(n2);
        n.addHijo((Nodo) aux);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCTION ::= FOR tfin_for 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Instruction");
        Nodo n2 = new Nodo("tfin_segun");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        Nodo aux = (Nodo) s;
        aux.addHijo(n2);
        n.addHijo((Nodo) aux);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCTION ::= WHILE tend_while 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Instruction");
        Nodo n2 = new Nodo("tend_while");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        Nodo aux = (Nodo) s;
        aux.addHijo(n2);
        n.addHijo((Nodo) aux);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCTION ::= REPETIR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Instruction");
        n.addHijo((Nodo) s);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCTION ::= METODO tfin_metodo 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Instruction");
        Nodo n2 = new Nodo("tfin_metodo");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        Nodo aux = (Nodo) s;
        aux.addHijo(n2);
        n.addHijo((Nodo) aux);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCTION ::= FUNCION tfin_funcion 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Instruction");
        Nodo n2 = new Nodo("tfin_funcion");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        Nodo aux = (Nodo) s;
        aux.addHijo(n2);
        n.addHijo((Nodo) aux);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCTION ::= EXEC tpcoma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Instruction");
        Nodo n2 = new Nodo("tpcoma");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        Nodo aux = (Nodo) s;
        aux.addHijo(n2);
        n.addHijo((Nodo) aux);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCTION ::= PRINT tpcoma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Instruction");
        Nodo n2 = new Nodo("tpcoma");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        Nodo aux = (Nodo) s;
        aux.addHijo(n2);
        n.addHijo((Nodo) aux);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCTION ::= error tpcoma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCTION ::= error tendif 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCTION ::= error tfin_segun 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCTION ::= error tfin_for 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCTION ::= error tend_while 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCTION ::= error tfin_metodo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCTION ::= error tfin_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // STATEMENT ::= tingresar VAR tcomo DATATYPE tcon_val REL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Declaracion");
        Nodo n2 = new Nodo("ingresar");
        n2.setValor("ingresar");
        n2.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo((Nodo) v);
        n.addHijo((Nodo) d);
        n.addHijo((Nodo) r);
        n.setIdNodo(parser.cont++);
        RESULT =  n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VAR ::= VAR tcoma VAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Var");
        Nodo n2 = new Nodo("coma");
        n2.setValor(";");
        n2.setIdNodo(parser.cont++);
        n.addHijo((Nodo) a);
        n.addHijo((Nodo) b);
        n.setIdNodo(parser.cont++);
        RESULT =  n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VAR ::= tvar_name 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo aux = new Nodo("id");
        aux.setValor(a.toString());
        aux.setIdNodo(parser.cont++);
        RESULT = aux;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DATATYPE ::= tint 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo aux = new Nodo("type");
        aux.setValor(a.toString());
        aux.setIdNodo(parser.cont++);
        RESULT = aux;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DATATYPE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DATATYPE ::= tstring 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo aux = new Nodo("type");
        aux.setValor(a.toString());
        aux.setIdNodo(parser.cont++);
        RESULT = aux;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DATATYPE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DATATYPE ::= tbool 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo aux = new Nodo("type");
        aux.setValor(a.toString());
        aux.setIdNodo(parser.cont++);
        RESULT = aux;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DATATYPE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DATATYPE ::= tchar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo aux = new Nodo("type");
        aux.setValor(a.toString());
        aux.setIdNodo(parser.cont++);
        RESULT = aux;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DATATYPE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ASSIGNMENT ::= VAR tarrow REL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Asignacion");
        Nodo n2 = new Nodo("tarrow");
        n2.setValor(x.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo((Nodo) a);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONDITIONAL ::= tif CONDITION tthen INSTRUCTIONS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Nodo> d = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Condicional");
        Nodo n2 = new Nodo("tif");
        Nodo n3 = new Nodo("tthen");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n3.setValor(c.toString());
        n3.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.addHijo(n3);
        for (int i=0; i<d.size(); i++){
            n.addHijo(d.get(i));
        }
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITIONAL",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONDITIONAL ::= tif CONDITION tthen INSTRUCTIONS telse INSTRUCTIONS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Nodo> d = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Nodo> f = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		    
        Nodo n = new Nodo("Condicional");
        Nodo n2 = new Nodo("tif");
        Nodo n3 = new Nodo("tthen");
        Nodo n4 = new Nodo("telse");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n3.setValor(c.toString());
        n3.setIdNodo(parser.cont++);
        n4.setValor(e.toString());
        n4.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.addHijo(n3);
        for (int i=0; i<d.size(); i++){
            n.addHijo(d.get(i));
        }
        n.addHijo(n4);
        for (int i=0; i<f.size(); i++){
            n.addHijo(f.get(i));
        }
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITIONAL",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONDITIONAL ::= tif CONDITION CONDITIONALS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Condicional");
        Nodo n2 = new Nodo("tif");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.addHijo((Nodo) c);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITIONAL",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONDITIONALS ::= CONDITIONALS telseif CONDITION tthen INSTRUCTIONS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Nodo> e = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Condicionales");
        Nodo n2 = new Nodo("telseif");
        Nodo n3 = new Nodo("tthen");
        n2.setValor(b.toString());
        n2.setIdNodo(parser.cont++);
        n3.setValor(d.toString());
        n3.setIdNodo(parser.cont++);
        n.addHijo((Nodo) a);
        n.addHijo(n2);
        n.addHijo((Nodo) c);
        n.addHijo(n3);
        for (int i=0; i<e.size(); i++){
            n.addHijo(e.get(i));
        }
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITIONALS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CONDITIONALS ::= telse INSTRUCTIONS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Nodo> b = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Condicionales");
        Nodo n2 = new Nodo("telse");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo(n2);
        for (int i=0; i<b.size(); i++){
            n.addHijo(b.get(i));
        }
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITIONALS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CONDITION ::= CONDITION tor CONDITION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Condicion");
        Nodo n2 = new Nodo("tor");
        n2.setValor(b.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo((Nodo) a);
        n.addHijo(n2);
        n.addHijo((Nodo) c);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CONDITION ::= CONDITION tand CONDITION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Condicion");
        Nodo n2 = new Nodo("tand");
        n2.setValor(b.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo((Nodo) a);
        n.addHijo(n2);
        n.addHijo((Nodo) c);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CONDITION ::= tnot CONDITION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Condicion");
        Nodo n2 = new Nodo("tnot");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CONDITION ::= tparA CONDITION tparC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Condicion");
        Nodo n2 = new Nodo("tparA");
        Nodo n3 = new Nodo("tparC");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n2.setValor(c.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.addHijo(n3);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CONDITION ::= REL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // REL ::= EXPRESSION OP_REL EXPRESSION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Rel");
        n.addHijo((Nodo) a);
        n.addHijo((Nodo) c);
        n.addHijo((Nodo) b);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REL",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // REL ::= EXPRESSION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REL",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OP_REL ::= tmayor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo aux = new Nodo("Op Relacional");
        aux.setValor(a.toString());
        aux.setIdNodo(parser.cont++);
        RESULT = aux;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_REL",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OP_REL ::= tmenor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo aux = new Nodo("Op Relacional");
        aux.setValor(a.toString());
        aux.setIdNodo(parser.cont++);
        RESULT = aux;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_REL",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OP_REL ::= tmayor_igual 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo aux = new Nodo("Op Relacional");
        aux.setValor(a.toString());
        aux.setIdNodo(parser.cont++);
        RESULT = aux;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_REL",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OP_REL ::= tmenor_igual 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo aux = new Nodo("Op Relacional");
        aux.setValor(a.toString());
        aux.setIdNodo(parser.cont++);
        RESULT = aux;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_REL",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OP_REL ::= tes_igual 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo aux = new Nodo("Op Relacional");
        aux.setValor(a.toString());
        aux.setIdNodo(parser.cont++);
        RESULT = aux;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_REL",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OP_REL ::= tdifer 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo aux = new Nodo("Op Relacional");
        aux.setValor(a.toString());
        aux.setIdNodo(parser.cont++);
        RESULT = aux;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_REL",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESSION ::= trest EXPRESSION 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Expresion");
        Nodo n2 = new Nodo("Operador");
        n2.setValor(s.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo((Nodo) a);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESSION ::= EXPRESSION tsum EXPRESSION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Expresion");
        Nodo n2 = new Nodo("Operador");
        n2.setValor(s.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo((Nodo) a);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESSION ::= EXPRESSION trest EXPRESSION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Expresion");
        Nodo n2 = new Nodo("Operador");
        n2.setValor(s.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo((Nodo) a);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESSION ::= EXPRESSION tdiv EXPRESSION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Expresion");
        Nodo n2 = new Nodo("Operador");
        n2.setValor(s.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo((Nodo) a);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESSION ::= EXPRESSION tmul EXPRESSION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Expresion");
        Nodo n2 = new Nodo("Operador");
        n2.setValor(s.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo((Nodo) a);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESSION ::= EXPRESSION tpot tcorA EXPRESSION tcorC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Expresion");
        Nodo n2 = new Nodo("tpot");
        Nodo n3 = new Nodo("tcorA");
        Nodo n4 = new Nodo("tcorC");
        n2.setValor(s.toString());
        n2.setIdNodo(parser.cont++);
        n3.setValor(c.toString());
        n3.setIdNodo(parser.cont++);
        n4.setValor(d.toString());
        n4.setIdNodo(parser.cont++);
        n.addHijo((Nodo) a);
        n.addHijo(n2);
        n.addHijo(n3);
        n.addHijo((Nodo) b);
        n.addHijo(n4);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESSION ::= EXPRESSION tmod EXPRESSION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Expresion");
        Nodo n2 = new Nodo("Operador");
        n2.setValor(s.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo((Nodo) a);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESSION ::= tparA EXPRESSION tparC 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Expresion");
        Nodo n2 = new Nodo("Parentesis");
        Nodo n3 = new Nodo("Parentesis");
        n2.setValor(s1.toString());
        n2.setIdNodo(parser.cont++);
        n3.setValor(s2.toString());
        n3.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo((Nodo) a);
        n.addHijo(n3);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESSION ::= tvar_name 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo aux = new Nodo("tvar_name");
        aux.setValor(a.toString());
        aux.setIdNodo(parser.cont++);
        RESULT = aux;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESSION ::= tnum 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo aux = new Nodo("tnum");
        aux.setValor(a.toString());
        aux.setIdNodo(parser.cont++);
        RESULT = aux;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESSION ::= tcadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo aux = new Nodo("tcadena");
        aux.setValor(a.toString().replaceAll("\"", ""));
        aux.setIdNodo(parser.cont++);
        RESULT = aux;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESSION ::= tboolean 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo aux = new Nodo("tboolean");
        aux.setValor(a.toString());
        aux.setIdNodo(parser.cont++);
        RESULT = aux;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESSION ::= tcaracter 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo aux = new Nodo("tcaracter");
        aux.setValor(a.toString());
        aux.setIdNodo(parser.cont++);
        RESULT = aux;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SWITCH ::= tsegun EXPRESSION tdo CASE DEFAULT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Switch");
        Nodo n2 = new Nodo("tsegun");
        Nodo n3 = new Nodo("tdo");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n3.setValor(c.toString());
        n3.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.addHijo(n3);
        n.addHijo((Nodo) d);
        n.addHijo((Nodo) e);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CASE ::= CASE C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Casos");
        n.addHijo((Nodo) a);
        n.addHijo((Nodo) b);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CASE ::= C 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // C ::= tQn_A OPC tQn_C tthen INSTRUCTIONS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Nodo> e = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Caso");
        Nodo n2 = new Nodo("tQn_A");
        Nodo n3 = new Nodo("tQn_C");
        Nodo n4 = new Nodo("tthen");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n3.setValor(c.toString());
        n3.setIdNodo(parser.cont++);
        n4.setValor(d.toString());
        n4.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.addHijo(n3);
        n.addHijo(n4);
        for (int i=0; i<e.size(); i++){
            n.addHijo(e.get(i));
        }
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPC ::= tnum 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("tnum");
        n.setValor(a.toString());
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPC",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPC ::= tcaracter 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("tcaracter");
        n.setValor(a.toString());
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPC",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPC ::= tcadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("tcadena");
        n.setValor(a.toString().replaceAll("\"", ""));
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPC",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DEFAULT ::= telse tthen INSTRUCTIONS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Nodo> c = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Default");
        Nodo n2 = new Nodo("telse");
        Nodo n3 = new Nodo("tthen");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n3.setValor(b.toString());
        n3.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo(n3);
        for (int i=0; i<c.size(); i++){
            n.addHijo(c.get(i));
        }
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DEFAULT ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FOR ::= tfor tvar_name tarrow VALOR thasta VALOR INCREASE tdo INSTRUCTIONS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Nodo> j = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("For");
        Nodo n2 = new Nodo("tfor");
        Nodo n3 = new Nodo("tvar_name");
        Nodo n4 = new Nodo("tarrow");
        Nodo n5 = new Nodo("thasta");
        Nodo n6 = new Nodo("tdo");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n3.setValor(b.toString());
        n3.setIdNodo(parser.cont++);
        n4.setValor(c.toString());
        n4.setIdNodo(parser.cont++);
        n5.setValor(e.toString());
        n5.setIdNodo(parser.cont++);
        n6.setValor(h.toString());
        n6.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo(n3);
        n.addHijo(n4);
        n.addHijo((Nodo) d);
        n.addHijo(n5);
        n.addHijo((Nodo) f);
        n.addHijo((Nodo) g);
        n.addHijo(n6);
        for (int i=0; i<j.size(); i++){
            n.addHijo(j.get(i));
        }
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // INCREASE ::= tincrease EXPRESSION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Incremento");
        Nodo n2 = new Nodo("tincrease");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREASE",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // INCREASE ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREASE",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // INSTRUCCIONES ::= INSTRUCTIONS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Instrucciones");
        for (int i=0; i<a.size(); i++){
            n.addHijo(a.get(i));
        }
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // INSTRUCCIONES ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // WHILE ::= twhile CONDITION tdo INSTRUCCIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("While");
        Nodo n2 = new Nodo("twhile");
        Nodo n3 = new Nodo("tdo");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n3.setValor(c.toString());
        n3.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.addHijo(n3);
        n.addHijo((Nodo) d);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // REPETIR ::= trepeat INSTRUCCIONES tuntil CONDITION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Repetir");
        Nodo n2 = new Nodo("trepeat");
        Nodo n3 = new Nodo("tuntil");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n3.setValor(c.toString());
        n3.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.addHijo(n3);
        n.addHijo((Nodo) d);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REPETIR",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // RETURN ::= treturn CONDITION tpcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Return");
        Nodo n2 = new Nodo("treturn");
        Nodo n3 = new Nodo("tpcoma");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n3.setValor(c.toString());
        n3.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.addHijo(n3);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // METODO ::= tmetodo tvar_name PARAMS INSTRUCTIONS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Nodo> d = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Metodo");
        Nodo n2 = new Nodo("tmetodo");
        Nodo n3 = new Nodo("tvar_name");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n3.setValor(b.toString());
        n3.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo(n3);
        n.addHijo((Nodo) c);
        for (int i=0; i<d.size(); i++){
            n.addHijo(d.get(i));
        }
        n.setIdNodo(parser.cont++);
        RESULT = n;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PARAMS ::= tparams tparA LISTPARAMS tparC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Parametros");
        Nodo n2 = new Nodo("tparams");
        Nodo n3 = new Nodo("tparA");
        Nodo n4 = new Nodo("tparC");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n3.setValor(b.toString());
        n3.setIdNodo(parser.cont++);
        n4.setValor(d.toString());
        n4.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo(n3);
        n.addHijo((Nodo) c);
        n.addHijo(n4);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMS",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PARAMS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMS",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LISTPARAMS ::= LISTPARAMS tcoma LISTPARAMS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("ListaParametros");
        Nodo n2 = new Nodo("tpcoma");
        n2.setValor(b.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo((Nodo) a);
        n.addHijo(n2);
        n.addHijo((Nodo) c);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTPARAMS",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LISTPARAMS ::= tvar_name DATATYPE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        Nodo n = new Nodo("Parametro");
        Nodo n2 = new Nodo("tvar_name");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTPARAMS",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FUNCION ::= tfuncion tvar_name DATATYPE PARAMS INSTRUCTIONS RETURN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Nodo> e = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Funcion");
        Nodo n2 = new Nodo("tfuncion");
        Nodo n3 = new Nodo("tvar_name");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n3.setValor(b.toString());
        n3.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo(n3);
        n.addHijo((Nodo) c);
        n.addHijo((Nodo) d);
        for (int i=0; i<e.size(); i++){
            n.addHijo(e.get(i));
        }
        n.addHijo((Nodo) f);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXEC ::= texec tvar_name tparA PARAMETROS tparC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Exec");
        Nodo n2 = new Nodo("texec");
        Nodo n3 = new Nodo("tvar_name");
        Nodo n4 = new Nodo("tparA");
        Nodo n5 = new Nodo("tparC");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n3.setValor(b.toString());
        n3.setIdNodo(parser.cont++);
        n4.setValor(c.toString());
        n4.setIdNodo(parser.cont++);
        n5.setValor(e.toString());
        n5.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo(n3);
        n.addHijo(n4);
        n.addHijo((Nodo) d);
        n.addHijo(n5);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXEC",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PARAMETROS ::= PARAMETROS tcoma PARAMETROS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("ParamExec");
        Nodo n2 = new Nodo("tpcoma");
        n2.setValor(b.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo((Nodo) a);
        n.addHijo(n2);
        n.addHijo((Nodo) c);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PARAMETROS ::= EXPRESSION 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PARAMETROS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PRINT ::= tprint REL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Print");
        Nodo n2 = new Nodo("tprint");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PRINT ::= tprint EXEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Print");
        Nodo n2 = new Nodo("tprint");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PRINT ::= tprintln REL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Print");
        Nodo n2 = new Nodo("tprintln");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PRINT ::= tprintln EXEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Nodo n = new Nodo("Print");
        Nodo n2 = new Nodo("tprintln");
        n2.setValor(a.toString());
        n2.setIdNodo(parser.cont++);
        n.addHijo(n2);
        n.addHijo((Nodo) b);
        n.setIdNodo(parser.cont++);
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
