Inicia con S

S ::= INSTRUCTIONS EOF
;

INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION
    | INSTRUCTION
;

INSTRUCTION : STATEMENT 'ptcoma'
    | ASSIGNMENT 'ptcoma'
    | INCREDECRE 'ptcoma'
    | VECTOR 'ptcoma'
    | VECTORMOD 'ptcoma'
    | IF
    | SWITCH
    | WHILE
    | FOR
    | DOWHILE 'ptcoma'
    | DOUNTIL 'ptcoma'
    | TRANSFER 'ptcoma'
    | RETURN 'ptcoma'
    | FUNC 'llaveC'
    | METHOD 'llaveC'
    | CALL 'ptcoma'
    | PRINT 'ptcoma'
    | PRINTLN 'ptcoma'
    | PUSH 'ptcoma'
    | POP 'ptcoma'
    | RUN 'ptcoma'
;

//Declaraci√≥n
STATEMENT : TIPO ID
    | TIPO ID 'igual' EXPRESSION
    | TIPO ID 'igual' OPTERNARIO
;
TIPO : 'int'
    | 'double'
    | 'boolean'
    | 'char'
    | 'string'
;

ID : ID 'coma' 'var_name'
    | 'var_name'
;

EXPRESSION : 'menos' EXPRESSION %prec 'umenos'
    | EXPRESSION 'mas' EXPRESSION
    | EXPRESSION 'menos' EXPRESSION
    | EXPRESSION 'multi' EXPRESSION
    | EXPRESSION 'div' EXPRESSION
    | EXPRESSION 'pot' EXPRESSION
    | EXPRESSION 'mod' EXPRESSION
    | EXPRESSION INCDEC
    | GETVALVECTOR
    | parA EXPRESSION parC
    | EXP
    | CASTING
    | INCDEC
    | CALL
    | TOLOWER
    | TOUPPER
    | ROUND
    | LENGTH
    | TOSTRING
    | TOCHARARRAY
    | TYPEOF
;

EXP : 'entero'
    | 'logico'
    | 'caracter'
    | 'cadena'
    | 'var_name'
    | DECIMAL
;

DECIMAL : 'entero' 'punto' 'entero'
;

/* ASIGNACION */
ASSIGNMENT : ID 'igual' EXPRESSION
    | ID 'igual' OPTERNARIO
;

/* CASTEO */
CASTING : 'parA' TIPO 'parC' EXPRESSION
;

/* INCREMENTO Y DECREMENTO */
INCREDECRE : 'var_name' INCDEC
;

INCDEC : 'mas' 'mas'
    | 'menos' 'menos'
;

/* VECTORES */
VECTOR : TIPO 'corA' 'corC' 'var_name' 'igual' 'nuevo' TIPO 'corA' EXPRESSION 'corC'
    | TIPO 'corA' 'corC' 'corA' 'corC' 'var_name' 'igual' 'nuevo' TIPO 'corA' EXPRESSION 'corC' 'corA' EXPRESSION 'corC'
    | TIPO 'corA' 'corC' 'var_name' 'igual' 'llaveA' VECTORVAL 'llaveC'
    | TIPO 'corA' 'corC' 'corA' 'corC' 'var_name' 'igual' 'llaveA' 'llaveA' VECTORVAL 'llaveC' 'coma' 'llaveA' VECTORVAL 'llaveC' 'llaveC'
    | TIPO 'corA' 'corC' 'var_name' 'igual' EXPRESSION
;

VECTORVAL : VECTORVAL 'coma' EXP
    | EXP
;

//Obtener el valor de una pos del vector
GETVALVECTOR : var_name 'corA' EXPRESSION 'corC'
    | var_name 'corA' EXPRESSION 'corC' 'corA' EXPRESSION 'corC'
;

/* MODIFICACION VECTORES */
VECTORMOD : 'var_name' 'corA' EXPRESSION 'corC' 'igual' VALVECTORMOD
    | 'var_name' 'corA' EXPRESSION 'corC' 'corA' EXPRESSION 'corC' 'igual' VALVECTORMOD
;

VALVECTORMOD : EXPRESSION
    | VECTORMOD
;

/* CONDICIONAL */

IF : 'if' 'parA' CONDITION 'parC' 'llaveA' INSTRUCTIONS 'llaveC' ANIDADO ELSE
    | 'if' 'parA' CONDITION 'parC' 'llaveA' INSTRUCTIONS 'llaveC' ELSE
;

ANIDADO : ANIDADO ELIF
    | ELIF
;

ELIF : 'elif' 'parA' CONDITION 'parC' 'llaveA' INSTRUCTIONS 'llaveC'
;

ELSE : 'else' 'llaveA' INSTRUCTIONS 'llaveC'
    | //empty
;

CONDITION : CONDITION 'or' CONDITION
    | CONDITION 'and' CONDITION
    | 'not' CONDITION
    | REL
;

REL : EXPRESSION OP_REL EXPRESSION
    | EXPRESSION
;

OP_REL : 'mayor'
    | 'menor'
    | 'mayor' 'igual'
    | 'menor' 'igual'
    | 'igual_a'
    | 'diferente'
;

/* SWITCH */
SWITCH : 'switch' 'parA' EXPRESSION 'parC' 'llaveA' CASELIST 'llaveC'
    | 'switch' 'parA' EXPRESSION 'parC' 'llaveA' CASELIST DEFAULT 'llaveC'
    | 'switch' 'parA' EXPRESSION 'parC' 'llaveA' DEFAULT 'llaveC'
;

CASELIST : CASELIST CASE
    | CASE
;

CASE : 'case' EXPRESSION 'colon' INSTRUCTIONS
;

DEFAULT : 'default' 'colon' INSTRUCTIONS
;

/* WHILE */
WHILE : 'while' 'parA' CONDITION 'parC' 'llaveA' INSTRUCTIONS 'llaveC'
;

/* FOR */
FOR : 'for' 'parA' STATEMENT 'ptcoma' CONDITION 'ptcoma' ACTUALIZATION 'parC' 'llaveA' INSTRUCTIONS 'llaveC'
    | 'for' 'parA' ASSIGNMENT 'ptcoma' CONDITION 'ptcoma' ACTUALIZATION 'parC' 'llaveA' INSTRUCTIONS 'llaveC'
;

ACTUALIZATION : INCREDECRE
    | ASSIGNMENT
;

/* DO WHILE */
DOWHILE : 'do' 'llaveA' INSTRUCTIONS 'llaveC' 'while' 'parA' CONDITION 'parC'
;

/* DO UNTIL */
DOUNTIL : 'do' 'llaveA' INSTRUCTIONS 'llaveC' 'until' 'parA' CONDITION 'parC'
;

TRANSFER : 'break'
    | 'continue'
;

RETURN : 'retornar' EXPRESSION
    | 'retornar'
;

/* FUNCIONES */
FUNC : 'var_name' 'parA' PARAMS 'parC' 'colon' TIPO 'llaveA' INSTRUCTIONS
    | 'var_name' 'parA' 'parC' 'colon' TIPO 'llaveA' INSTRUCTIONS
;


PARAMETROS : PARAMS
    | //empty
;

PARAMS : PARAMS 'coma' TIPO 'var_name'
    | TIPO 'var_name'
;

/* METODOS */
METHOD : 'var_name' 'parA' PARAMS 'parC' 'colon' 'void' 'llaveA' INSTRUCTIONS
    | 'var_name' 'parA' 'parC' 'colon' 'void' 'llaveA' INSTRUCTIONS
    | 'var_name' 'parA' PARAMS 'parC' 'llaveA' INSTRUCTIONS
    | 'var_name' 'parA' 'parC' 'llaveA' INSTRUCTIONS
;

/* LLAMADA */

CALL : 'var_name' 'parA' PARAMSCALL 'parC'
    | 'var_name' 'parA' 'parC'
;

PARAMSCALL : PARAMSCALL 'coma' EXPRESSION
    | EXPRESSION
;

/* PRINT Y PRINTLN*/
PRINT : 'print' 'parA' EXPRESSION 'parC'
;

PRINTLN : 'println' 'parA' EXPRESSION 'parC'
;

TOLOWER : 'tolower' 'parA' EXPRESSION 'parC'
;

TOUPPER : 'toupper' 'parA' EXPRESSION 'parC'
;

ROUND : 'round' 'parA' 'integer' 'parC'
    | 'round' 'parA' DECIMAL 'parC'
;

LENGTH : 'length' 'parA' EXPRESSION 'parC'
;

TYPEOF : 'typeof' 'parA' EXPRESSION 'parC'
;

TOSTRING : 'tostring' 'parA' EXPRESSION 'parC'
;

TOCHARARRAY : 'tochararray' 'parA' EXPRESSION 'parC'
;

PUSH : 'var_name' 'punto' 'push' 'parA' EXPRESSION 'parC'
;

POP : 'var_name' 'punto' 'pop' 'parA' 'parC'
;

RUN : 'run' CALL
; 

OPTERNARIO : CONDITION 'qn_C' EXPRESSION 'colon' EXPRESSION
;