/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,6],$V2=[1,32],$V3=[1,33],$V4=[1,34],$V5=[1,35],$V6=[1,36],$V7=[1,37],$V8=[1,38],$V9=[1,39],$Va=[1,40],$Vb=[1,41],$Vc=[1,42],$Vd=[1,43],$Ve=[1,44],$Vf=[1,29],$Vg=[1,30],$Vh=[1,31],$Vi=[2,5,10,16,37,38,39,40,41,73,89,93,95,96,97,99,101,102,103,108,109,120],$Vj=[34,42],$Vk=[2,36],$Vl=[1,54],$Vm=[1,53],$Vn=[1,67],$Vo=[1,69],$Vp=[10,51,67,70],$Vq=[1,98],$Vr=[1,84],$Vs=[1,86],$Vt=[1,99],$Vu=[1,100],$Vv=[1,101],$Vw=[1,102],$Vx=[1,104],$Vy=[1,105],$Vz=[1,106],$VA=[1,107],$VB=[1,110],$VC=[1,108],$VD=[1,109],$VE=[8,34,42],$VF=[1,127],$VG=[1,132],$VH=[1,142],$VI=[1,141],$VJ=[1,143],$VK=[1,144],$VL=[1,145],$VM=[1,146],$VN=[1,149],$VO=[8,42,43,44,45,46,47,48,51,68,80,81,85,86,87,88,94,121],$VP=[2,62],$VQ=[8,16,42,43,44,45,46,47,48,51,68,80,81,85,86,87,88,94,121],$VR=[1,153],$VS=[2,130],$VT=[42,51],$VU=[2,68],$VV=[8,51],$VW=[2,69],$VX=[80,81,121],$VY=[2,94],$VZ=[2,65],$V_=[1,176],$V$=[1,177],$V01=[1,178],$V11=[1,179],$V21=[1,181],$V31=[1,182],$V41=[8,51,80,81,121],$V51=[1,213],$V61=[10,43,44,50,61,62,63,64,110,111,112,114,115,116,117],$V71=[8,42,43,44,51,68,80,81,85,86,87,88,94,121],$V81=[8,42,43,44,45,46,51,68,80,81,85,86,87,88,94,121],$V91=[1,252],$Va1=[1,271],$Vb1=[1,270],$Vc1=[2,77],$Vd1=[8,43,44,45,46,47,48],$Ve1=[1,287],$Vf1=[16,93,95],$Vg1=[1,299],$Vh1=[1,306],$Vi1=[1,311],$Vj1=[16,42],$Vk1=[2,5,10,16,37,38,39,40,41,73,78,79,89,93,95,96,97,99,101,102,103,108,109,120],$Vl1=[2,78];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"INSTRUCTIONS":4,"EOF":5,"INSTRUCTION":6,"STATEMENT":7,"ptcoma":8,"ASSIGNMENT":9,"var_name":10,"INCDEC":11,"VECTOR":12,"VECTORMOD":13,"CONTROL":14,"FUNC":15,"llaveC":16,"METHOD":17,"CALL":18,"PRINT":19,"PRINTLN":20,"PUSH":21,"POP":22,"RUN":23,"IF":24,"SWITCH":25,"WHILE":26,"FOR":27,"DOWHILE":28,"DOUNTIL":29,"TRANSFER":30,"RETURN":31,"TIPO":32,"ID":33,"igual":34,"EXPRESSION":35,"OPTERNARIO":36,"int":37,"double":38,"boolean":39,"char":40,"string":41,"coma":42,"menos":43,"mas":44,"multi":45,"div":46,"pot":47,"mod":48,"GETVALVECTOR":49,"parA":50,"parC":51,"EXP":52,"CASTING":53,"TOLOWER":54,"TOUPPER":55,"ROUND":56,"LENGTH":57,"TOSTRING":58,"TOCHARARRAY":59,"TYPEOF":60,"entero":61,"logico":62,"caracter":63,"cadena":64,"DECIMAL":65,"punto":66,"corA":67,"corC":68,"nuevo":69,"llaveA":70,"VECTORVAL":71,"VALVECTORMOD":72,"if":73,"CONDITION":74,"ANIDADO":75,"ELSE":76,"ELIF":77,"elif":78,"else":79,"or":80,"and":81,"not":82,"REL":83,"OP_REL":84,"mayor":85,"menor":86,"igual_a":87,"diferente":88,"switch":89,"CASELIST":90,"DEFAULT":91,"CASE":92,"case":93,"colon":94,"default":95,"while":96,"for":97,"ACTUALIZATION":98,"do":99,"until":100,"break":101,"continue":102,"retornar":103,"PARAMS":104,"PARAMETROS":105,"void":106,"PARAMSCALL":107,"print":108,"println":109,"tolower":110,"toupper":111,"round":112,"integer":113,"length":114,"typeof":115,"tostring":116,"tochararray":117,"push":118,"pop":119,"run":120,"qn_C":121,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"ptcoma",10:"var_name",16:"llaveC",34:"igual",37:"int",38:"double",39:"boolean",40:"char",41:"string",42:"coma",43:"menos",44:"mas",45:"multi",46:"div",47:"pot",48:"mod",50:"parA",51:"parC",61:"entero",62:"logico",63:"caracter",64:"cadena",66:"punto",67:"corA",68:"corC",69:"nuevo",70:"llaveA",73:"if",78:"elif",79:"else",80:"or",81:"and",82:"not",85:"mayor",86:"menor",87:"igual_a",88:"diferente",89:"switch",93:"case",94:"colon",95:"default",96:"while",97:"for",99:"do",100:"until",101:"break",102:"continue",103:"retornar",106:"void",108:"print",109:"println",110:"tolower",111:"toupper",112:"round",113:"integer",114:"length",115:"typeof",116:"tostring",117:"tochararray",118:"push",119:"pop",120:"run",121:"qn_C"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,3],[6,2],[6,2],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[14,1],[14,1],[14,1],[14,1],[14,2],[14,2],[14,2],[14,2],[7,2],[7,4],[7,4],[32,1],[32,1],[32,1],[32,1],[32,1],[33,3],[33,1],[35,2],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,2],[35,1],[35,3],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[65,3],[9,3],[9,3],[53,4],[11,2],[11,2],[12,10],[12,15],[12,8],[12,16],[12,6],[71,3],[71,1],[49,4],[49,7],[13,6],[13,9],[72,1],[72,1],[24,9],[75,2],[75,0],[77,7],[76,4],[76,0],[74,3],[74,3],[74,2],[74,1],[83,3],[83,1],[84,1],[84,1],[84,2],[84,2],[84,1],[84,1],[25,7],[25,8],[25,7],[90,2],[90,1],[92,4],[91,3],[26,7],[27,11],[27,11],[98,2],[98,1],[28,8],[29,8],[30,1],[30,1],[31,2],[31,1],[15,8],[15,7],[105,1],[105,0],[104,4],[104,2],[17,8],[17,7],[17,6],[17,5],[18,4],[18,3],[107,3],[107,1],[19,4],[20,4],[54,4],[55,4],[56,4],[56,4],[57,4],[60,4],[58,4],[59,4],[21,6],[22,5],[23,2],[36,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log("Analisis terminado"); return $$[$0-1]; 
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = [$$[$0]]; 
break;
case 4:
 this.$ = $$[$0-1]; 
break;
case 18:
 console.error('Error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ' columna: ' + this._$.first_column);
break;
case 27:
 this.$ = new Statement(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 28: case 29:
 this.$ = new Statement(_$[$0-3].first_line, _$[$0-3].first_column); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:19,33:20,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{1:[3]},{2:$V0,5:[1,45],6:46,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:19,33:20,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},o($Vi,[2,3]),{8:[1,47]},{8:[1,48]},o($Vj,$Vk,{11:49,43:$Vl,44:$Vm,50:[1,51],66:[1,52],67:[1,50]}),{8:[1,55]},{8:[1,56]},o($Vi,[2,9]),{16:[1,57]},{16:[1,58]},{8:[1,59]},{8:[1,60]},{8:[1,61]},{8:[1,62]},{8:[1,63]},{8:[1,64]},o($Vi,[2,18]),{10:$Vn,33:65,67:[1,66]},{34:[1,68],42:$Vo},o($Vi,[2,19]),o($Vi,[2,20]),o($Vi,[2,21]),o($Vi,[2,22]),{8:[1,70]},{8:[1,71]},{8:[1,72]},{8:[1,73]},{50:[1,74]},{50:[1,75]},{10:[1,77],18:76},o($Vp,[2,30]),o($Vp,[2,31]),o($Vp,[2,32]),o($Vp,[2,33]),o($Vp,[2,34]),{50:[1,78]},{50:[1,79]},{50:[1,80]},{50:[1,81]},{70:[1,82]},{8:[2,115]},{8:[2,116]},{8:[2,118],10:$Vq,11:89,18:90,35:83,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{1:[2,1]},o($Vi,[2,2]),o($Vi,[2,4]),o($Vi,[2,5]),{8:[1,111]},{10:$Vq,11:89,18:90,35:112,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{10:$Vq,11:89,18:90,32:116,35:117,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6,43:$Vr,44:$Vm,49:85,50:$Vs,51:[1,114],52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,104:113,107:115,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{118:[1,118],119:[1,119]},{44:[1,120]},{43:[1,121]},o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,10]),o($Vi,[2,11]),o($Vi,[2,12]),o($Vi,[2,13]),o($Vi,[2,14]),o($Vi,[2,15]),o($Vi,[2,16]),o($Vi,[2,17]),{8:[2,27],34:[1,122],42:$Vo},{68:[1,123]},o($VE,$Vk),{10:$Vq,11:89,18:90,35:124,36:125,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,74:126,82:$VF,83:128,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{10:[1,129]},o($Vi,[2,23]),o($Vi,[2,24]),o($Vi,[2,25]),o($Vi,[2,26]),{10:$Vq,11:89,18:90,35:130,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{10:$Vq,11:89,18:90,35:131,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{8:[2,145]},{50:$VG},{10:$Vq,11:89,18:90,35:134,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,74:133,82:$VF,83:128,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{10:$Vq,11:89,18:90,35:135,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{10:$Vq,11:89,18:90,35:134,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,74:136,82:$VF,83:128,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{7:137,9:138,10:$Vn,32:139,33:20,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6},{2:$V0,4:140,6:3,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:19,33:20,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{8:[2,117],11:147,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM},{10:$Vq,11:89,18:90,35:148,43:$VN,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},o($VO,[2,45]),{10:$Vq,11:89,18:90,32:151,35:150,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},o($VO,[2,47]),o($VO,[2,48]),o($VO,[2,49]),o($VO,[2,50]),o($VO,[2,51]),o($VO,[2,52]),o($VO,[2,53]),o($VO,[2,54]),o($VO,[2,55]),o($VO,[2,56]),o($VO,[2,57]),o($VO,$VP,{50:$VG,67:[1,152]}),o($VQ,[2,58],{66:$VR}),o($VQ,[2,59]),o($VQ,[2,60]),o($VQ,[2,61]),o($VQ,[2,63]),{50:[1,154]},{50:[1,155]},{50:[1,156]},{50:[1,157]},{50:[1,158]},{50:[1,159]},{50:[1,160]},o($Vi,[2,6]),{11:147,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM,68:[1,161]},{42:[1,163],51:[1,162]},{8:$VS,70:[1,165],94:[1,164]},{42:[1,167],51:[1,166]},{10:[1,168]},o($VT,[2,132],{11:147,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM}),{50:[1,169]},{50:[1,170]},o($VO,$VU),o($VV,$VW),{10:$Vq,11:89,18:90,35:171,36:172,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,74:126,82:$VF,83:128,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{10:[1,173],67:[1,174]},o($VX,$VY,{11:147,84:175,8:$VZ,51:$VZ,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM,85:$V_,86:$V$,87:$V01,88:$V11}),o($VV,[2,66]),{80:$V21,81:$V31,121:[1,180]},{10:$Vq,11:89,18:90,35:134,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,74:183,82:$VF,83:128,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},o($V41,[2,92]),o($VE,[2,35]),{11:147,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM,51:[1,184]},{11:147,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM,51:[1,185]},{10:$Vq,11:89,18:90,35:117,43:$Vr,44:$Vm,49:85,50:$Vs,51:[1,186],52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,107:115,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{51:[1,187],80:$V21,81:$V31},o($V41,$VY,{11:147,84:175,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM,85:$V_,86:$V$,87:$V01,88:$V11}),{11:147,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM,51:[1,188]},{51:[1,189],80:$V21,81:$V31},{8:[1,190]},{8:[1,191]},{10:$Vn,33:65},{2:$V0,6:46,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:[1,192],17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:19,33:20,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{10:$Vq,11:89,18:90,35:193,43:$Vr,44:[1,194],49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{10:$Vq,11:89,18:90,35:195,43:$VN,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{10:$Vq,11:89,18:90,35:196,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{10:$Vq,11:89,18:90,35:197,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{10:$Vq,11:89,18:90,35:198,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{10:$Vq,11:89,18:90,35:199,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},o($VO,[2,44]),o($VO,[2,37],{11:147}),o($VO,$VW,{49:85,52:87,53:88,11:89,18:90,54:91,55:92,56:93,57:94,58:95,59:96,60:97,65:103,35:148,10:$Vq,50:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD}),{11:147,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM,51:[1,200]},{51:[1,201]},{10:$Vq,11:89,18:90,35:202,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{61:[1,203]},{10:$Vq,11:89,18:90,35:204,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{10:$Vq,11:89,18:90,35:205,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{61:[1,208],65:207,113:[1,206]},{10:$Vq,11:89,18:90,35:209,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{10:$Vq,11:89,18:90,35:210,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{10:$Vq,11:89,18:90,35:211,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{10:$Vq,11:89,18:90,35:212,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{34:$V51,67:[1,214]},{70:[1,216],94:[1,215]},{32:217,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6},{32:218,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6,106:[1,219]},{2:$V0,4:220,6:3,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:19,33:20,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},o($VO,[2,129]),{10:$Vq,11:89,18:90,35:221,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},o($VT,[2,124]),{10:$Vq,11:89,18:90,35:222,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{51:[1,223]},o($VX,$VY,{11:147,84:175,8:[2,28],43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM,85:$V_,86:$V$,87:$V01,88:$V11}),{8:[2,29]},{34:[1,224]},{68:[1,225]},{10:$Vq,11:89,18:90,35:226,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},o($V61,[2,95],{34:[1,227]}),o($V61,[2,96],{34:[1,228]}),o($V61,[2,99]),o($V61,[2,100]),{10:$Vq,11:89,18:90,35:229,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{10:$Vq,11:89,18:90,35:134,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,74:230,82:$VF,83:128,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{10:$Vq,11:89,18:90,35:134,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,74:231,82:$VF,83:128,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},o($V41,[2,91]),{8:[2,133]},{8:[2,134]},o($VO,$VS),{70:[1,232]},{70:[1,233]},{70:[1,234]},{10:$Vq,11:89,18:90,35:134,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,74:235,82:$VF,83:128,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{10:$Vq,11:89,18:90,35:134,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,74:236,82:$VF,83:128,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{96:[1,237],100:[1,238]},o($V71,[2,38],{11:147,45:$VJ,46:$VK,47:$VL,48:$VM}),o($VO,$VU),o($V71,[2,39],{11:147,45:$VJ,46:$VK,47:$VL,48:$VM}),o($V81,[2,40],{11:147,47:$VL,48:$VM}),o($V81,[2,41],{11:147,47:$VL,48:$VM}),o($VO,[2,42],{11:147}),o($VO,[2,43],{11:147}),o($VO,[2,46]),{10:$Vq,11:89,18:90,35:239,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{11:147,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM,68:[1,240]},o($VQ,[2,64]),{11:147,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM,51:[1,241]},{11:147,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM,51:[1,242]},{51:[1,243]},{51:[1,244]},{66:$VR},{11:147,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM,51:[1,245]},{11:147,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM,51:[1,246]},{11:147,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM,51:[1,247]},{11:147,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM,51:[1,248]},{10:$V91,11:89,13:251,18:90,35:250,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,72:249,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{10:$Vq,11:89,18:90,35:253,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{32:254,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6,106:[1,255]},{2:$V0,4:256,6:3,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:19,33:20,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{10:[1,257]},{70:[1,258]},{70:[1,259]},{2:$V0,6:46,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:[2,128],17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:19,33:20,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},o($VT,[2,131],{11:147,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM}),{11:147,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM,51:[1,260]},{8:[2,144]},{10:$Vq,11:89,18:90,35:263,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,69:[1,261],70:[1,262],110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{10:[1,264]},o($V41,[2,93],{11:147,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM}),o($V61,[2,97]),o($V61,[2,98]),{11:147,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM,94:[1,265]},o([8,51,80,121],[2,89],{81:$V31}),o($V41,[2,90]),{2:$V0,4:266,6:3,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:19,33:20,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{90:267,91:268,92:269,93:$Va1,95:$Vb1},{2:$V0,4:272,6:3,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:19,33:20,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{8:[1,273],80:$V21,81:$V31},{8:[1,274],80:$V21,81:$V31},{50:[1,275]},{50:[1,276]},o($VO,[2,67],{11:147}),o($VO,$Vc1,{67:[1,277]}),o($VO,[2,135]),o($VO,[2,136]),o($VO,[2,137]),o($VO,[2,138]),o($VO,[2,139]),o($VO,[2,141]),o($VO,[2,142]),o($VO,[2,140]),{8:[2,79]},{8:[2,81],11:147,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM},{8:[2,82]},o($Vd1,$VP,{50:$VG,67:[1,278]}),{11:147,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM,68:[1,279]},{70:[1,280]},{70:[1,281]},{2:$V0,6:46,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:[2,127],17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:19,33:20,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},o($VT,[2,123]),{2:$V0,4:282,6:3,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:19,33:20,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{2:$V0,4:283,6:3,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:19,33:20,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{8:[2,143]},{32:284,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6},{10:$Ve1,52:286,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,71:285},{8:[2,74],11:147,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM},{34:[1,288]},{10:$Vq,11:89,18:90,35:289,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{2:$V0,6:46,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:[1,290],17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:19,33:20,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{16:[1,291],91:292,92:293,93:$Va1,95:$Vb1},{16:[1,294]},o($Vf1,[2,105]),{94:[1,295]},{10:$Vq,11:89,18:90,35:296,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{2:$V0,6:46,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:[1,297],17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:19,33:20,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{9:300,10:$Vg1,33:20,98:298},{9:300,10:$Vg1,33:20,98:301},{10:$Vq,11:89,18:90,35:134,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,74:302,82:$VF,83:128,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{10:$Vq,11:89,18:90,35:134,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,74:303,82:$VF,83:128,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{10:$Vq,11:89,18:90,35:304,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{10:$Vq,11:89,18:90,35:305,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{34:$Vh1},{2:$V0,4:307,6:3,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:19,33:20,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{2:$V0,4:308,6:3,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:19,33:20,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{2:$V0,6:46,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:[2,120],17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:19,33:20,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{2:$V0,6:46,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:[2,126],17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:19,33:20,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{67:[1,309]},{16:[1,310],42:$Vi1},o($Vj1,[2,76]),o($Vj1,$VP),{69:[1,312],70:[1,313]},o($VV,[2,146],{11:147,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM}),o($Vk1,[2,85],{75:314}),o($Vi,[2,101]),{16:[1,315]},o($Vf1,[2,104]),o($Vi,[2,103]),{2:$V0,4:316,6:3,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:19,33:20,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{11:147,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM,94:[1,317]},o($Vi,[2,108]),{51:[1,318]},o($Vj,$Vk,{11:319,43:$Vl,44:$Vm}),{51:[2,112]},{51:[1,320]},{51:[1,321],80:$V21,81:$V31},{51:[1,322],80:$V21,81:$V31},{11:147,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM,68:[1,323]},{11:147,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM,68:[1,324]},{10:$V91,11:89,13:251,18:90,35:250,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,72:325,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{2:$V0,6:46,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:[2,119],17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:19,33:20,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{2:$V0,6:46,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:[2,125],17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:19,33:20,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{10:$Vq,11:89,18:90,35:326,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{8:[2,72]},{10:$Ve1,52:327,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103},{32:328,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6},{70:[1,329]},o($Vi,[2,88],{76:330,77:331,78:[1,333],79:[1,332]}),o($Vi,[2,102]),{2:$V0,6:46,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:[2,107],17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:19,33:20,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{2:$V0,4:334,6:3,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:19,33:20,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{70:[1,335]},{51:[2,111]},{70:[1,336]},{8:[2,113]},{8:[2,114]},o($VO,$Vl1),o($Vd1,$Vc1,{34:$V51,67:[1,337]}),{8:[2,80]},{11:147,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM,68:[1,338]},o($Vj1,[2,75]),{67:[1,339]},{10:$Ve1,52:286,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,71:340},o($Vi,[2,83]),o($Vk1,[2,84]),{70:[1,341]},{50:[1,342]},o($Vf1,[2,106],{7:4,9:5,12:7,13:8,14:9,15:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,32:19,33:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,6:46,2:$V0,10:$V1,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh}),{2:$V0,4:343,6:3,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:19,33:20,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{2:$V0,4:344,6:3,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:19,33:20,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{10:$Vq,11:89,18:90,35:345,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{8:[2,70]},{10:$Vq,11:89,18:90,35:346,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{16:[1,347],42:$Vi1},{2:$V0,4:348,6:3,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:19,33:20,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{10:$Vq,11:89,18:90,35:134,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,74:349,82:$VF,83:128,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{2:$V0,6:46,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:[1,350],17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:19,33:20,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{2:$V0,6:46,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:[1,351],17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:19,33:20,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{11:147,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM,68:[1,352]},{11:147,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM,68:[1,353]},{42:[1,354]},{2:$V0,6:46,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:[1,355],17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:19,33:20,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{51:[1,356],80:$V21,81:$V31},o($Vi,[2,109]),o($Vi,[2,110]),o($Vd1,$Vl1,{34:$Vh1}),{67:[1,357]},{70:[1,358]},o($Vi,[2,87]),{70:[1,359]},{10:$Vq,11:89,18:90,35:360,43:$Vr,44:$Vm,49:85,50:$Vs,52:87,53:88,54:91,55:92,56:93,57:94,58:95,59:96,60:97,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,110:$Vx,111:$Vy,112:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{10:$Ve1,52:286,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:103,71:361},{2:$V0,4:362,6:3,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:19,33:20,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{11:147,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM,68:[1,363]},{16:[1,364],42:$Vi1},{2:$V0,6:46,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:[1,365],17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:19,33:20,37:$V2,38:$V3,39:$V4,40:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{8:[2,71]},{16:[1,366]},o($Vk1,[2,86]),{8:[2,73]}],
defaultActions: {42:[2,115],43:[2,116],45:[2,1],76:[2,145],172:[2,29],184:[2,133],185:[2,134],223:[2,144],249:[2,79],251:[2,82],260:[2,143],300:[2,112],310:[2,72],319:[2,111],321:[2,113],322:[2,114],325:[2,80],338:[2,70],363:[2,71],366:[2,73]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  const {Statement} = require('../instrucciones/Statement.ts');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip whitespace */
break;
case 2:/* skip whitespace */
break;
case 3:// comentario simple l√≠nea
break;
case 4:// comentario multiple l√≠neas
break;
case 5:return 61 
break;
case 6:return 62
break;
case 7:return 63
break;
case 8:return 64 
break;
case 9:return 66
break;
case 10:return 37
break;
case 11:return 38
break;
case 12:return 39
break;
case 13:return 40
break;
case 14:return 41
break;
case 15:return 44
break;
case 16:return 43
break;
case 17:return 45
break;
case 18:return 46
break;
case 19:return 47
break;
case 20:return 48
break;
case 21:return 85
break;
case 22:return 86
break;
case 23:return 'mayor_igual'
break;
case 24:return 'menor_igual'
break;
case 25:return 87
break;
case 26:return 88
break;
case 27:return 121
break;
case 28:return 94
break;
case 29:return 80
break;
case 30:return 81
break;
case 31:return 82
break;
case 32:return 50
break;
case 33:return 51
break;
case 34:return 8
break;
case 35:return 70
break;
case 36:return 16
break;
case 37:return 67
break;
case 38:return 68
break;
case 39:return 69
break;
case 40:return 73
break;
case 41:return 79
break;
case 42:return 78
break;
case 43:return 89
break;
case 44:return 93
break;
case 45:return 95
break;
case 46:return 96
break;
case 47:return 99
break;
case 48:return 100
break;
case 49:return 97
break;
case 50:return 101
break;
case 51:return 102
break;
case 52:return 103
break;
case 53:return 106
break;
case 54:return 108
break;
case 55:return 109
break;
case 56:return 110
break;
case 57:return 111
break;
case 58:return 112
break;
case 59:return 114
break;
case 60:return 115
break;
case 61:return 116
break;
case 62:return 117
break;
case 63:return 118
break;
case 64:return 119
break;
case 65:return 120
break;
case 66:return 34
break;
case 67:return 10
break;
case 68:return 42
break;
case 69:return 5
break;
case 70: 
        console.error("Error lexico: " + yy_.yytext + " en la linea: " + yy_.yylloc.first_line + " columna: " + yy_.yylloc.first_column)
    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:(\/\/.+))/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:([0-9]+))/i,/^(?:(true|false\b))/i,/^(?:(('([a-zA-Z]|[!-[]|[\]-¬ø]|\\('|[n]|[t]|[r]|\\)|[ ])')))/i,/^(?:("[^\"]*"))/i,/^(?:\.)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:>)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:\{menor\})/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elif\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:until\b)/i,/^(?:for\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:run\b)/i,/^(?:=)/i,/^(?:(([a-zA-Z])([a-zA-Z]|[0-9]|_)*))/i,/^(?:,)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}