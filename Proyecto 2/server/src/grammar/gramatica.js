/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,25],$V1=[1,40],$V2=[1,41],$V3=[1,42],$V4=[1,43],$V5=[1,44],$V6=[1,28],$V7=[1,29],$V8=[1,30],$V9=[1,31],$Va=[1,32],$Vb=[1,33],$Vc=[1,34],$Vd=[1,35],$Ve=[1,36],$Vf=[1,37],$Vg=[1,38],$Vh=[1,39],$Vi=[2,5,22,35,36,37,38,39,41,73,89,93,95,96,97,99,101,102,103,108,109,120],$Vj=[1,66],$Vk=[1,68],$Vl=[32,40],$Vm=[2,35],$Vn=[1,74],$Vo=[1,73],$Vp=[1,95],$Vq=[1,81],$Vr=[1,83],$Vs=[1,96],$Vt=[1,97],$Vu=[1,98],$Vv=[1,99],$Vw=[1,101],$Vx=[1,102],$Vy=[1,103],$Vz=[1,104],$VA=[1,107],$VB=[1,105],$VC=[1,106],$VD=[41,51,67,70],$VE=[8,32,40],$VF=[1,117],$VG=[1,139],$VH=[1,138],$VI=[1,140],$VJ=[1,141],$VK=[1,142],$VL=[1,143],$VM=[1,146],$VN=[8,40,42,43,44,45,46,47,51,68,80,81,85,86,87,88,94,121],$VO=[2,61],$VP=[1,150],$VQ=[8,22,40,42,43,44,45,46,47,51,68,80,81,85,86,87,88,94,121],$VR=[1,151],$VS=[80,81,121],$VT=[2,94],$VU=[2,64],$VV=[1,166],$VW=[1,167],$VX=[1,168],$VY=[1,169],$VZ=[8,51],$V_=[1,171],$V$=[1,172],$V01=[8,51,80,81,121],$V11=[2,130],$V21=[40,51],$V31=[2,68],$V41=[2,69],$V51=[41,42,43,50,61,62,63,64,110,111,112,114,115,116,117],$V61=[1,221],$V71=[8,40,42,43,51,68,80,81,85,86,87,88,94,121],$V81=[8,40,42,43,44,45,51,68,80,81,85,86,87,88,94,121],$V91=[1,257],$Va1=[1,271],$Vb1=[1,270],$Vc1=[2,77],$Vd1=[1,281],$Ve1=[8,42,43,44,45,46,47],$Vf1=[22,93,95],$Vg1=[1,299],$Vh1=[1,307],$Vi1=[22,40],$Vj1=[1,311],$Vk1=[2,5,22,35,36,37,38,39,41,73,78,79,89,93,95,96,97,99,101,102,103,108,109,120],$Vl1=[2,78];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"INSTRUCTIONS":4,"EOF":5,"INSTRUCTION":6,"STATEMENT":7,"ptcoma":8,"ASSIGNMENT":9,"INCREDECRE":10,"VECTOR":11,"VECTORMOD":12,"IF":13,"SWITCH":14,"WHILE":15,"FOR":16,"DOWHILE":17,"DOUNTIL":18,"TRANSFER":19,"RETURN":20,"FUNC":21,"llaveC":22,"METHOD":23,"CALL":24,"PRINT":25,"PRINTLN":26,"PUSH":27,"POP":28,"RUN":29,"TIPO":30,"ID":31,"igual":32,"EXPRESSION":33,"OPTERNARIO":34,"int":35,"double":36,"boolean":37,"char":38,"string":39,"coma":40,"var_name":41,"menos":42,"mas":43,"multi":44,"div":45,"pot":46,"mod":47,"INCDEC":48,"GETVALVECTOR":49,"parA":50,"parC":51,"EXP":52,"CASTING":53,"TOLOWER":54,"TOUPPER":55,"ROUND":56,"LENGTH":57,"TOSTRING":58,"TOCHARARRAY":59,"TYPEOF":60,"entero":61,"logico":62,"caracter":63,"cadena":64,"DECIMAL":65,"punto":66,"corA":67,"corC":68,"nuevo":69,"llaveA":70,"VECTORVAL":71,"VALVECTORMOD":72,"if":73,"CONDITION":74,"ANIDADO":75,"ELSE":76,"ELIF":77,"elif":78,"else":79,"or":80,"and":81,"not":82,"REL":83,"OP_REL":84,"mayor":85,"menor":86,"igual_a":87,"diferente":88,"switch":89,"CASELIST":90,"DEFAULT":91,"CASE":92,"case":93,"colon":94,"default":95,"while":96,"for":97,"ACTUALIZATION":98,"do":99,"until":100,"break":101,"continue":102,"retornar":103,"PARAMS":104,"PARAMETROS":105,"void":106,"PARAMSCALL":107,"print":108,"println":109,"tolower":110,"toupper":111,"round":112,"integer":113,"length":114,"typeof":115,"tostring":116,"tochararray":117,"push":118,"pop":119,"run":120,"qn_C":121,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"ptcoma",22:"llaveC",32:"igual",35:"int",36:"double",37:"boolean",38:"char",39:"string",40:"coma",41:"var_name",42:"menos",43:"mas",44:"multi",45:"div",46:"pot",47:"mod",50:"parA",51:"parC",61:"entero",62:"logico",63:"caracter",64:"cadena",66:"punto",67:"corA",68:"corC",69:"nuevo",70:"llaveA",73:"if",78:"elif",79:"else",80:"or",81:"and",82:"not",85:"mayor",86:"menor",87:"igual_a",88:"diferente",89:"switch",93:"case",94:"colon",95:"default",96:"while",97:"for",99:"do",100:"until",101:"break",102:"continue",103:"retornar",106:"void",108:"print",109:"println",110:"tolower",111:"toupper",112:"round",113:"integer",114:"length",115:"typeof",116:"tostring",117:"tochararray",118:"push",119:"pop",120:"run",121:"qn_C"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[7,2],[7,4],[7,4],[30,1],[30,1],[30,1],[30,1],[30,1],[31,3],[31,1],[33,2],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,2],[33,1],[33,3],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[65,3],[9,3],[9,3],[53,4],[10,2],[48,2],[48,2],[11,10],[11,15],[11,8],[11,16],[11,6],[71,3],[71,1],[49,4],[49,7],[12,6],[12,9],[72,1],[72,1],[13,9],[75,2],[75,0],[77,7],[76,4],[76,0],[74,3],[74,3],[74,2],[74,1],[83,3],[83,1],[84,1],[84,1],[84,2],[84,2],[84,1],[84,1],[14,7],[14,8],[14,7],[90,2],[90,1],[92,4],[91,3],[15,7],[16,11],[16,11],[98,2],[98,1],[17,8],[18,8],[19,1],[19,1],[20,2],[20,1],[21,8],[21,7],[105,1],[105,0],[104,4],[104,2],[23,8],[23,7],[23,6],[23,5],[24,4],[24,3],[107,3],[107,1],[25,4],[26,4],[54,4],[55,4],[56,4],[56,4],[57,4],[60,4],[58,4],[59,4],[27,6],[28,5],[29,2],[34,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log("Analisis terminado"); return $$[$0-1]; 
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 35:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 7: case 8: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 43: case 45:
 this.$ = $$[$0-1]; 
break;
case 9: case 10: case 11: case 12: case 29: case 30: case 31: case 32: case 33: case 44: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62:
 this.$ = $$[$0]; 
break;
case 25:
 console.error('Error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ' columna: ' + this._$.first_column);
break;
case 26:
 this.$ = new Statement($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 27: case 28:
 this.$ = new Statement($$[$0-3], $$[$0-2], _$[$0-3].first_line, _$[$0-3].first_column, $$[$0]); 
break;
case 34:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 37:
 this.$ = new Aritmetica($$[$0-2], $$[$0], "suma", _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 38:
 this.$ = new Aritmetica($$[$0-2], $$[$0], "resta", _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 39:
 this.$ = new Aritmetica($$[$0-2], $$[$0], "multiplicacion", _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 40:
 this.$ = new Aritmetica($$[$0-2], $$[$0], "division", _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 41:
 this.$ = new Aritmetica($$[$0-2], $$[$0], "potencia", _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 42:
 this.$ = new Aritmetica($$[$0-2], $$[$0], "modulo", _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 63:
 this.$ = $$[$0-2]+$$[$0-1]+$$[$0]; 
break;
case 64: case 65:
 this.$ = new Assigment($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 66:
 this.$ = new Casteo($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 67:
 this.$ = new IncDec($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 68:
 this.$ = '++'; 
break;
case 69:
 this.$ = '--'; 
break;
case 119:
 this.$ = new Funcion($$[$0-2], $$[$0-7], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 120:
 this.$ = new Funcion($$[$0-2], $$[$0-6], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 125:
 this.$ = new Metodo($$[$0-2], $$[$0-7], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 126:
 this.$ = new Metodo($$[$0-2], $$[$0-6], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 127:
 this.$ = new Metodo("none", $$[$0-5], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 128:
 this.$ = new Metodo("none", $$[$0-4], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:26,31:27,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{1:[3]},{2:$V0,5:[1,45],6:46,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:26,31:27,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},o($Vi,[2,3]),{8:[1,47]},{8:[1,48]},{8:[1,49]},{8:[1,50]},{8:[1,51]},o($Vi,[2,9]),o($Vi,[2,10]),o($Vi,[2,11]),o($Vi,[2,12]),{8:[1,52]},{8:[1,53]},{8:[1,54]},{8:[1,55]},{22:[1,56]},{22:[1,57]},{8:[1,58]},{8:[1,59]},{8:[1,60]},{8:[1,61]},{8:[1,62]},{8:[1,63]},o($Vi,[2,25]),{31:64,41:$Vj,67:[1,65]},{32:[1,67],40:$Vk},o($Vl,$Vm,{48:69,42:$Vn,43:$Vo,50:[1,71],66:[1,72],67:[1,70]}),{50:[1,75]},{50:[1,76]},{50:[1,77]},{50:[1,78]},{70:[1,79]},{8:[2,115]},{8:[2,116]},{8:[2,118],24:87,33:80,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{50:[1,108]},{50:[1,109]},{24:110,41:[1,111]},o($VD,[2,29]),o($VD,[2,30]),o($VD,[2,31]),o($VD,[2,32]),o($VD,[2,33]),{1:[2,1]},o($Vi,[2,2]),o($Vi,[2,4]),o($Vi,[2,5]),o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,13]),o($Vi,[2,14]),o($Vi,[2,15]),o($Vi,[2,16]),o($Vi,[2,17]),o($Vi,[2,18]),o($Vi,[2,19]),o($Vi,[2,20]),o($Vi,[2,21]),o($Vi,[2,22]),o($Vi,[2,23]),o($Vi,[2,24]),{8:[2,26],32:[1,112],40:$Vk},{68:[1,113]},o($VE,$Vm),{24:87,33:114,34:115,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,74:116,82:$VF,83:118,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{41:[1,119]},{8:[2,67]},{24:87,33:120,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{24:87,30:124,33:125,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,51:[1,122],52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,104:121,107:123,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{118:[1,126],119:[1,127]},{43:[1,128]},{42:[1,129]},{24:87,33:131,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,74:130,82:$VF,83:118,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{24:87,33:132,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{24:87,33:131,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,74:133,82:$VF,83:118,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{7:134,9:135,30:136,31:27,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,41:$Vj},{2:$V0,4:137,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:26,31:27,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{8:[2,117],42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:144},{24:87,33:145,41:$Vp,42:$VM,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},o($VN,[2,44]),{24:87,30:148,33:147,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},o($VN,[2,46]),o($VN,[2,47]),o($VN,[2,48]),o($VN,[2,49]),o($VN,[2,50]),o($VN,[2,51]),o($VN,[2,52]),o($VN,[2,53]),o($VN,[2,54]),o($VN,[2,55]),o($VN,[2,56]),o($VN,$VO,{50:$VP,67:[1,149]}),o($VQ,[2,57],{66:$VR}),o($VQ,[2,58]),o($VQ,[2,59]),o($VQ,[2,60]),o($VQ,[2,62]),{50:[1,152]},{50:[1,153]},{50:[1,154]},{50:[1,155]},{50:[1,156]},{50:[1,157]},{50:[1,158]},{24:87,33:159,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{24:87,33:160,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{8:[2,145]},{50:$VP},{24:87,33:161,34:162,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,74:116,82:$VF,83:118,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{41:[1,163],67:[1,164]},o($VS,$VT,{48:144,84:165,8:$VU,51:$VU,42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,85:$VV,86:$VW,87:$VX,88:$VY}),o($VZ,[2,65]),{80:$V_,81:$V$,121:[1,170]},{24:87,33:131,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,74:173,82:$VF,83:118,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},o($V01,[2,92]),o($VE,[2,34]),{42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:144,68:[1,174]},{40:[1,176],51:[1,175]},{8:$V11,70:[1,178],94:[1,177]},{40:[1,180],51:[1,179]},{41:[1,181]},o($V21,[2,132],{48:144,42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL}),{50:[1,182]},{50:[1,183]},o($VN,$V31),o($VZ,$V41),{51:[1,184],80:$V_,81:$V$},o($V01,$VT,{48:144,84:165,42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,85:$VV,86:$VW,87:$VX,88:$VY}),{42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:144,51:[1,185]},{51:[1,186],80:$V_,81:$V$},{8:[1,187]},{8:[1,188]},{31:64,41:$Vj},{2:$V0,6:46,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:[1,189],23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:26,31:27,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{24:87,33:190,41:$Vp,42:$Vq,43:[1,191],48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{24:87,33:192,41:$Vp,42:$VM,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{24:87,33:193,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{24:87,33:194,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{24:87,33:195,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{24:87,33:196,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},o($VN,[2,43]),o($VN,[2,36],{48:144}),o($VN,$V41,{49:82,52:84,53:85,48:86,24:87,54:88,55:89,56:90,57:91,58:92,59:93,60:94,65:100,33:145,41:$Vp,50:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC}),{42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:144,51:[1,197]},{51:[1,198]},{24:87,33:199,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{24:87,33:125,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,51:[1,200],52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,107:123,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{61:[1,201]},{24:87,33:202,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{24:87,33:203,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{61:[1,206],65:205,113:[1,204]},{24:87,33:207,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{24:87,33:208,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{24:87,33:209,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{24:87,33:210,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:144,51:[1,211]},{42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:144,51:[1,212]},o($VS,$VT,{48:144,84:165,8:[2,27],42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,85:$VV,86:$VW,87:$VX,88:$VY}),{8:[2,28]},{32:[1,213]},{68:[1,214]},{24:87,33:215,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},o($V51,[2,95],{32:[1,216]}),o($V51,[2,96],{32:[1,217]}),o($V51,[2,99]),o($V51,[2,100]),{24:87,33:218,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{24:87,33:131,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,74:219,82:$VF,83:118,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{24:87,33:131,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,74:220,82:$VF,83:118,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},o($V01,[2,91]),{32:$V61,67:[1,222]},{70:[1,224],94:[1,223]},{30:225,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5},{30:226,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,106:[1,227]},{2:$V0,4:228,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:26,31:27,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},o($VN,[2,129]),{24:87,33:229,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},o($V21,[2,124]),{24:87,33:230,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{51:[1,231]},{70:[1,232]},{70:[1,233]},{70:[1,234]},{24:87,33:131,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,74:235,82:$VF,83:118,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{24:87,33:131,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,74:236,82:$VF,83:118,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{96:[1,237],100:[1,238]},o($V71,[2,37],{48:144,44:$VI,45:$VJ,46:$VK,47:$VL}),o($VN,$V31),o($V71,[2,38],{48:144,44:$VI,45:$VJ,46:$VK,47:$VL}),o($V81,[2,39],{48:144,46:$VK,47:$VL}),o($V81,[2,40],{48:144,46:$VK,47:$VL}),o($VN,[2,41],{48:144}),o($VN,[2,42],{48:144}),o($VN,[2,45]),{24:87,33:239,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:144,68:[1,240]},o($VN,$V11),o($VQ,[2,63]),{42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:144,51:[1,241]},{42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:144,51:[1,242]},{51:[1,243]},{51:[1,244]},{66:$VR},{42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:144,51:[1,245]},{42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:144,51:[1,246]},{42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:144,51:[1,247]},{42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:144,51:[1,248]},{8:[2,133]},{8:[2,134]},{24:87,33:251,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,69:[1,249],70:[1,250],110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{41:[1,252]},o($V01,[2,93],{48:144,42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL}),o($V51,[2,97]),o($V51,[2,98]),{42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:144,94:[1,253]},o([8,51,80,121],[2,89],{81:$V$}),o($V01,[2,90]),{12:256,24:87,33:255,41:$V91,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,72:254,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{24:87,33:258,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{30:259,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,106:[1,260]},{2:$V0,4:261,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:26,31:27,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{41:[1,262]},{70:[1,263]},{70:[1,264]},{2:$V0,6:46,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:[2,128],23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:26,31:27,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},o($V21,[2,131],{48:144,42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL}),{42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:144,51:[1,265]},{8:[2,144]},{2:$V0,4:266,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:26,31:27,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{90:267,91:268,92:269,93:$Va1,95:$Vb1},{2:$V0,4:272,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:26,31:27,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{8:[1,273],80:$V_,81:$V$},{8:[1,274],80:$V_,81:$V$},{50:[1,275]},{50:[1,276]},o($VN,[2,66],{48:144}),o($VN,$Vc1,{67:[1,277]}),o($VN,[2,135]),o($VN,[2,136]),o($VN,[2,137]),o($VN,[2,138]),o($VN,[2,139]),o($VN,[2,141]),o($VN,[2,142]),o($VN,[2,140]),{30:278,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5},{41:$Vd1,52:280,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,71:279},{8:[2,74],42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:144},{32:[1,282]},{24:87,33:283,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{8:[2,79]},{8:[2,81],42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:144},{8:[2,82]},o($Ve1,$VO,{50:$VP,67:[1,284]}),{42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:144,68:[1,285]},{70:[1,286]},{70:[1,287]},{2:$V0,6:46,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:[2,127],23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:26,31:27,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},o($V21,[2,123]),{2:$V0,4:288,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:26,31:27,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{2:$V0,4:289,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:26,31:27,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{8:[2,143]},{2:$V0,6:46,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:[1,290],23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:26,31:27,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{22:[1,291],91:292,92:293,93:$Va1,95:$Vb1},{22:[1,294]},o($Vf1,[2,105]),{94:[1,295]},{24:87,33:296,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{2:$V0,6:46,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:[1,297],23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:26,31:27,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{9:300,31:27,41:$Vg1,98:298},{9:300,31:27,41:$Vg1,98:301},{24:87,33:131,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,74:302,82:$VF,83:118,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{24:87,33:131,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,74:303,82:$VF,83:118,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{24:87,33:304,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{67:[1,305]},{22:[1,306],40:$Vh1},o($Vi1,[2,76]),o($Vi1,$VO),{69:[1,308],70:[1,309]},o($VZ,[2,146],{48:144,42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL}),{24:87,33:310,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{32:$Vj1},{2:$V0,4:312,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:26,31:27,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{2:$V0,4:313,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:26,31:27,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{2:$V0,6:46,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:[2,120],23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:26,31:27,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{2:$V0,6:46,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:[2,126],23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:26,31:27,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},o($Vk1,[2,85],{75:314}),o($Vi,[2,101]),{22:[1,315]},o($Vf1,[2,104]),o($Vi,[2,103]),{2:$V0,4:316,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:26,31:27,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:144,94:[1,317]},o($Vi,[2,108]),{51:[1,318]},o($Vl,$Vm,{48:319,42:$Vn,43:$Vo}),{51:[2,112]},{51:[1,320]},{51:[1,321],80:$V_,81:$V$},{51:[1,322],80:$V_,81:$V$},{42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:144,68:[1,323]},{24:87,33:324,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{8:[2,72]},{41:$Vd1,52:325,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100},{30:326,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5},{70:[1,327]},{42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:144,68:[1,328]},{12:256,24:87,33:255,41:$V91,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,72:329,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{2:$V0,6:46,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:[2,119],23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:26,31:27,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{2:$V0,6:46,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:[2,125],23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:26,31:27,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},o($Vi,[2,88],{76:330,77:331,78:[1,333],79:[1,332]}),o($Vi,[2,102]),{2:$V0,6:46,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:[2,107],23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:26,31:27,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{2:$V0,4:334,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:26,31:27,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{70:[1,335]},{51:[2,111]},{70:[1,336]},{8:[2,113]},{8:[2,114]},o($VN,$Vl1),{42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:144,68:[1,337]},o($Vi1,[2,75]),{67:[1,338]},{41:$Vd1,52:280,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,71:339},o($Ve1,$Vc1,{32:$V61,67:[1,340]}),{8:[2,80]},o($Vi,[2,83]),o($Vk1,[2,84]),{70:[1,341]},{50:[1,342]},o($Vf1,[2,106],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:26,31:27,6:46,2:$V0,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh}),{2:$V0,4:343,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:26,31:27,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{2:$V0,4:344,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:26,31:27,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{8:[2,70]},{24:87,33:345,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{22:[1,346],40:$Vh1},{24:87,33:347,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{2:$V0,4:348,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:26,31:27,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{24:87,33:131,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,74:349,82:$VF,83:118,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{2:$V0,6:46,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:[1,350],23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:26,31:27,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{2:$V0,6:46,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:[1,351],23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:26,31:27,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:144,68:[1,352]},{40:[1,353]},{42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:144,68:[1,354]},{2:$V0,6:46,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:[1,355],23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:26,31:27,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{51:[1,356],80:$V_,81:$V$},o($Vi,[2,109]),o($Vi,[2,110]),{67:[1,357]},{70:[1,358]},o($Ve1,$Vl1,{32:$Vj1}),o($Vi,[2,87]),{70:[1,359]},{24:87,33:360,41:$Vp,42:$Vq,43:$Vo,48:86,49:82,50:$Vr,52:84,53:85,54:88,55:89,56:90,57:91,58:92,59:93,60:94,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,110:$Vw,111:$Vx,112:$Vy,114:$Vz,115:$VA,116:$VB,117:$VC},{41:$Vd1,52:280,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:100,71:361},{2:$V0,4:362,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:26,31:27,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:144,68:[1,363]},{22:[1,364],40:$Vh1},{2:$V0,6:46,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:[1,365],23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:26,31:27,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,41:$V6,73:$V7,89:$V8,96:$V9,97:$Va,99:$Vb,101:$Vc,102:$Vd,103:$Ve,108:$Vf,109:$Vg,120:$Vh},{8:[2,71]},{22:[1,366]},o($Vk1,[2,86]),{8:[2,73]}],
defaultActions: {34:[2,115],35:[2,116],45:[2,1],69:[2,67],110:[2,145],162:[2,28],211:[2,133],212:[2,134],231:[2,144],254:[2,79],256:[2,82],265:[2,143],300:[2,112],306:[2,72],319:[2,111],321:[2,113],322:[2,114],329:[2,80],337:[2,70],363:[2,71],366:[2,73]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {Statement} = require('../instrucciones/Statement.ts');
    const {Assigment} = require('../instrucciones/Assignment.ts');
    const {Funcion} = require('../instrucciones/Funcion.ts');
    const {Metodo} = require('../instrucciones/Metodo.ts');
    const {Aritmetica} = require('../Expresion/Aritmetica.ts');
    const {IncDec} = require('../instrucciones/Incdec.ts');
    const {Casteo} = require('../Expresion/Casteo.ts');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip whitespace */
break;
case 2:/* skip whitespace */
break;
case 3:// comentario simple l√≠nea
break;
case 4:// comentario multiple l√≠neas
break;
case 5:return 61 
break;
case 6:return 62
break;
case 7:return 63
break;
case 8:return 64 
break;
case 9:return 66
break;
case 10:return 35
break;
case 11:return 36
break;
case 12:return 37
break;
case 13:return 38
break;
case 14:return 39
break;
case 15:return 43
break;
case 16:return 42
break;
case 17:return 44
break;
case 18:return 45
break;
case 19:return 46
break;
case 20:return 47
break;
case 21:return 85
break;
case 22:return 86
break;
case 23:return 'mayor_igual'
break;
case 24:return 'menor_igual'
break;
case 25:return 87
break;
case 26:return 88
break;
case 27:return 121
break;
case 28:return 94
break;
case 29:return 80
break;
case 30:return 81
break;
case 31:return 82
break;
case 32:return 50
break;
case 33:return 51
break;
case 34:return 8
break;
case 35:return 70
break;
case 36:return 22
break;
case 37:return 67
break;
case 38:return 68
break;
case 39:return 69
break;
case 40:return 73
break;
case 41:return 79
break;
case 42:return 78
break;
case 43:return 89
break;
case 44:return 93
break;
case 45:return 95
break;
case 46:return 96
break;
case 47:return 99
break;
case 48:return 100
break;
case 49:return 97
break;
case 50:return 101
break;
case 51:return 102
break;
case 52:return 103
break;
case 53:return 106
break;
case 54:return 108
break;
case 55:return 109
break;
case 56:return 110
break;
case 57:return 111
break;
case 58:return 112
break;
case 59:return 114
break;
case 60:return 115
break;
case 61:return 116
break;
case 62:return 117
break;
case 63:return 118
break;
case 64:return 119
break;
case 65:return 120
break;
case 66:return 32
break;
case 67:return 41
break;
case 68:return 40
break;
case 69:return 5
break;
case 70: 
        console.error("Error lexico: " + yy_.yytext + " en la linea: " + yy_.yylloc.first_line + " columna: " + yy_.yylloc.first_column)
    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:(\/\/.+))/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:([0-9]+))/i,/^(?:(true|false\b))/i,/^(?:(('([a-zA-Z]|[!-[]|[\]-¬ø]|\\('|[n]|[t]|[r]|\\)|[ ])')))/i,/^(?:("[^\"]*"))/i,/^(?:\.)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:>)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:\{menor\})/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elif\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:until\b)/i,/^(?:for\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:run\b)/i,/^(?:=)/i,/^(?:(([a-zA-Z])([a-zA-Z]|[0-9]|_)*))/i,/^(?:,)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}