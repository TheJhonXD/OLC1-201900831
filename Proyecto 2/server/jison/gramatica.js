/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,6],$V2=[1,16],$V3=[1,17],$V4=[1,18],$V5=[1,19],$V6=[1,20],$V7=[1,14],$V8=[1,15],$V9=[2,5,10,20,21,22,23,24,48,50,66,70,72],$Va=[2,20],$Vb=[1,27],$Vc=[1,35],$Vd=[10,34,43],$Ve=[1,46],$Vf=[1,40],$Vg=[1,42],$Vh=[1,47],$Vi=[1,48],$Vj=[1,49],$Vk=[1,50],$Vl=[8,18,25],$Vm=[1,59],$Vn=[1,65],$Vo=[1,64],$Vp=[1,66],$Vq=[1,67],$Vr=[1,68],$Vs=[1,69],$Vt=[1,72],$Vu=[8,26,27,28,29,30,31,34,44,57,58,62,63,64,65,71],$Vv=[2,38],$Vw=[8,25,26,27,28,29,30,31,34,44,48,57,58,62,63,64,65,71],$Vx=[2,43],$Vy=[2,44],$Vz=[1,81],$VA=[1,82],$VB=[34,57,58],$VC=[1,90],$VD=[10,26,27,33,37,38,39,40],$VE=[1,115],$VF=[8,26,27,34,44,57,58,62,63,64,65,71],$VG=[8,26,27,28,29,34,44,57,58,62,63,64,65,71],$VH=[1,127],$VI=[1,126],$VJ=[8,26,27,28,29,30,31],$VK=[2,51],$VL=[1,134],$VM=[48,70,72],$VN=[1,144],$VO=[1,148],$VP=[25,48],$VQ=[2,5,10,20,21,22,23,24,48,50,55,56,66,70,72],$VR=[2,52];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"INSTRUCTIONS":4,"EOF":5,"INSTRUCTION":6,"STATEMENT":7,"ptcoma":8,"ASSIGNMENT":9,"var_name":10,"INCDEC":11,"VECTOR":12,"VECTORMOD":13,"IF":14,"SWITCH":15,"TIPO":16,"ID":17,"igual":18,"EXPRESSION":19,"int":20,"double":21,"boolean":22,"char":23,"string":24,"coma":25,"menos":26,"mas":27,"multi":28,"div":29,"pot":30,"mod":31,"GETVALVECTOR":32,"parA":33,"parC":34,"EXP":35,"CASTING":36,"entero":37,"logico":38,"caracter":39,"cadena":40,"DECIMAL":41,"punto":42,"corA":43,"corC":44,"nuevo":45,"llaveA":46,"VECTORVAL":47,"llaveC":48,"VALVECTORMOD":49,"if":50,"CONDITION":51,"ANIDADO":52,"ELSE":53,"ELIF":54,"elif":55,"else":56,"or":57,"and":58,"not":59,"REL":60,"OP_REL":61,"mayor":62,"menor":63,"igual_a":64,"diferente":65,"switch":66,"CASELIST":67,"DEFAULT":68,"CASE":69,"case":70,"colon":71,"default":72,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"ptcoma",10:"var_name",18:"igual",20:"int",21:"double",22:"boolean",23:"char",24:"string",25:"coma",26:"menos",27:"mas",28:"multi",29:"div",30:"pot",31:"mod",33:"parA",34:"parC",37:"entero",38:"logico",39:"caracter",40:"cadena",42:"punto",43:"corA",44:"corC",45:"nuevo",46:"llaveA",48:"llaveC",50:"if",55:"elif",56:"else",57:"or",58:"and",59:"not",62:"mayor",63:"menor",64:"igual_a",65:"diferente",66:"switch",70:"case",71:"colon",72:"default"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,3],[6,2],[6,2],[6,1],[6,1],[6,1],[7,2],[7,4],[16,1],[16,1],[16,1],[16,1],[16,1],[17,3],[17,1],[19,2],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,2],[19,1],[19,3],[19,1],[19,1],[19,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[41,3],[9,3],[36,4],[11,2],[11,2],[12,10],[12,15],[12,8],[12,16],[47,3],[47,1],[32,4],[32,7],[13,6],[13,9],[49,1],[49,1],[14,9],[52,2],[52,0],[54,7],[53,4],[53,0],[51,3],[51,3],[51,2],[51,1],[60,3],[60,1],[61,1],[61,1],[61,2],[61,2],[61,1],[61,1],[15,7],[15,8],[15,7],[67,2],[67,1],[69,4],[68,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log("Analisis terminado") 
break;
case 11:
 console.error('Error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ' columna: ' + this._$.first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:12,17:13,20:$V2,21:$V3,22:$V4,23:$V5,24:$V6,50:$V7,66:$V8},{1:[3]},{2:$V0,5:[1,21],6:22,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:12,17:13,20:$V2,21:$V3,22:$V4,23:$V5,24:$V6,50:$V7,66:$V8},o($V9,[2,3]),{8:[1,23]},{8:[1,24]},o([18,25],$Va,{11:25,26:[1,28],27:$Vb,43:[1,26]}),{8:[1,29]},{8:[1,30]},o($V9,[2,9]),o($V9,[2,10]),o($V9,[2,11]),{10:[1,33],17:31,43:[1,32]},{18:[1,34],25:$Vc},{33:[1,36]},{33:[1,37]},o($Vd,[2,14]),o($Vd,[2,15]),o($Vd,[2,16]),o($Vd,[2,17]),o($Vd,[2,18]),{1:[2,1]},o($V9,[2,2]),o($V9,[2,4]),o($V9,[2,5]),{8:[1,38]},{10:$Ve,11:45,19:39,26:$Vf,27:$Vb,32:41,33:$Vg,35:43,36:44,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:51},{27:[1,52]},{26:[1,53]},o($V9,[2,7]),o($V9,[2,8]),{8:[2,12],18:[1,54],25:$Vc},{44:[1,55]},o($Vl,$Va),{10:$Ve,11:45,19:56,26:$Vf,27:$Vb,32:41,33:$Vg,35:43,36:44,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:51},{10:[1,57]},{10:$Ve,11:45,19:61,26:$Vf,27:$Vb,32:41,33:$Vg,35:43,36:44,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:51,51:58,59:$Vm,60:60},{10:$Ve,11:45,19:62,26:$Vf,27:$Vb,32:41,33:$Vg,35:43,36:44,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:51},o($V9,[2,6]),{11:70,26:$Vn,27:$Vo,28:$Vp,29:$Vq,30:$Vr,31:$Vs,44:[1,63]},{10:$Ve,11:45,19:71,26:$Vt,27:$Vb,32:41,33:$Vg,35:43,36:44,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:51},o($Vu,[2,29]),{10:$Ve,11:45,16:74,19:73,20:$V2,21:$V3,22:$V4,23:$V5,24:$V6,26:$Vf,27:$Vb,32:41,33:$Vg,35:43,36:44,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:51},o($Vu,[2,31]),o($Vu,[2,32]),o($Vu,[2,33]),o($Vu,$Vv,{43:[1,75]}),o($Vw,[2,34],{42:[1,76]}),o($Vw,[2,35]),o($Vw,[2,36]),o($Vw,[2,37]),o($Vw,[2,39]),o($Vu,$Vx),{8:$Vy},{10:$Ve,11:45,19:77,26:$Vf,27:$Vb,32:41,33:$Vg,35:43,36:44,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:51},{10:[1,78],43:[1,79]},{8:[2,41],11:70,26:$Vn,27:$Vo,28:$Vp,29:$Vq,30:$Vr,31:$Vs},o($Vl,[2,19]),{34:[1,80],57:$Vz,58:$VA},{10:$Ve,11:45,19:61,26:$Vf,27:$Vb,32:41,33:$Vg,35:43,36:44,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:51,51:83,59:$Vm,60:60},o($VB,[2,66]),o($VB,[2,68],{11:70,61:84,26:$Vn,27:$Vo,28:$Vp,29:$Vq,30:$Vr,31:$Vs,62:[1,85],63:[1,86],64:[1,87],65:[1,88]}),{11:70,26:$Vn,27:$Vo,28:$Vp,29:$Vq,30:$Vr,31:$Vs,34:[1,89]},{18:$VC,43:[1,91]},{10:$Ve,11:45,19:92,26:$Vf,27:[1,93],32:41,33:$Vg,35:43,36:44,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:51},{10:$Ve,11:45,19:94,26:$Vt,27:$Vb,32:41,33:$Vg,35:43,36:44,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:51},{10:$Ve,11:45,19:95,26:$Vf,27:$Vb,32:41,33:$Vg,35:43,36:44,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:51},{10:$Ve,11:45,19:96,26:$Vf,27:$Vb,32:41,33:$Vg,35:43,36:44,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:51},{10:$Ve,11:45,19:97,26:$Vf,27:$Vb,32:41,33:$Vg,35:43,36:44,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:51},{10:$Ve,11:45,19:98,26:$Vf,27:$Vb,32:41,33:$Vg,35:43,36:44,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:51},o($Vu,[2,28]),o($Vu,[2,21],{11:70}),o($Vu,$Vy,{32:41,35:43,36:44,11:45,41:51,19:71,10:$Ve,33:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk}),{11:70,26:$Vn,27:$Vo,28:$Vp,29:$Vq,30:$Vr,31:$Vs,34:[1,99]},{34:[1,100]},{10:$Ve,11:45,19:101,26:$Vf,27:$Vb,32:41,33:$Vg,35:43,36:44,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:51},{37:[1,102]},{8:[2,13],11:70,26:$Vn,27:$Vo,28:$Vp,29:$Vq,30:$Vr,31:$Vs},{18:[1,103]},{44:[1,104]},{46:[1,105]},{10:$Ve,11:45,19:61,26:$Vf,27:$Vb,32:41,33:$Vg,35:43,36:44,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:51,51:106,59:$Vm,60:60},{10:$Ve,11:45,19:61,26:$Vf,27:$Vb,32:41,33:$Vg,35:43,36:44,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:51,51:107,59:$Vm,60:60},o($VB,[2,65]),{10:$Ve,11:45,19:108,26:$Vf,27:$Vb,32:41,33:$Vg,35:43,36:44,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:51},o($VD,[2,69],{18:[1,109]}),o($VD,[2,70],{18:[1,110]}),o($VD,[2,73]),o($VD,[2,74]),{46:[1,111]},{10:$VE,11:45,13:114,19:113,26:$Vf,27:$Vb,32:41,33:$Vg,35:43,36:44,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:51,49:112},{10:$Ve,11:45,19:116,26:$Vf,27:$Vb,32:41,33:$Vg,35:43,36:44,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:51},o($VF,[2,22],{11:70,28:$Vp,29:$Vq,30:$Vr,31:$Vs}),o($Vu,$Vx),o($VF,[2,23],{11:70,28:$Vp,29:$Vq,30:$Vr,31:$Vs}),o($VG,[2,24],{11:70,30:$Vr,31:$Vs}),o($VG,[2,25],{11:70,30:$Vr,31:$Vs}),o($Vu,[2,26],{11:70}),o($Vu,[2,27],{11:70}),o($Vu,[2,30]),{10:$Ve,11:45,19:117,26:$Vf,27:$Vb,32:41,33:$Vg,35:43,36:44,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:51},{11:70,26:$Vn,27:$Vo,28:$Vp,29:$Vq,30:$Vr,31:$Vs,44:[1,118]},o($Vw,[2,40]),{45:[1,119],46:[1,120]},{10:[1,121]},{2:$V0,4:122,6:3,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:12,17:13,20:$V2,21:$V3,22:$V4,23:$V5,24:$V6,50:$V7,66:$V8},o([34,57],[2,63],{58:$VA}),o($VB,[2,64]),o($VB,[2,67],{11:70,26:$Vn,27:$Vo,28:$Vp,29:$Vq,30:$Vr,31:$Vs}),o($VD,[2,71]),o($VD,[2,72]),{67:123,68:124,69:125,70:$VH,72:$VI},{8:[2,53]},{8:[2,55],11:70,26:$Vn,27:$Vo,28:$Vp,29:$Vq,30:$Vr,31:$Vs},{8:[2,56]},o($VJ,$Vv,{43:[1,128]}),{11:70,26:$Vn,27:$Vo,28:$Vp,29:$Vq,30:$Vr,31:$Vs,44:[1,129]},o($Vu,[2,42],{11:70}),o($Vu,$VK,{43:[1,130]}),{16:131,20:$V2,21:$V3,22:$V4,23:$V5,24:$V6},{10:$VL,35:133,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:51,47:132},{18:[1,135]},{2:$V0,6:22,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:12,17:13,20:$V2,21:$V3,22:$V4,23:$V5,24:$V6,48:[1,136],50:$V7,66:$V8},{48:[1,137],68:138,69:139,70:$VH,72:$VI},{48:[1,140]},o($VM,[2,79]),{71:[1,141]},{10:$Ve,11:45,19:142,26:$Vf,27:$Vb,32:41,33:$Vg,35:43,36:44,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:51},{10:$Ve,11:45,19:143,26:$Vf,27:$Vb,32:41,33:$Vg,35:43,36:44,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:51},{18:$VN},{10:$Ve,11:45,19:145,26:$Vf,27:$Vb,32:41,33:$Vg,35:43,36:44,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:51},{43:[1,146]},{25:$VO,48:[1,147]},o($VP,[2,50]),o($VP,$Vv),{45:[1,149],46:[1,150]},o($VQ,[2,59],{52:151}),o($V9,[2,75]),{48:[1,152]},o($VM,[2,78]),o($V9,[2,77]),{2:$V0,4:153,6:3,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:12,17:13,20:$V2,21:$V3,22:$V4,23:$V5,24:$V6,50:$V7,66:$V8},{11:70,26:$Vn,27:$Vo,28:$Vp,29:$Vq,30:$Vr,31:$Vs,71:[1,154]},{11:70,26:$Vn,27:$Vo,28:$Vp,29:$Vq,30:$Vr,31:$Vs,44:[1,155]},{10:$VE,11:45,13:114,19:113,26:$Vf,27:$Vb,32:41,33:$Vg,35:43,36:44,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:51,49:156},{11:70,26:$Vn,27:$Vo,28:$Vp,29:$Vq,30:$Vr,31:$Vs,44:[1,157]},{10:$Ve,11:45,19:158,26:$Vf,27:$Vb,32:41,33:$Vg,35:43,36:44,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:51},{8:[2,47]},{10:$VL,35:159,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:51},{16:160,20:$V2,21:$V3,22:$V4,23:$V5,24:$V6},{46:[1,161]},o($V9,[2,62],{53:162,54:163,55:[1,165],56:[1,164]}),o($V9,[2,76]),{2:$V0,6:22,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:12,17:13,20:$V2,21:$V3,22:$V4,23:$V5,24:$V6,48:[2,81],50:$V7,66:$V8},{2:$V0,4:166,6:3,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:12,17:13,20:$V2,21:$V3,22:$V4,23:$V5,24:$V6,50:$V7,66:$V8},o($VJ,$VK,{18:$VC,43:[1,167]}),{8:[2,54]},o($Vu,$VR),{11:70,26:$Vn,27:$Vo,28:$Vp,29:$Vq,30:$Vr,31:$Vs,44:[1,168]},o($VP,[2,49]),{43:[1,169]},{10:$VL,35:133,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:51,47:170},o($V9,[2,57]),o($VQ,[2,58]),{46:[1,171]},{33:[1,172]},o($VM,[2,80],{7:4,9:5,12:7,13:8,14:9,15:10,16:12,17:13,6:22,2:$V0,10:$V1,20:$V2,21:$V3,22:$V4,23:$V5,24:$V6,50:$V7,66:$V8}),{10:$Ve,11:45,19:173,26:$Vf,27:$Vb,32:41,33:$Vg,35:43,36:44,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:51},{8:[2,45]},{10:$Ve,11:45,19:174,26:$Vf,27:$Vb,32:41,33:$Vg,35:43,36:44,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:51},{25:$VO,48:[1,175]},{2:$V0,4:176,6:3,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:12,17:13,20:$V2,21:$V3,22:$V4,23:$V5,24:$V6,50:$V7,66:$V8},{10:$Ve,11:45,19:61,26:$Vf,27:$Vb,32:41,33:$Vg,35:43,36:44,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:51,51:177,59:$Vm,60:60},{11:70,26:$Vn,27:$Vo,28:$Vp,29:$Vq,30:$Vr,31:$Vs,44:[1,178]},{11:70,26:$Vn,27:$Vo,28:$Vp,29:$Vq,30:$Vr,31:$Vs,44:[1,179]},{25:[1,180]},{2:$V0,6:22,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:12,17:13,20:$V2,21:$V3,22:$V4,23:$V5,24:$V6,48:[1,181],50:$V7,66:$V8},{34:[1,182],57:$Vz,58:$VA},o($VJ,$VR,{18:$VN}),{43:[1,183]},{46:[1,184]},o($V9,[2,61]),{46:[1,185]},{10:$Ve,11:45,19:186,26:$Vf,27:$Vb,32:41,33:$Vg,35:43,36:44,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:51},{10:$VL,35:133,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:51,47:187},{2:$V0,4:188,6:3,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:12,17:13,20:$V2,21:$V3,22:$V4,23:$V5,24:$V6,50:$V7,66:$V8},{11:70,26:$Vn,27:$Vo,28:$Vp,29:$Vq,30:$Vr,31:$Vs,44:[1,189]},{25:$VO,48:[1,190]},{2:$V0,6:22,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:12,17:13,20:$V2,21:$V3,22:$V4,23:$V5,24:$V6,48:[1,191],50:$V7,66:$V8},{8:[2,46]},{48:[1,192]},o($VQ,[2,60]),{8:[2,48]}],
defaultActions: {21:[2,1],53:[2,44],112:[2,53],114:[2,56],147:[2,47],156:[2,54],168:[2,45],189:[2,46],192:[2,48]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  //Declarciones y tambien las importaciones
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip whitespace */
break;
case 2:/* skip whitespace */
break;
case 3:// comentario simple l√≠nea
break;
case 4:// comentario multiple l√≠neas
break;
case 5:return 37 
break;
case 6:return 38
break;
case 7:return 39
break;
case 8:return 40 
break;
case 9:return 42
break;
case 10:return 20
break;
case 11:return 21
break;
case 12:return 22
break;
case 13:return 23
break;
case 14:return 24
break;
case 15:return 27
break;
case 16:return 26
break;
case 17:return 28
break;
case 18:return 29
break;
case 19:return 30
break;
case 20:return 31
break;
case 21:return 62
break;
case 22:return 63
break;
case 23:return 'mayor_igual'
break;
case 24:return 'menor_igual'
break;
case 25:return 64
break;
case 26:return 65
break;
case 27:return 'qn_C'
break;
case 28:return 71
break;
case 29:return 57
break;
case 30:return 58
break;
case 31:return 59
break;
case 32:return 33
break;
case 33:return 34
break;
case 34:return 8
break;
case 35:return 46
break;
case 36:return 48
break;
case 37:return 43
break;
case 38:return 44
break;
case 39:return 45
break;
case 40:return 50
break;
case 41:return 56
break;
case 42:return 55
break;
case 43:return 66
break;
case 44:return 70
break;
case 45:return 72
break;
case 46:return 18
break;
case 47:return 10
break;
case 48:return 25
break;
case 49:return 5
break;
case 50: 
        console.error("Error lexico: " + yy_.yytext + " en la linea: " + yy_.yylloc.first_line + " columna: " + yy_.yylloc.first_column)
    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:(\/\/.+))/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:([0-9]+))/i,/^(?:(true|false\b))/i,/^(?:(('([a-zA-Z]|[!-[]|[\]-¬ø]|\\('|[n]|[t]|[r]|\\)|[ ])')))/i,/^(?:("[^\"]*"))/i,/^(?:\.)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:>)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:\{menor\})/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elif\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:=)/i,/^(?:(([a-zA-Z])([a-zA-Z]|[0-9]|_)*))/i,/^(?:,)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}