/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,6],$V2=[1,30],$V3=[1,31],$V4=[1,32],$V5=[1,33],$V6=[1,34],$V7=[1,22],$V8=[1,23],$V9=[1,24],$Va=[1,25],$Vb=[1,26],$Vc=[1,27],$Vd=[1,28],$Ve=[1,29],$Vf=[2,5,10,28,29,30,31,32,56,58,74,78,80,81,82,84,86,87,88],$Vg=[26,33],$Vh=[2,28],$Vi=[1,43],$Vj=[1,42],$Vk=[1,52],$Vl=[1,54],$Vm=[1,67],$Vn=[1,61],$Vo=[1,63],$Vp=[1,68],$Vq=[1,69],$Vr=[1,70],$Vs=[1,71],$Vt=[10,42,51,54],$Vu=[8,26,33],$Vv=[1,85],$Vw=[1,95],$Vx=[1,94],$Vy=[1,96],$Vz=[1,97],$VA=[1,98],$VB=[1,99],$VC=[1,102],$VD=[8,34,35,36,37,38,39,42,52,65,66,70,71,72,73,79],$VE=[2,46],$VF=[8,33,34,35,36,37,38,39,42,52,56,65,66,70,71,72,73,79],$VG=[2,51],$VH=[8,42],$VI=[2,52],$VJ=[1,115],$VK=[1,116],$VL=[8,42,65,66],$VM=[1,139],$VN=[33,42],$VO=[10,34,35,41,45,46,47,48],$VP=[8,34,35,42,52,65,66,70,71,72,73,79],$VQ=[8,34,35,36,37,42,52,65,66,70,71,72,73,79],$VR=[1,163],$VS=[1,177],$VT=[1,176],$VU=[2,59],$VV=[8,34,35,36,37,38,39],$VW=[1,192],$VX=[56,78,80],$VY=[1,203],$VZ=[1,210],$V_=[1,215],$V$=[33,56],$V01=[2,5,10,28,29,30,31,32,56,58,63,64,74,78,80,81,82,84,86,87,88],$V11=[2,60];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"INSTRUCTIONS":4,"EOF":5,"INSTRUCTION":6,"STATEMENT":7,"ptcoma":8,"ASSIGNMENT":9,"var_name":10,"INCDEC":11,"VECTOR":12,"VECTORMOD":13,"IF":14,"SWITCH":15,"WHILE":16,"FOR":17,"DOWHILE":18,"DOUNTIL":19,"TRANSFER":20,"RETURN":21,"FUNC":22,"METHOD":23,"TIPO":24,"ID":25,"igual":26,"EXPRESSION":27,"int":28,"double":29,"boolean":30,"char":31,"string":32,"coma":33,"menos":34,"mas":35,"multi":36,"div":37,"pot":38,"mod":39,"GETVALVECTOR":40,"parA":41,"parC":42,"EXP":43,"CASTING":44,"entero":45,"logico":46,"caracter":47,"cadena":48,"DECIMAL":49,"punto":50,"corA":51,"corC":52,"nuevo":53,"llaveA":54,"VECTORVAL":55,"llaveC":56,"VALVECTORMOD":57,"if":58,"CONDITION":59,"ANIDADO":60,"ELSE":61,"ELIF":62,"elif":63,"else":64,"or":65,"and":66,"not":67,"REL":68,"OP_REL":69,"mayor":70,"menor":71,"igual_a":72,"diferente":73,"switch":74,"CASELIST":75,"DEFAULT":76,"CASE":77,"case":78,"colon":79,"default":80,"while":81,"for":82,"ACTUALIZATION":83,"do":84,"until":85,"break":86,"continue":87,"retornar":88,"PARAMETROS":89,"PARAMS":90,"void":91,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"ptcoma",10:"var_name",26:"igual",28:"int",29:"double",30:"boolean",31:"char",32:"string",33:"coma",34:"menos",35:"mas",36:"multi",37:"div",38:"pot",39:"mod",41:"parA",42:"parC",45:"entero",46:"logico",47:"caracter",48:"cadena",50:"punto",51:"corA",52:"corC",53:"nuevo",54:"llaveA",56:"llaveC",58:"if",63:"elif",64:"else",65:"or",66:"and",67:"not",70:"mayor",71:"menor",72:"igual_a",73:"diferente",74:"switch",78:"case",79:"colon",80:"default",81:"while",82:"for",84:"do",85:"until",86:"break",87:"continue",88:"retornar",91:"void"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,3],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[7,2],[7,4],[24,1],[24,1],[24,1],[24,1],[24,1],[25,3],[25,1],[27,2],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,1],[27,3],[27,1],[27,1],[27,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[49,3],[9,3],[44,4],[11,2],[11,2],[12,10],[12,15],[12,8],[12,16],[55,3],[55,1],[40,4],[40,7],[13,6],[13,9],[57,1],[57,1],[14,9],[60,2],[60,0],[62,7],[61,4],[61,0],[59,3],[59,3],[59,2],[59,1],[68,3],[68,1],[69,1],[69,1],[69,2],[69,2],[69,1],[69,1],[15,7],[15,8],[15,7],[75,2],[75,1],[77,4],[76,3],[16,7],[17,11],[17,11],[83,2],[83,1],[18,8],[19,8],[20,1],[20,1],[21,2],[21,1],[22,9],[89,1],[89,0],[90,4],[90,2],[23,9],[23,7]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log("Analisis terminado") 
break;
case 19:
 console.error('Error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ' columna: ' + this._$.first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:20,25:21,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,58:$V7,74:$V8,81:$V9,82:$Va,84:$Vb,86:$Vc,87:$Vd,88:$Ve},{1:[3]},{2:$V0,5:[1,35],6:36,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:20,25:21,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,58:$V7,74:$V8,81:$V9,82:$Va,84:$Vb,86:$Vc,87:$Vd,88:$Ve},o($Vf,[2,3]),{8:[1,37]},{8:[1,38]},o($Vg,$Vh,{11:39,34:$Vi,35:$Vj,41:[1,41],51:[1,40]}),{8:[1,44]},{8:[1,45]},o($Vf,[2,9]),o($Vf,[2,10]),o($Vf,[2,11]),o($Vf,[2,12]),{8:[1,46]},{8:[1,47]},{8:[1,48]},{8:[1,49]},o($Vf,[2,17]),o($Vf,[2,18]),o($Vf,[2,19]),{10:$Vk,25:50,51:[1,51]},{26:[1,53],33:$Vl},{41:[1,55]},{41:[1,56]},{41:[1,57]},{41:[1,58]},{54:[1,59]},{8:[2,97]},{8:[2,98]},{8:[2,100],10:$Vm,11:66,27:60,34:$Vn,35:$Vj,40:62,41:$Vo,43:64,44:65,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72},o($Vt,[2,22]),o($Vt,[2,23]),o($Vt,[2,24]),o($Vt,[2,25]),o($Vt,[2,26]),{1:[2,1]},o($Vf,[2,2]),o($Vf,[2,4]),o($Vf,[2,5]),{8:[1,73]},{10:$Vm,11:66,27:74,34:$Vn,35:$Vj,40:62,41:$Vo,43:64,44:65,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72},{24:77,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,42:[2,103],89:75,90:76},{35:[1,78]},{34:[1,79]},o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,13]),o($Vf,[2,14]),o($Vf,[2,15]),o($Vf,[2,16]),{8:[2,20],26:[1,80],33:$Vl},{52:[1,81]},o($Vu,$Vh),{10:$Vm,11:66,27:82,34:$Vn,35:$Vj,40:62,41:$Vo,43:64,44:65,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72},{10:[1,83]},{10:$Vm,11:66,27:87,34:$Vn,35:$Vj,40:62,41:$Vo,43:64,44:65,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72,59:84,67:$Vv,68:86},{10:$Vm,11:66,27:88,34:$Vn,35:$Vj,40:62,41:$Vo,43:64,44:65,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72},{10:$Vm,11:66,27:87,34:$Vn,35:$Vj,40:62,41:$Vo,43:64,44:65,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72,59:89,67:$Vv,68:86},{7:90,9:91,10:$Vk,24:92,25:21,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6},{2:$V0,4:93,6:3,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:20,25:21,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,58:$V7,74:$V8,81:$V9,82:$Va,84:$Vb,86:$Vc,87:$Vd,88:$Ve},{8:[2,99],11:100,34:$Vw,35:$Vx,36:$Vy,37:$Vz,38:$VA,39:$VB},{10:$Vm,11:66,27:101,34:$VC,35:$Vj,40:62,41:$Vo,43:64,44:65,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72},o($VD,[2,37]),{10:$Vm,11:66,24:104,27:103,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,34:$Vn,35:$Vj,40:62,41:$Vo,43:64,44:65,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72},o($VD,[2,39]),o($VD,[2,40]),o($VD,[2,41]),o($VD,$VE,{51:[1,105]}),o($VF,[2,42],{50:[1,106]}),o($VF,[2,43]),o($VF,[2,44]),o($VF,[2,45]),o($VF,[2,47]),o($Vf,[2,6]),{11:100,34:$Vw,35:$Vx,36:$Vy,37:$Vz,38:$VA,39:$VB,52:[1,107]},{42:[1,108]},{33:[1,109],42:[2,102]},{10:[1,110]},o($VD,$VG),o($VH,$VI),{10:$Vm,11:66,27:111,34:$Vn,35:$Vj,40:62,41:$Vo,43:64,44:65,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72},{10:[1,112],51:[1,113]},o($VH,[2,49],{11:100,34:$Vw,35:$Vx,36:$Vy,37:$Vz,38:$VA,39:$VB}),o($Vu,[2,27]),{42:[1,114],65:$VJ,66:$VK},{10:$Vm,11:66,27:87,34:$Vn,35:$Vj,40:62,41:$Vo,43:64,44:65,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72,59:117,67:$Vv,68:86},o($VL,[2,74]),o($VL,[2,76],{11:100,69:118,34:$Vw,35:$Vx,36:$Vy,37:$Vz,38:$VA,39:$VB,70:[1,119],71:[1,120],72:[1,121],73:[1,122]}),{11:100,34:$Vw,35:$Vx,36:$Vy,37:$Vz,38:$VA,39:$VB,42:[1,123]},{42:[1,124],65:$VJ,66:$VK},{8:[1,125]},{8:[1,126]},{10:$Vk,25:50},{2:$V0,6:36,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:20,25:21,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,56:[1,127],58:$V7,74:$V8,81:$V9,82:$Va,84:$Vb,86:$Vc,87:$Vd,88:$Ve},{10:$Vm,11:66,27:128,34:$Vn,35:[1,129],40:62,41:$Vo,43:64,44:65,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72},{10:$Vm,11:66,27:130,34:$VC,35:$Vj,40:62,41:$Vo,43:64,44:65,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72},{10:$Vm,11:66,27:131,34:$Vn,35:$Vj,40:62,41:$Vo,43:64,44:65,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72},{10:$Vm,11:66,27:132,34:$Vn,35:$Vj,40:62,41:$Vo,43:64,44:65,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72},{10:$Vm,11:66,27:133,34:$Vn,35:$Vj,40:62,41:$Vo,43:64,44:65,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72},{10:$Vm,11:66,27:134,34:$Vn,35:$Vj,40:62,41:$Vo,43:64,44:65,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72},o($VD,[2,36]),o($VD,[2,29],{11:100}),o($VD,$VI,{40:62,43:64,44:65,11:66,49:72,27:101,10:$Vm,41:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs}),{11:100,34:$Vw,35:$Vx,36:$Vy,37:$Vz,38:$VA,39:$VB,42:[1,135]},{42:[1,136]},{10:$Vm,11:66,27:137,34:$Vn,35:$Vj,40:62,41:$Vo,43:64,44:65,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72},{45:[1,138]},{26:$VM,51:[1,140]},{54:[1,142],79:[1,141]},{24:143,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6},o($VN,[2,105]),{8:[2,21],11:100,34:$Vw,35:$Vx,36:$Vy,37:$Vz,38:$VA,39:$VB},{26:[1,144]},{52:[1,145]},{54:[1,146]},{10:$Vm,11:66,27:87,34:$Vn,35:$Vj,40:62,41:$Vo,43:64,44:65,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72,59:147,67:$Vv,68:86},{10:$Vm,11:66,27:87,34:$Vn,35:$Vj,40:62,41:$Vo,43:64,44:65,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72,59:148,67:$Vv,68:86},o($VL,[2,73]),{10:$Vm,11:66,27:149,34:$Vn,35:$Vj,40:62,41:$Vo,43:64,44:65,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72},o($VO,[2,77],{26:[1,150]}),o($VO,[2,78],{26:[1,151]}),o($VO,[2,81]),o($VO,[2,82]),{54:[1,152]},{54:[1,153]},{10:$Vm,11:66,27:87,34:$Vn,35:$Vj,40:62,41:$Vo,43:64,44:65,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72,59:154,67:$Vv,68:86},{10:$Vm,11:66,27:87,34:$Vn,35:$Vj,40:62,41:$Vo,43:64,44:65,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72,59:155,67:$Vv,68:86},{81:[1,156],85:[1,157]},o($VP,[2,30],{11:100,36:$Vy,37:$Vz,38:$VA,39:$VB}),o($VD,$VG),o($VP,[2,31],{11:100,36:$Vy,37:$Vz,38:$VA,39:$VB}),o($VQ,[2,32],{11:100,38:$VA,39:$VB}),o($VQ,[2,33],{11:100,38:$VA,39:$VB}),o($VD,[2,34],{11:100}),o($VD,[2,35],{11:100}),o($VD,[2,38]),{10:$Vm,11:66,27:158,34:$Vn,35:$Vj,40:62,41:$Vo,43:64,44:65,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72},{11:100,34:$Vw,35:$Vx,36:$Vy,37:$Vz,38:$VA,39:$VB,52:[1,159]},o($VF,[2,48]),{10:$VR,11:66,13:162,27:161,34:$Vn,35:$Vj,40:62,41:$Vo,43:64,44:65,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72,57:160},{10:$Vm,11:66,27:164,34:$Vn,35:$Vj,40:62,41:$Vo,43:64,44:65,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72},{24:165,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,91:[1,166]},{2:$V0,4:167,6:3,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:20,25:21,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,58:$V7,74:$V8,81:$V9,82:$Va,84:$Vb,86:$Vc,87:$Vd,88:$Ve},{10:[1,168]},{53:[1,169],54:[1,170]},{10:[1,171]},{2:$V0,4:172,6:3,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:20,25:21,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,58:$V7,74:$V8,81:$V9,82:$Va,84:$Vb,86:$Vc,87:$Vd,88:$Ve},o([8,42,65],[2,71],{66:$VK}),o($VL,[2,72]),o($VL,[2,75],{11:100,34:$Vw,35:$Vx,36:$Vy,37:$Vz,38:$VA,39:$VB}),o($VO,[2,79]),o($VO,[2,80]),{75:173,76:174,77:175,78:$VS,80:$VT},{2:$V0,4:178,6:3,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:20,25:21,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,58:$V7,74:$V8,81:$V9,82:$Va,84:$Vb,86:$Vc,87:$Vd,88:$Ve},{8:[1,179],65:$VJ,66:$VK},{8:[1,180],65:$VJ,66:$VK},{41:[1,181]},{41:[1,182]},o($VD,[2,50],{11:100}),o($VD,$VU,{51:[1,183]}),{8:[2,61]},{8:[2,63],11:100,34:$Vw,35:$Vx,36:$Vy,37:$Vz,38:$VA,39:$VB},{8:[2,64]},o($VV,$VE,{51:[1,184]}),{11:100,34:$Vw,35:$Vx,36:$Vy,37:$Vz,38:$VA,39:$VB,52:[1,185]},{54:[1,186]},{54:[1,187]},{2:$V0,6:36,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:20,25:21,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,56:[1,188],58:$V7,74:$V8,81:$V9,82:$Va,84:$Vb,86:$Vc,87:$Vd,88:$Ve},o($VN,[2,104]),{24:189,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6},{10:$VW,43:191,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72,55:190},{26:[1,193]},{2:$V0,6:36,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:20,25:21,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,56:[1,194],58:$V7,74:$V8,81:$V9,82:$Va,84:$Vb,86:$Vc,87:$Vd,88:$Ve},{56:[1,195],76:196,77:197,78:$VS,80:$VT},{56:[1,198]},o($VX,[2,87]),{79:[1,199]},{10:$Vm,11:66,27:200,34:$Vn,35:$Vj,40:62,41:$Vo,43:64,44:65,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72},{2:$V0,6:36,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:20,25:21,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,56:[1,201],58:$V7,74:$V8,81:$V9,82:$Va,84:$Vb,86:$Vc,87:$Vd,88:$Ve},{9:204,10:$VY,25:21,83:202},{9:204,10:$VY,25:21,83:205},{10:$Vm,11:66,27:87,34:$Vn,35:$Vj,40:62,41:$Vo,43:64,44:65,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72,59:206,67:$Vv,68:86},{10:$Vm,11:66,27:87,34:$Vn,35:$Vj,40:62,41:$Vo,43:64,44:65,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72,59:207,67:$Vv,68:86},{10:$Vm,11:66,27:208,34:$Vn,35:$Vj,40:62,41:$Vo,43:64,44:65,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72},{10:$Vm,11:66,27:209,34:$Vn,35:$Vj,40:62,41:$Vo,43:64,44:65,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72},{26:$VZ},{2:$V0,4:211,6:3,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:20,25:21,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,58:$V7,74:$V8,81:$V9,82:$Va,84:$Vb,86:$Vc,87:$Vd,88:$Ve},{2:$V0,4:212,6:3,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:20,25:21,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,58:$V7,74:$V8,81:$V9,82:$Va,84:$Vb,86:$Vc,87:$Vd,88:$Ve},o($Vf,[2,107]),{51:[1,213]},{33:$V_,56:[1,214]},o($V$,[2,58]),o($V$,$VE),{53:[1,216],54:[1,217]},o($V01,[2,67],{60:218}),o($Vf,[2,83]),{56:[1,219]},o($VX,[2,86]),o($Vf,[2,85]),{2:$V0,4:220,6:3,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:20,25:21,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,58:$V7,74:$V8,81:$V9,82:$Va,84:$Vb,86:$Vc,87:$Vd,88:$Ve},{11:100,34:$Vw,35:$Vx,36:$Vy,37:$Vz,38:$VA,39:$VB,79:[1,221]},o($Vf,[2,90]),{42:[1,222]},o($Vg,$Vh,{11:223,34:$Vi,35:$Vj}),{42:[2,94]},{42:[1,224]},{42:[1,225],65:$VJ,66:$VK},{42:[1,226],65:$VJ,66:$VK},{11:100,34:$Vw,35:$Vx,36:$Vy,37:$Vz,38:$VA,39:$VB,52:[1,227]},{11:100,34:$Vw,35:$Vx,36:$Vy,37:$Vz,38:$VA,39:$VB,52:[1,228]},{10:$VR,11:66,13:162,27:161,34:$Vn,35:$Vj,40:62,41:$Vo,43:64,44:65,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72,57:229},{2:$V0,6:36,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:20,25:21,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,56:[1,230],58:$V7,74:$V8,81:$V9,82:$Va,84:$Vb,86:$Vc,87:$Vd,88:$Ve},{2:$V0,6:36,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:20,25:21,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,56:[1,231],58:$V7,74:$V8,81:$V9,82:$Va,84:$Vb,86:$Vc,87:$Vd,88:$Ve},{10:$Vm,11:66,27:232,34:$Vn,35:$Vj,40:62,41:$Vo,43:64,44:65,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72},{8:[2,55]},{10:$VW,43:233,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72},{24:234,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6},{54:[1,235]},o($Vf,[2,70],{61:236,62:237,63:[1,239],64:[1,238]}),o($Vf,[2,84]),{2:$V0,6:36,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:20,25:21,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,56:[2,89],58:$V7,74:$V8,81:$V9,82:$Va,84:$Vb,86:$Vc,87:$Vd,88:$Ve},{2:$V0,4:240,6:3,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:20,25:21,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,58:$V7,74:$V8,81:$V9,82:$Va,84:$Vb,86:$Vc,87:$Vd,88:$Ve},{54:[1,241]},{42:[2,93]},{54:[1,242]},{8:[2,95]},{8:[2,96]},o($VD,$V11),o($VV,$VU,{26:$VM,51:[1,243]}),{8:[2,62]},o($Vf,[2,101]),o($Vf,[2,106]),{11:100,34:$Vw,35:$Vx,36:$Vy,37:$Vz,38:$VA,39:$VB,52:[1,244]},o($V$,[2,57]),{51:[1,245]},{10:$VW,43:191,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72,55:246},o($Vf,[2,65]),o($V01,[2,66]),{54:[1,247]},{41:[1,248]},o($VX,[2,88],{7:4,9:5,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:20,25:21,6:36,2:$V0,10:$V1,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,58:$V7,74:$V8,81:$V9,82:$Va,84:$Vb,86:$Vc,87:$Vd,88:$Ve}),{2:$V0,4:249,6:3,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:20,25:21,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,58:$V7,74:$V8,81:$V9,82:$Va,84:$Vb,86:$Vc,87:$Vd,88:$Ve},{2:$V0,4:250,6:3,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:20,25:21,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,58:$V7,74:$V8,81:$V9,82:$Va,84:$Vb,86:$Vc,87:$Vd,88:$Ve},{10:$Vm,11:66,27:251,34:$Vn,35:$Vj,40:62,41:$Vo,43:64,44:65,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72},{8:[2,53]},{10:$Vm,11:66,27:252,34:$Vn,35:$Vj,40:62,41:$Vo,43:64,44:65,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72},{33:$V_,56:[1,253]},{2:$V0,4:254,6:3,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:20,25:21,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,58:$V7,74:$V8,81:$V9,82:$Va,84:$Vb,86:$Vc,87:$Vd,88:$Ve},{10:$Vm,11:66,27:87,34:$Vn,35:$Vj,40:62,41:$Vo,43:64,44:65,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72,59:255,67:$Vv,68:86},{2:$V0,6:36,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:20,25:21,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,56:[1,256],58:$V7,74:$V8,81:$V9,82:$Va,84:$Vb,86:$Vc,87:$Vd,88:$Ve},{2:$V0,6:36,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:20,25:21,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,56:[1,257],58:$V7,74:$V8,81:$V9,82:$Va,84:$Vb,86:$Vc,87:$Vd,88:$Ve},{11:100,34:$Vw,35:$Vx,36:$Vy,37:$Vz,38:$VA,39:$VB,52:[1,258]},{11:100,34:$Vw,35:$Vx,36:$Vy,37:$Vz,38:$VA,39:$VB,52:[1,259]},{33:[1,260]},{2:$V0,6:36,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:20,25:21,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,56:[1,261],58:$V7,74:$V8,81:$V9,82:$Va,84:$Vb,86:$Vc,87:$Vd,88:$Ve},{42:[1,262],65:$VJ,66:$VK},o($Vf,[2,91]),o($Vf,[2,92]),o($VV,$V11,{26:$VZ}),{51:[1,263]},{54:[1,264]},o($Vf,[2,69]),{54:[1,265]},{10:$Vm,11:66,27:266,34:$Vn,35:$Vj,40:62,41:$Vo,43:64,44:65,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72},{10:$VW,43:191,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:72,55:267},{2:$V0,4:268,6:3,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:20,25:21,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,58:$V7,74:$V8,81:$V9,82:$Va,84:$Vb,86:$Vc,87:$Vd,88:$Ve},{11:100,34:$Vw,35:$Vx,36:$Vy,37:$Vz,38:$VA,39:$VB,52:[1,269]},{33:$V_,56:[1,270]},{2:$V0,6:36,7:4,9:5,10:$V1,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:20,25:21,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,56:[1,271],58:$V7,74:$V8,81:$V9,82:$Va,84:$Vb,86:$Vc,87:$Vd,88:$Ve},{8:[2,54]},{56:[1,272]},o($V01,[2,68]),{8:[2,56]}],
defaultActions: {27:[2,97],28:[2,98],35:[2,1],160:[2,61],162:[2,64],204:[2,94],214:[2,55],223:[2,93],225:[2,95],226:[2,96],229:[2,62],244:[2,53],269:[2,54],272:[2,56]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  //Declarciones y tambien las importaciones
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip whitespace */
break;
case 2:/* skip whitespace */
break;
case 3:// comentario simple l√≠nea
break;
case 4:// comentario multiple l√≠neas
break;
case 5:return 45 
break;
case 6:return 46
break;
case 7:return 47
break;
case 8:return 48 
break;
case 9:return 50
break;
case 10:return 28
break;
case 11:return 29
break;
case 12:return 30
break;
case 13:return 31
break;
case 14:return 32
break;
case 15:return 35
break;
case 16:return 34
break;
case 17:return 36
break;
case 18:return 37
break;
case 19:return 38
break;
case 20:return 39
break;
case 21:return 70
break;
case 22:return 71
break;
case 23:return 'mayor_igual'
break;
case 24:return 'menor_igual'
break;
case 25:return 72
break;
case 26:return 73
break;
case 27:return 'qn_C'
break;
case 28:return 79
break;
case 29:return 65
break;
case 30:return 66
break;
case 31:return 67
break;
case 32:return 41
break;
case 33:return 42
break;
case 34:return 8
break;
case 35:return 54
break;
case 36:return 56
break;
case 37:return 51
break;
case 38:return 52
break;
case 39:return 53
break;
case 40:return 58
break;
case 41:return 64
break;
case 42:return 63
break;
case 43:return 74
break;
case 44:return 78
break;
case 45:return 80
break;
case 46:return 81
break;
case 47:return 84
break;
case 48:return 85
break;
case 49:return 82
break;
case 50:return 86
break;
case 51:return 87
break;
case 52:return 88
break;
case 53:return 91
break;
case 54:return 26
break;
case 55:return 10
break;
case 56:return 33
break;
case 57:return 5
break;
case 58: 
        console.error("Error lexico: " + yy_.yytext + " en la linea: " + yy_.yylloc.first_line + " columna: " + yy_.yylloc.first_column)
    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:(\/\/.+))/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:([0-9]+))/i,/^(?:(true|false\b))/i,/^(?:(('([a-zA-Z]|[!-[]|[\]-¬ø]|\\('|[n]|[t]|[r]|\\)|[ ])')))/i,/^(?:("[^\"]*"))/i,/^(?:\.)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:>)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:\{menor\})/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elif\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:until\b)/i,/^(?:for\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:=)/i,/^(?:(([a-zA-Z])([a-zA-Z]|[0-9]|_)*))/i,/^(?:,)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}