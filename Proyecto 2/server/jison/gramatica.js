/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,17],$V2=[1,41],$V3=[1,42],$V4=[1,43],$V5=[1,44],$V6=[1,45],$V7=[1,33],$V8=[1,34],$V9=[1,35],$Va=[1,36],$Vb=[1,37],$Vc=[1,38],$Vd=[1,39],$Ve=[1,40],$Vf=[1,28],$Vg=[1,29],$Vh=[1,30],$Vi=[2,5,10,21,38,39,40,41,42,74,90,94,96,97,98,100,102,103,104,109,110,121],$Vj=[35,43],$Vk=[2,37],$Vl=[1,63],$Vm=[1,62],$Vn=[1,76],$Vo=[1,78],$Vp=[1,99],$Vq=[1,85],$Vr=[1,87],$Vs=[1,100],$Vt=[1,101],$Vu=[1,102],$Vv=[1,103],$Vw=[1,105],$Vx=[1,106],$Vy=[1,107],$Vz=[1,108],$VA=[1,111],$VB=[1,109],$VC=[1,110],$VD=[21,52,68,71],$VE=[1,125],$VF=[13,35,43],$VG=[1,131],$VH=[1,143],$VI=[1,142],$VJ=[1,144],$VK=[1,145],$VL=[1,146],$VM=[1,147],$VN=[1,150],$VO=[13,43,44,45,46,47,48,49,52,69,81,82,86,87,88,89,95,122],$VP=[2,63],$VQ=[10,13,43,44,45,46,47,48,49,52,69,81,82,86,87,88,89,95,122],$VR=[1,154],$VS=[2,131],$VT=[43,52],$VU=[2,69],$VV=[13,52],$VW=[2,70],$VX=[81,82,122],$VY=[2,95],$VZ=[2,66],$V_=[1,180],$V$=[1,181],$V01=[1,182],$V11=[1,183],$V21=[1,185],$V31=[1,186],$V41=[13,52,81,82,122],$V51=[1,223],$V61=[21,44,45,51,62,63,64,65,111,112,113,115,116,117,118],$V71=[13,43,44,45,52,69,81,82,86,87,88,89,95,122],$V81=[13,43,44,45,46,47,52,69,81,82,86,87,88,89,95,122],$V91=[1,260],$Va1=[1,272],$Vb1=[1,271],$Vc1=[2,78],$Vd1=[13,44,45,46,47,48,49],$Ve1=[1,288],$Vf1=[10,94,96],$Vg1=[1,300],$Vh1=[1,309],$Vi1=[1,312],$Vj1=[10,43],$Vk1=[2,5,10,21,38,39,40,41,42,74,79,80,90,94,96,97,98,100,102,103,104,109,110,121],$Vl1=[2,79];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"INSTRUCTIONS":4,"EOF":5,"INSTRUCTION":6,"SINSCOPE":7,"CONTROL":8,"FUNC":9,"llaveC":10,"METHOD":11,"CALL":12,"ptcoma":13,"PRINT":14,"PRINTLN":15,"PUSH":16,"POP":17,"RUN":18,"STATEMENT":19,"ASSIGNMENT":20,"var_name":21,"INCDEC":22,"VECTOR":23,"VECTORMOD":24,"IF":25,"SWITCH":26,"WHILE":27,"FOR":28,"DOWHILE":29,"DOUNTIL":30,"TRANSFER":31,"RETURN":32,"TIPO":33,"ID":34,"igual":35,"EXPRESSION":36,"OPTERNARIO":37,"int":38,"double":39,"boolean":40,"char":41,"string":42,"coma":43,"menos":44,"mas":45,"multi":46,"div":47,"pot":48,"mod":49,"GETVALVECTOR":50,"parA":51,"parC":52,"EXP":53,"CASTING":54,"TOLOWER":55,"TOUPPER":56,"ROUND":57,"LENGTH":58,"TOSTRING":59,"TOCHARARRAY":60,"TYPEOF":61,"entero":62,"logico":63,"caracter":64,"cadena":65,"DECIMAL":66,"punto":67,"corA":68,"corC":69,"nuevo":70,"llaveA":71,"VECTORVAL":72,"VALVECTORMOD":73,"if":74,"CONDITION":75,"ANIDADO":76,"ELSE":77,"ELIF":78,"elif":79,"else":80,"or":81,"and":82,"not":83,"REL":84,"OP_REL":85,"mayor":86,"menor":87,"igual_a":88,"diferente":89,"switch":90,"CASELIST":91,"DEFAULT":92,"CASE":93,"case":94,"colon":95,"default":96,"while":97,"for":98,"ACTUALIZATION":99,"do":100,"until":101,"break":102,"continue":103,"retornar":104,"PARAMS":105,"PARAMETROS":106,"void":107,"PARAMSCALL":108,"print":109,"println":110,"tolower":111,"toupper":112,"round":113,"integer":114,"length":115,"typeof":116,"tostring":117,"tochararray":118,"push":119,"pop":120,"run":121,"qn_C":122,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"llaveC",13:"ptcoma",21:"var_name",35:"igual",38:"int",39:"double",40:"boolean",41:"char",42:"string",43:"coma",44:"menos",45:"mas",46:"multi",47:"div",48:"pot",49:"mod",51:"parA",52:"parC",62:"entero",63:"logico",64:"caracter",65:"cadena",67:"punto",68:"corA",69:"corC",70:"nuevo",71:"llaveA",74:"if",79:"elif",80:"else",81:"or",82:"and",83:"not",86:"mayor",87:"menor",88:"igual_a",89:"diferente",90:"switch",94:"case",95:"colon",96:"default",97:"while",98:"for",100:"do",101:"until",102:"break",103:"continue",104:"retornar",107:"void",109:"print",110:"println",111:"tolower",112:"toupper",113:"round",114:"integer",115:"length",116:"typeof",117:"tostring",118:"tochararray",119:"push",120:"pop",121:"run",122:"qn_C"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[7,2],[7,2],[7,3],[7,2],[7,2],[8,1],[8,1],[8,1],[8,1],[8,2],[8,2],[8,2],[8,2],[19,2],[19,4],[19,4],[33,1],[33,1],[33,1],[33,1],[33,1],[34,3],[34,1],[36,2],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,2],[36,1],[36,3],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[66,3],[20,3],[20,3],[54,4],[22,2],[22,2],[23,10],[23,15],[23,8],[23,16],[23,6],[72,3],[72,1],[50,4],[50,7],[24,6],[24,9],[73,1],[73,1],[25,9],[76,2],[76,0],[78,7],[77,4],[77,0],[75,3],[75,3],[75,2],[75,1],[84,3],[84,1],[85,1],[85,1],[85,2],[85,2],[85,1],[85,1],[26,7],[26,8],[26,7],[91,2],[91,1],[93,4],[92,3],[27,7],[28,11],[28,11],[99,2],[99,1],[29,8],[30,8],[31,1],[31,1],[32,2],[32,1],[9,8],[9,7],[106,1],[106,0],[105,4],[105,2],[11,8],[11,7],[11,6],[11,5],[12,4],[12,3],[108,3],[108,1],[14,4],[15,4],[55,4],[56,4],[57,4],[57,4],[58,4],[61,4],[59,4],[60,4],[16,6],[17,5],[18,2],[37,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log("Analisis terminado") 
break;
case 14:
 console.error('Error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ' columna: ' + this._$.first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,11:7,12:8,14:9,15:10,16:11,17:12,18:13,19:15,20:16,21:$V1,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:31,34:32,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6,74:$V7,90:$V8,97:$V9,98:$Va,100:$Vb,102:$Vc,103:$Vd,104:$Ve,109:$Vf,110:$Vg,121:$Vh},{1:[3]},{2:$V0,5:[1,46],6:47,7:4,8:5,9:6,11:7,12:8,14:9,15:10,16:11,17:12,18:13,19:15,20:16,21:$V1,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:31,34:32,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6,74:$V7,90:$V8,97:$V9,98:$Va,100:$Vb,102:$Vc,103:$Vd,104:$Ve,109:$Vf,110:$Vg,121:$Vh},o($Vi,[2,3]),o($Vi,[2,4]),o($Vi,[2,5]),{10:[1,48]},{10:[1,49]},{13:[1,50]},{13:[1,51]},{13:[1,52]},{13:[1,53]},{13:[1,54]},{13:[1,55]},o($Vi,[2,14]),{13:[1,56]},{13:[1,57]},o($Vj,$Vk,{22:58,44:$Vl,45:$Vm,51:[1,59],67:[1,60],68:[1,61]}),{13:[1,64]},{13:[1,65]},o($Vi,[2,20]),o($Vi,[2,21]),o($Vi,[2,22]),o($Vi,[2,23]),{13:[1,66]},{13:[1,67]},{13:[1,68]},{13:[1,69]},{51:[1,70]},{51:[1,71]},{12:72,21:[1,73]},{21:$Vn,34:74,68:[1,75]},{35:[1,77],43:$Vo},{51:[1,79]},{51:[1,80]},{51:[1,81]},{51:[1,82]},{71:[1,83]},{13:[2,116]},{13:[2,117]},{12:91,13:[2,119],21:$Vp,22:90,36:84,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($VD,[2,31]),o($VD,[2,32]),o($VD,[2,33]),o($VD,[2,34]),o($VD,[2,35]),{1:[2,1]},o($Vi,[2,2]),o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),o($Vi,[2,11]),o($Vi,[2,12]),o($Vi,[2,13]),o($Vi,[2,15]),o($Vi,[2,16]),{13:[1,112]},{12:91,21:$Vp,22:90,33:116,36:117,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6,44:$Vq,45:$Vm,50:86,51:$Vr,52:[1,114],53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,105:113,108:115,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{119:[1,118],120:[1,119]},{12:91,21:$Vp,22:90,36:120,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{45:[1,121]},{44:[1,122]},o($Vi,[2,18]),o($Vi,[2,19]),o($Vi,[2,24]),o($Vi,[2,25]),o($Vi,[2,26]),o($Vi,[2,27]),{12:91,21:$Vp,22:90,36:123,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{12:91,21:$Vp,22:90,36:124,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{13:[2,146]},{51:$VE},{13:[2,28],35:[1,126],43:$Vo},{69:[1,127]},o($VF,$Vk),{12:91,21:$Vp,22:90,36:128,37:129,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,75:130,83:$VG,84:132,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{21:[1,133]},{12:91,21:$Vp,22:90,36:135,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,75:134,83:$VG,84:132,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{12:91,21:$Vp,22:90,36:136,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{12:91,21:$Vp,22:90,36:135,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,75:137,83:$VG,84:132,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{19:138,20:139,21:$Vn,33:140,34:32,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6},{2:$V0,4:141,6:3,7:4,8:5,9:6,11:7,12:8,14:9,15:10,16:11,17:12,18:13,19:15,20:16,21:$V1,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:31,34:32,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6,74:$V7,90:$V8,97:$V9,98:$Va,100:$Vb,102:$Vc,103:$Vd,104:$Ve,109:$Vf,110:$Vg,121:$Vh},{13:[2,118],22:148,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM},{12:91,21:$Vp,22:90,36:149,44:$VN,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($VO,[2,46]),{12:91,21:$Vp,22:90,33:152,36:151,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($VO,[2,48]),o($VO,[2,49]),o($VO,[2,50]),o($VO,[2,51]),o($VO,[2,52]),o($VO,[2,53]),o($VO,[2,54]),o($VO,[2,55]),o($VO,[2,56]),o($VO,[2,57]),o($VO,[2,58]),o($VO,$VP,{51:$VE,68:[1,153]}),o($VQ,[2,59],{67:$VR}),o($VQ,[2,60]),o($VQ,[2,61]),o($VQ,[2,62]),o($VQ,[2,64]),{51:[1,155]},{51:[1,156]},{51:[1,157]},{51:[1,158]},{51:[1,159]},{51:[1,160]},{51:[1,161]},o($Vi,[2,17]),{43:[1,163],52:[1,162]},{13:$VS,71:[1,165],95:[1,164]},{43:[1,167],52:[1,166]},{21:[1,168]},o($VT,[2,133],{22:148,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM}),{51:[1,169]},{51:[1,170]},{22:148,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,69:[1,171]},o($VO,$VU),o($VV,$VW),{22:148,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,52:[1,172]},{22:148,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,52:[1,173]},{12:91,21:$Vp,22:90,36:117,44:$Vq,45:$Vm,50:86,51:$Vr,52:[1,174],53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,108:115,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{12:91,21:$Vp,22:90,36:175,37:176,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,75:130,83:$VG,84:132,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{21:[1,177],68:[1,178]},o($VX,$VY,{22:148,85:179,13:$VZ,52:$VZ,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,86:$V_,87:$V$,88:$V01,89:$V11}),o($VV,[2,67]),{81:$V21,82:$V31,122:[1,184]},{12:91,21:$Vp,22:90,36:135,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,75:187,83:$VG,84:132,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($V41,[2,93]),o($VF,[2,36]),{52:[1,188],81:$V21,82:$V31},o($V41,$VY,{22:148,85:179,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,86:$V_,87:$V$,88:$V01,89:$V11}),{22:148,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,52:[1,189]},{52:[1,190],81:$V21,82:$V31},{13:[1,191]},{13:[1,192]},{21:$Vn,34:74},{2:$V0,6:47,7:4,8:5,9:6,10:[1,193],11:7,12:8,14:9,15:10,16:11,17:12,18:13,19:15,20:16,21:$V1,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:31,34:32,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6,74:$V7,90:$V8,97:$V9,98:$Va,100:$Vb,102:$Vc,103:$Vd,104:$Ve,109:$Vf,110:$Vg,121:$Vh},{12:91,21:$Vp,22:90,36:194,44:$Vq,45:[1,195],50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{12:91,21:$Vp,22:90,36:196,44:$VN,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{12:91,21:$Vp,22:90,36:197,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{12:91,21:$Vp,22:90,36:198,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{12:91,21:$Vp,22:90,36:199,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{12:91,21:$Vp,22:90,36:200,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($VO,[2,45]),o($VO,[2,38],{22:148}),o($VO,$VW,{50:86,53:88,54:89,22:90,12:91,55:92,56:93,57:94,58:95,59:96,60:97,61:98,66:104,36:149,21:$Vp,51:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC}),{22:148,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,52:[1,201]},{52:[1,202]},{12:91,21:$Vp,22:90,36:203,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{62:[1,204]},{12:91,21:$Vp,22:90,36:205,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{12:91,21:$Vp,22:90,36:206,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{62:[1,209],66:208,114:[1,207]},{12:91,21:$Vp,22:90,36:210,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{12:91,21:$Vp,22:90,36:211,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{12:91,21:$Vp,22:90,36:212,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{12:91,21:$Vp,22:90,36:213,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{71:[1,215],95:[1,214]},{33:216,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6},{33:217,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6,107:[1,218]},{2:$V0,4:219,6:3,7:4,8:5,9:6,11:7,12:8,14:9,15:10,16:11,17:12,18:13,19:15,20:16,21:$V1,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:31,34:32,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6,74:$V7,90:$V8,97:$V9,98:$Va,100:$Vb,102:$Vc,103:$Vd,104:$Ve,109:$Vf,110:$Vg,121:$Vh},o($VO,[2,130]),{12:91,21:$Vp,22:90,36:220,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($VT,[2,125]),{12:91,21:$Vp,22:90,36:221,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{52:[1,222]},{35:$V51,68:[1,224]},{13:[2,134]},{13:[2,135]},o($VO,$VS),o($VX,$VY,{22:148,85:179,13:[2,29],44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,86:$V_,87:$V$,88:$V01,89:$V11}),{13:[2,30]},{35:[1,225]},{69:[1,226]},{12:91,21:$Vp,22:90,36:227,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($V61,[2,96],{35:[1,228]}),o($V61,[2,97],{35:[1,229]}),o($V61,[2,100]),o($V61,[2,101]),{12:91,21:$Vp,22:90,36:230,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{12:91,21:$Vp,22:90,36:135,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,75:231,83:$VG,84:132,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{12:91,21:$Vp,22:90,36:135,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,75:232,83:$VG,84:132,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($V41,[2,92]),{71:[1,233]},{71:[1,234]},{71:[1,235]},{12:91,21:$Vp,22:90,36:135,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,75:236,83:$VG,84:132,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{12:91,21:$Vp,22:90,36:135,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,75:237,83:$VG,84:132,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{97:[1,238],101:[1,239]},o($V71,[2,39],{22:148,46:$VJ,47:$VK,48:$VL,49:$VM}),o($VO,$VU),o($V71,[2,40],{22:148,46:$VJ,47:$VK,48:$VL,49:$VM}),o($V81,[2,41],{22:148,48:$VL,49:$VM}),o($V81,[2,42],{22:148,48:$VL,49:$VM}),o($VO,[2,43],{22:148}),o($VO,[2,44],{22:148}),o($VO,[2,47]),{12:91,21:$Vp,22:90,36:240,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{22:148,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,69:[1,241]},o($VQ,[2,65]),{22:148,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,52:[1,242]},{22:148,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,52:[1,243]},{52:[1,244]},{52:[1,245]},{67:$VR},{22:148,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,52:[1,246]},{22:148,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,52:[1,247]},{22:148,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,52:[1,248]},{22:148,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,52:[1,249]},{33:250,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6,107:[1,251]},{2:$V0,4:252,6:3,7:4,8:5,9:6,11:7,12:8,14:9,15:10,16:11,17:12,18:13,19:15,20:16,21:$V1,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:31,34:32,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6,74:$V7,90:$V8,97:$V9,98:$Va,100:$Vb,102:$Vc,103:$Vd,104:$Ve,109:$Vf,110:$Vg,121:$Vh},{21:[1,253]},{71:[1,254]},{71:[1,255]},{2:$V0,6:47,7:4,8:5,9:6,10:[2,129],11:7,12:8,14:9,15:10,16:11,17:12,18:13,19:15,20:16,21:$V1,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:31,34:32,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6,74:$V7,90:$V8,97:$V9,98:$Va,100:$Vb,102:$Vc,103:$Vd,104:$Ve,109:$Vf,110:$Vg,121:$Vh},o($VT,[2,132],{22:148,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM}),{22:148,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,52:[1,256]},{13:[2,145]},{12:91,21:$V91,22:90,24:259,36:258,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,73:257,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{12:91,21:$Vp,22:90,36:261,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{12:91,21:$Vp,22:90,36:264,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,70:[1,262],71:[1,263],111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{21:[1,265]},o($V41,[2,94],{22:148,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM}),o($V61,[2,98]),o($V61,[2,99]),{22:148,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,95:[1,266]},o([13,52,81,122],[2,90],{82:$V31}),o($V41,[2,91]),{2:$V0,4:267,6:3,7:4,8:5,9:6,11:7,12:8,14:9,15:10,16:11,17:12,18:13,19:15,20:16,21:$V1,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:31,34:32,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6,74:$V7,90:$V8,97:$V9,98:$Va,100:$Vb,102:$Vc,103:$Vd,104:$Ve,109:$Vf,110:$Vg,121:$Vh},{91:268,92:269,93:270,94:$Va1,96:$Vb1},{2:$V0,4:273,6:3,7:4,8:5,9:6,11:7,12:8,14:9,15:10,16:11,17:12,18:13,19:15,20:16,21:$V1,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:31,34:32,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6,74:$V7,90:$V8,97:$V9,98:$Va,100:$Vb,102:$Vc,103:$Vd,104:$Ve,109:$Vf,110:$Vg,121:$Vh},{13:[1,274],81:$V21,82:$V31},{13:[1,275],81:$V21,82:$V31},{51:[1,276]},{51:[1,277]},o($VO,[2,68],{22:148}),o($VO,$Vc1,{68:[1,278]}),o($VO,[2,136]),o($VO,[2,137]),o($VO,[2,138]),o($VO,[2,139]),o($VO,[2,140]),o($VO,[2,142]),o($VO,[2,143]),o($VO,[2,141]),{71:[1,279]},{71:[1,280]},{2:$V0,6:47,7:4,8:5,9:6,10:[2,128],11:7,12:8,14:9,15:10,16:11,17:12,18:13,19:15,20:16,21:$V1,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:31,34:32,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6,74:$V7,90:$V8,97:$V9,98:$Va,100:$Vb,102:$Vc,103:$Vd,104:$Ve,109:$Vf,110:$Vg,121:$Vh},o($VT,[2,124]),{2:$V0,4:281,6:3,7:4,8:5,9:6,11:7,12:8,14:9,15:10,16:11,17:12,18:13,19:15,20:16,21:$V1,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:31,34:32,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6,74:$V7,90:$V8,97:$V9,98:$Va,100:$Vb,102:$Vc,103:$Vd,104:$Ve,109:$Vf,110:$Vg,121:$Vh},{2:$V0,4:282,6:3,7:4,8:5,9:6,11:7,12:8,14:9,15:10,16:11,17:12,18:13,19:15,20:16,21:$V1,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:31,34:32,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6,74:$V7,90:$V8,97:$V9,98:$Va,100:$Vb,102:$Vc,103:$Vd,104:$Ve,109:$Vf,110:$Vg,121:$Vh},{13:[2,144]},{13:[2,80]},{13:[2,82],22:148,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM},{13:[2,83]},o($Vd1,$VP,{51:$VE,68:[1,283]}),{22:148,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,69:[1,284]},{33:285,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6},{21:$Ve1,53:287,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,72:286},{13:[2,75],22:148,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM},{35:[1,289]},{12:91,21:$Vp,22:90,36:290,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{2:$V0,6:47,7:4,8:5,9:6,10:[1,291],11:7,12:8,14:9,15:10,16:11,17:12,18:13,19:15,20:16,21:$V1,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:31,34:32,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6,74:$V7,90:$V8,97:$V9,98:$Va,100:$Vb,102:$Vc,103:$Vd,104:$Ve,109:$Vf,110:$Vg,121:$Vh},{10:[1,292],92:293,93:294,94:$Va1,96:$Vb1},{10:[1,295]},o($Vf1,[2,106]),{95:[1,296]},{12:91,21:$Vp,22:90,36:297,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{2:$V0,6:47,7:4,8:5,9:6,10:[1,298],11:7,12:8,14:9,15:10,16:11,17:12,18:13,19:15,20:16,21:$V1,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:31,34:32,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6,74:$V7,90:$V8,97:$V9,98:$Va,100:$Vb,102:$Vc,103:$Vd,104:$Ve,109:$Vf,110:$Vg,121:$Vh},{20:301,21:$Vg1,34:32,99:299},{20:301,21:$Vg1,34:32,99:302},{12:91,21:$Vp,22:90,36:135,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,75:303,83:$VG,84:132,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{12:91,21:$Vp,22:90,36:135,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,75:304,83:$VG,84:132,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{12:91,21:$Vp,22:90,36:305,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{2:$V0,4:306,6:3,7:4,8:5,9:6,11:7,12:8,14:9,15:10,16:11,17:12,18:13,19:15,20:16,21:$V1,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:31,34:32,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6,74:$V7,90:$V8,97:$V9,98:$Va,100:$Vb,102:$Vc,103:$Vd,104:$Ve,109:$Vf,110:$Vg,121:$Vh},{2:$V0,4:307,6:3,7:4,8:5,9:6,11:7,12:8,14:9,15:10,16:11,17:12,18:13,19:15,20:16,21:$V1,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:31,34:32,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6,74:$V7,90:$V8,97:$V9,98:$Va,100:$Vb,102:$Vc,103:$Vd,104:$Ve,109:$Vf,110:$Vg,121:$Vh},{2:$V0,6:47,7:4,8:5,9:6,10:[2,121],11:7,12:8,14:9,15:10,16:11,17:12,18:13,19:15,20:16,21:$V1,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:31,34:32,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6,74:$V7,90:$V8,97:$V9,98:$Va,100:$Vb,102:$Vc,103:$Vd,104:$Ve,109:$Vf,110:$Vg,121:$Vh},{2:$V0,6:47,7:4,8:5,9:6,10:[2,127],11:7,12:8,14:9,15:10,16:11,17:12,18:13,19:15,20:16,21:$V1,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:31,34:32,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6,74:$V7,90:$V8,97:$V9,98:$Va,100:$Vb,102:$Vc,103:$Vd,104:$Ve,109:$Vf,110:$Vg,121:$Vh},{12:91,21:$Vp,22:90,36:308,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{35:$Vh1},{68:[1,310]},{10:[1,311],43:$Vi1},o($Vj1,[2,77]),o($Vj1,$VP),{70:[1,313],71:[1,314]},o($VV,[2,147],{22:148,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM}),o($Vk1,[2,86],{76:315}),o($Vi,[2,102]),{10:[1,316]},o($Vf1,[2,105]),o($Vi,[2,104]),{2:$V0,4:317,6:3,7:4,8:5,9:6,11:7,12:8,14:9,15:10,16:11,17:12,18:13,19:15,20:16,21:$V1,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:31,34:32,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6,74:$V7,90:$V8,97:$V9,98:$Va,100:$Vb,102:$Vc,103:$Vd,104:$Ve,109:$Vf,110:$Vg,121:$Vh},{22:148,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,95:[1,318]},o($Vi,[2,109]),{52:[1,319]},o($Vj,$Vk,{22:320,44:$Vl,45:$Vm}),{52:[2,113]},{52:[1,321]},{52:[1,322],81:$V21,82:$V31},{52:[1,323],81:$V21,82:$V31},{22:148,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,69:[1,324]},{2:$V0,6:47,7:4,8:5,9:6,10:[2,120],11:7,12:8,14:9,15:10,16:11,17:12,18:13,19:15,20:16,21:$V1,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:31,34:32,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6,74:$V7,90:$V8,97:$V9,98:$Va,100:$Vb,102:$Vc,103:$Vd,104:$Ve,109:$Vf,110:$Vg,121:$Vh},{2:$V0,6:47,7:4,8:5,9:6,10:[2,126],11:7,12:8,14:9,15:10,16:11,17:12,18:13,19:15,20:16,21:$V1,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:31,34:32,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6,74:$V7,90:$V8,97:$V9,98:$Va,100:$Vb,102:$Vc,103:$Vd,104:$Ve,109:$Vf,110:$Vg,121:$Vh},{22:148,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,69:[1,325]},{12:91,21:$V91,22:90,24:259,36:258,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,73:326,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{12:91,21:$Vp,22:90,36:327,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{13:[2,73]},{21:$Ve1,53:328,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104},{33:329,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6},{71:[1,330]},o($Vi,[2,89],{77:331,78:332,79:[1,334],80:[1,333]}),o($Vi,[2,103]),{2:$V0,6:47,7:4,8:5,9:6,10:[2,108],11:7,12:8,14:9,15:10,16:11,17:12,18:13,19:15,20:16,21:$V1,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:31,34:32,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6,74:$V7,90:$V8,97:$V9,98:$Va,100:$Vb,102:$Vc,103:$Vd,104:$Ve,109:$Vf,110:$Vg,121:$Vh},{2:$V0,4:335,6:3,7:4,8:5,9:6,11:7,12:8,14:9,15:10,16:11,17:12,18:13,19:15,20:16,21:$V1,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:31,34:32,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6,74:$V7,90:$V8,97:$V9,98:$Va,100:$Vb,102:$Vc,103:$Vd,104:$Ve,109:$Vf,110:$Vg,121:$Vh},{71:[1,336]},{52:[2,112]},{71:[1,337]},{13:[2,114]},{13:[2,115]},o($VO,$Vl1),o($Vd1,$Vc1,{35:$V51,68:[1,338]}),{13:[2,81]},{22:148,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,69:[1,339]},o($Vj1,[2,76]),{68:[1,340]},{21:$Ve1,53:287,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,72:341},o($Vi,[2,84]),o($Vk1,[2,85]),{71:[1,342]},{51:[1,343]},o($Vf1,[2,107],{7:4,8:5,9:6,11:7,12:8,14:9,15:10,16:11,17:12,18:13,19:15,20:16,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:31,34:32,6:47,2:$V0,21:$V1,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6,74:$V7,90:$V8,97:$V9,98:$Va,100:$Vb,102:$Vc,103:$Vd,104:$Ve,109:$Vf,110:$Vg,121:$Vh}),{2:$V0,4:344,6:3,7:4,8:5,9:6,11:7,12:8,14:9,15:10,16:11,17:12,18:13,19:15,20:16,21:$V1,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:31,34:32,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6,74:$V7,90:$V8,97:$V9,98:$Va,100:$Vb,102:$Vc,103:$Vd,104:$Ve,109:$Vf,110:$Vg,121:$Vh},{2:$V0,4:345,6:3,7:4,8:5,9:6,11:7,12:8,14:9,15:10,16:11,17:12,18:13,19:15,20:16,21:$V1,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:31,34:32,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6,74:$V7,90:$V8,97:$V9,98:$Va,100:$Vb,102:$Vc,103:$Vd,104:$Ve,109:$Vf,110:$Vg,121:$Vh},{12:91,21:$Vp,22:90,36:346,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{13:[2,71]},{12:91,21:$Vp,22:90,36:347,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{10:[1,348],43:$Vi1},{2:$V0,4:349,6:3,7:4,8:5,9:6,11:7,12:8,14:9,15:10,16:11,17:12,18:13,19:15,20:16,21:$V1,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:31,34:32,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6,74:$V7,90:$V8,97:$V9,98:$Va,100:$Vb,102:$Vc,103:$Vd,104:$Ve,109:$Vf,110:$Vg,121:$Vh},{12:91,21:$Vp,22:90,36:135,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,75:350,83:$VG,84:132,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{2:$V0,6:47,7:4,8:5,9:6,10:[1,351],11:7,12:8,14:9,15:10,16:11,17:12,18:13,19:15,20:16,21:$V1,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:31,34:32,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6,74:$V7,90:$V8,97:$V9,98:$Va,100:$Vb,102:$Vc,103:$Vd,104:$Ve,109:$Vf,110:$Vg,121:$Vh},{2:$V0,6:47,7:4,8:5,9:6,10:[1,352],11:7,12:8,14:9,15:10,16:11,17:12,18:13,19:15,20:16,21:$V1,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:31,34:32,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6,74:$V7,90:$V8,97:$V9,98:$Va,100:$Vb,102:$Vc,103:$Vd,104:$Ve,109:$Vf,110:$Vg,121:$Vh},{22:148,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,69:[1,353]},{22:148,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,69:[1,354]},{43:[1,355]},{2:$V0,6:47,7:4,8:5,9:6,10:[1,356],11:7,12:8,14:9,15:10,16:11,17:12,18:13,19:15,20:16,21:$V1,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:31,34:32,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6,74:$V7,90:$V8,97:$V9,98:$Va,100:$Vb,102:$Vc,103:$Vd,104:$Ve,109:$Vf,110:$Vg,121:$Vh},{52:[1,357],81:$V21,82:$V31},o($Vi,[2,110]),o($Vi,[2,111]),o($Vd1,$Vl1,{35:$Vh1}),{68:[1,358]},{71:[1,359]},o($Vi,[2,88]),{71:[1,360]},{12:91,21:$Vp,22:90,36:361,44:$Vq,45:$Vm,50:86,51:$Vr,53:88,54:89,55:92,56:93,57:94,58:95,59:96,60:97,61:98,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,111:$Vw,112:$Vx,113:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{21:$Ve1,53:287,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:104,72:362},{2:$V0,4:363,6:3,7:4,8:5,9:6,11:7,12:8,14:9,15:10,16:11,17:12,18:13,19:15,20:16,21:$V1,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:31,34:32,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6,74:$V7,90:$V8,97:$V9,98:$Va,100:$Vb,102:$Vc,103:$Vd,104:$Ve,109:$Vf,110:$Vg,121:$Vh},{22:148,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,69:[1,364]},{10:[1,365],43:$Vi1},{2:$V0,6:47,7:4,8:5,9:6,10:[1,366],11:7,12:8,14:9,15:10,16:11,17:12,18:13,19:15,20:16,21:$V1,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:31,34:32,38:$V2,39:$V3,40:$V4,41:$V5,42:$V6,74:$V7,90:$V8,97:$V9,98:$Va,100:$Vb,102:$Vc,103:$Vd,104:$Ve,109:$Vf,110:$Vg,121:$Vh},{13:[2,72]},{10:[1,367]},o($Vk1,[2,87]),{13:[2,74]}],
defaultActions: {38:[2,116],39:[2,117],46:[2,1],72:[2,146],172:[2,134],173:[2,135],176:[2,30],222:[2,145],256:[2,144],257:[2,80],259:[2,83],301:[2,113],311:[2,73],320:[2,112],322:[2,114],323:[2,115],326:[2,81],339:[2,71],364:[2,72],367:[2,74]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  //Declarciones y tambien las importaciones
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip whitespace */
break;
case 2:/* skip whitespace */
break;
case 3:// comentario simple l√≠nea
break;
case 4:// comentario multiple l√≠neas
break;
case 5:return 62 
break;
case 6:return 63
break;
case 7:return 64
break;
case 8:return 65 
break;
case 9:return 67
break;
case 10:return 38
break;
case 11:return 39
break;
case 12:return 40
break;
case 13:return 41
break;
case 14:return 42
break;
case 15:return 45
break;
case 16:return 44
break;
case 17:return 46
break;
case 18:return 47
break;
case 19:return 48
break;
case 20:return 49
break;
case 21:return 86
break;
case 22:return 87
break;
case 23:return 'mayor_igual'
break;
case 24:return 'menor_igual'
break;
case 25:return 88
break;
case 26:return 89
break;
case 27:return 122
break;
case 28:return 95
break;
case 29:return 81
break;
case 30:return 82
break;
case 31:return 83
break;
case 32:return 51
break;
case 33:return 52
break;
case 34:return 13
break;
case 35:return 71
break;
case 36:return 10
break;
case 37:return 68
break;
case 38:return 69
break;
case 39:return 70
break;
case 40:return 74
break;
case 41:return 80
break;
case 42:return 79
break;
case 43:return 90
break;
case 44:return 94
break;
case 45:return 96
break;
case 46:return 97
break;
case 47:return 100
break;
case 48:return 101
break;
case 49:return 98
break;
case 50:return 102
break;
case 51:return 103
break;
case 52:return 104
break;
case 53:return 107
break;
case 54:return 109
break;
case 55:return 110
break;
case 56:return 111
break;
case 57:return 112
break;
case 58:return 113
break;
case 59:return 115
break;
case 60:return 116
break;
case 61:return 117
break;
case 62:return 118
break;
case 63:return 119
break;
case 64:return 120
break;
case 65:return 121
break;
case 66:return 35
break;
case 67:return 21
break;
case 68:return 43
break;
case 69:return 5
break;
case 70: 
        console.error("Error lexico: " + yy_.yytext + " en la linea: " + yy_.yylloc.first_line + " columna: " + yy_.yylloc.first_column)
    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:(\/\/.+))/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:([0-9]+))/i,/^(?:(true|false\b))/i,/^(?:(('([a-zA-Z]|[!-[]|[\]-¬ø]|\\('|[n]|[t]|[r]|\\)|[ ])')))/i,/^(?:("[^\"]*"))/i,/^(?:\.)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:>)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:\{menor\})/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elif\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:until\b)/i,/^(?:for\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:run\b)/i,/^(?:=)/i,/^(?:(([a-zA-Z])([a-zA-Z]|[0-9]|_)*))/i,/^(?:,)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}