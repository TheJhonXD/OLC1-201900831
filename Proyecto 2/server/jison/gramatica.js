/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,14],$V2=[1,37],$V3=[1,38],$V4=[1,39],$V5=[1,40],$V6=[1,41],$V7=[1,29],$V8=[1,30],$V9=[1,31],$Va=[1,32],$Vb=[1,33],$Vc=[1,34],$Vd=[1,35],$Ve=[1,36],$Vf=[1,25],$Vg=[1,26],$Vh=[2,5,10,18,35,36,37,38,39,64,80,84,86,87,88,90,92,93,94,99,100],$Vi=[33,40],$Vj=[2,35],$Vk=[1,55],$Vl=[1,54],$Vm=[1,66],$Vn=[1,68],$Vo=[1,82],$Vp=[1,75],$Vq=[1,77],$Vr=[1,83],$Vs=[1,84],$Vt=[1,85],$Vu=[1,86],$Vv=[18,49,58,61],$Vw=[13,33,40],$Vx=[1,104],$Vy=[1,114],$Vz=[1,113],$VA=[1,115],$VB=[1,116],$VC=[1,117],$VD=[1,118],$VE=[1,121],$VF=[13,40,41,42,43,44,45,46,49,59,71,72,76,77,78,79,85],$VG=[2,54],$VH=[1,125],$VI=[10,13,40,41,42,43,44,45,46,49,59,71,72,76,77,78,79,85],$VJ=[2,120],$VK=[40,49],$VL=[2,59],$VM=[13,49],$VN=[2,60],$VO=[1,141],$VP=[1,142],$VQ=[13,49,71,72],$VR=[1,173],$VS=[18,41,42,48,52,53,54,55],$VT=[13,40,41,42,49,59,71,72,76,77,78,79,85],$VU=[13,40,41,42,43,44,49,59,71,72,76,77,78,79,85],$VV=[1,200],$VW=[1,210],$VX=[1,209],$VY=[2,67],$VZ=[13,41,42,43,44,45,46],$V_=[1,226],$V$=[10,84,86],$V01=[1,237],$V11=[1,246],$V21=[1,249],$V31=[10,40],$V41=[2,5,10,18,35,36,37,38,39,64,69,70,80,84,86,87,88,90,92,93,94,99,100],$V51=[2,68];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"INSTRUCTIONS":4,"EOF":5,"INSTRUCTION":6,"SINSCOPE":7,"CONTROL":8,"FUNC":9,"llaveC":10,"METHOD":11,"CALL":12,"ptcoma":13,"PRINT":14,"PRINTLN":15,"STATEMENT":16,"ASSIGNMENT":17,"var_name":18,"INCDEC":19,"VECTOR":20,"VECTORMOD":21,"IF":22,"SWITCH":23,"WHILE":24,"FOR":25,"DOWHILE":26,"DOUNTIL":27,"TRANSFER":28,"RETURN":29,"CONSCOPE":30,"TIPO":31,"ID":32,"igual":33,"EXPRESSION":34,"int":35,"double":36,"boolean":37,"char":38,"string":39,"coma":40,"menos":41,"mas":42,"multi":43,"div":44,"pot":45,"mod":46,"GETVALVECTOR":47,"parA":48,"parC":49,"EXP":50,"CASTING":51,"entero":52,"logico":53,"caracter":54,"cadena":55,"DECIMAL":56,"punto":57,"corA":58,"corC":59,"nuevo":60,"llaveA":61,"VECTORVAL":62,"VALVECTORMOD":63,"if":64,"CONDITION":65,"ANIDADO":66,"ELSE":67,"ELIF":68,"elif":69,"else":70,"or":71,"and":72,"not":73,"REL":74,"OP_REL":75,"mayor":76,"menor":77,"igual_a":78,"diferente":79,"switch":80,"CASELIST":81,"DEFAULT":82,"CASE":83,"case":84,"colon":85,"default":86,"while":87,"for":88,"ACTUALIZATION":89,"do":90,"until":91,"break":92,"continue":93,"retornar":94,"PARAMS":95,"PARAMETROS":96,"void":97,"PARAMSCALL":98,"print":99,"println":100,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"llaveC",13:"ptcoma",18:"var_name",33:"igual",35:"int",36:"double",37:"boolean",38:"char",39:"string",40:"coma",41:"menos",42:"mas",43:"multi",44:"div",45:"pot",46:"mod",48:"parA",49:"parC",52:"entero",53:"logico",54:"caracter",55:"cadena",57:"punto",58:"corA",59:"corC",60:"nuevo",61:"llaveA",64:"if",69:"elif",70:"else",71:"or",72:"and",73:"not",76:"mayor",77:"menor",78:"igual_a",79:"diferente",80:"switch",84:"case",85:"colon",86:"default",87:"while",88:"for",90:"do",91:"until",92:"break",93:"continue",94:"retornar",97:"void",99:"print",100:"println"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[7,2],[7,2],[7,3],[7,2],[7,2],[8,1],[8,1],[8,1],[8,1],[8,2],[8,2],[8,2],[8,2],[30,1],[30,1],[16,2],[16,4],[31,1],[31,1],[31,1],[31,1],[31,1],[32,3],[32,1],[34,2],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,2],[34,1],[34,3],[34,1],[34,1],[34,1],[34,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[56,3],[17,3],[51,4],[19,2],[19,2],[20,10],[20,15],[20,8],[20,16],[62,3],[62,1],[47,4],[47,7],[21,6],[21,9],[63,1],[63,1],[22,9],[66,2],[66,0],[68,7],[67,4],[67,0],[65,3],[65,3],[65,2],[65,1],[74,3],[74,1],[75,1],[75,1],[75,2],[75,2],[75,1],[75,1],[23,7],[23,8],[23,7],[81,2],[81,1],[83,4],[82,3],[24,7],[25,11],[25,11],[89,2],[89,1],[26,8],[27,8],[28,1],[28,1],[29,2],[29,1],[9,8],[9,7],[96,1],[96,0],[95,4],[95,2],[11,8],[11,7],[11,6],[11,5],[12,4],[12,3],[98,3],[98,1],[14,4],[15,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log("Analisis terminado") 
break;
case 11:
 console.error('Error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ' columna: ' + this._$.first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,11:7,12:8,14:9,15:10,16:12,17:13,18:$V1,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,31:27,32:28,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,64:$V7,80:$V8,87:$V9,88:$Va,90:$Vb,92:$Vc,93:$Vd,94:$Ve,99:$Vf,100:$Vg},{1:[3]},{2:$V0,5:[1,42],6:43,7:4,8:5,9:6,11:7,12:8,14:9,15:10,16:12,17:13,18:$V1,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,31:27,32:28,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,64:$V7,80:$V8,87:$V9,88:$Va,90:$Vb,92:$Vc,93:$Vd,94:$Ve,99:$Vf,100:$Vg},o($Vh,[2,3]),o($Vh,[2,4]),o($Vh,[2,5]),{10:[1,44]},{10:[1,45]},{13:[1,46]},{13:[1,47]},{13:[1,48]},o($Vh,[2,11]),{13:[1,49]},{13:[1,50]},o($Vi,$Vj,{19:51,41:$Vk,42:$Vl,48:[1,52],58:[1,53]}),{13:[1,56]},{13:[1,57]},o($Vh,[2,17]),o($Vh,[2,18]),o($Vh,[2,19]),o($Vh,[2,20]),{13:[1,58]},{13:[1,59]},{13:[1,60]},{13:[1,61]},{48:[1,62]},{48:[1,63]},{18:$Vm,32:64,58:[1,65]},{33:[1,67],40:$Vn},{48:[1,69]},{48:[1,70]},{48:[1,71]},{48:[1,72]},{61:[1,73]},{13:[2,105]},{13:[2,106]},{12:81,13:[2,108],18:$Vo,19:80,34:74,41:$Vp,42:$Vl,47:76,48:$Vq,50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87},o($Vv,[2,29]),o($Vv,[2,30]),o($Vv,[2,31]),o($Vv,[2,32]),o($Vv,[2,33]),{1:[2,1]},o($Vh,[2,2]),o($Vh,[2,6]),o($Vh,[2,7]),o($Vh,[2,8]),o($Vh,[2,9]),o($Vh,[2,10]),o($Vh,[2,12]),o($Vh,[2,13]),{13:[1,88]},{12:81,18:$Vo,19:80,31:92,34:93,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,41:$Vp,42:$Vl,47:76,48:$Vq,49:[1,90],50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87,95:89,98:91},{12:81,18:$Vo,19:80,34:94,41:$Vp,42:$Vl,47:76,48:$Vq,50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87},{42:[1,95]},{41:[1,96]},o($Vh,[2,15]),o($Vh,[2,16]),o($Vh,[2,21]),o($Vh,[2,22]),o($Vh,[2,23]),o($Vh,[2,24]),{12:81,18:$Vo,19:80,34:97,41:$Vp,42:$Vl,47:76,48:$Vq,50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87},{12:81,18:$Vo,19:80,34:98,41:$Vp,42:$Vl,47:76,48:$Vq,50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87},{13:[2,27],33:[1,99],40:$Vn},{59:[1,100]},o($Vw,$Vj),{12:81,18:$Vo,19:80,34:101,41:$Vp,42:$Vl,47:76,48:$Vq,50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87},{18:[1,102]},{12:81,18:$Vo,19:80,34:106,41:$Vp,42:$Vl,47:76,48:$Vq,50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87,65:103,73:$Vx,74:105},{12:81,18:$Vo,19:80,34:107,41:$Vp,42:$Vl,47:76,48:$Vq,50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87},{12:81,18:$Vo,19:80,34:106,41:$Vp,42:$Vl,47:76,48:$Vq,50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87,65:108,73:$Vx,74:105},{16:109,17:110,18:$Vm,31:111,32:28,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6},{2:$V0,4:112,6:3,7:4,8:5,9:6,11:7,12:8,14:9,15:10,16:12,17:13,18:$V1,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,31:27,32:28,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,64:$V7,80:$V8,87:$V9,88:$Va,90:$Vb,92:$Vc,93:$Vd,94:$Ve,99:$Vf,100:$Vg},{13:[2,107],19:119,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD},{12:81,18:$Vo,19:80,34:120,41:$VE,42:$Vl,47:76,48:$Vq,50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87},o($VF,[2,44]),{12:81,18:$Vo,19:80,31:123,34:122,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,41:$Vp,42:$Vl,47:76,48:$Vq,50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87},o($VF,[2,46]),o($VF,[2,47]),o($VF,[2,48]),o($VF,[2,49]),o($VF,$VG,{48:$VH,58:[1,124]}),o($VI,[2,50],{57:[1,126]}),o($VI,[2,51]),o($VI,[2,52]),o($VI,[2,53]),o($VI,[2,55]),o($Vh,[2,14]),{40:[1,128],49:[1,127]},{13:$VJ,61:[1,130],85:[1,129]},{40:[1,132],49:[1,131]},{18:[1,133]},o($VK,[2,122],{19:119,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD}),{19:119,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,59:[1,134]},o($VF,$VL),o($VM,$VN),{19:119,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,49:[1,135]},{19:119,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,49:[1,136]},{12:81,18:$Vo,19:80,34:137,41:$Vp,42:$Vl,47:76,48:$Vq,50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87},{18:[1,138],58:[1,139]},o($VM,[2,57],{19:119,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD}),o($Vw,[2,34]),{49:[1,140],71:$VO,72:$VP},{12:81,18:$Vo,19:80,34:106,41:$Vp,42:$Vl,47:76,48:$Vq,50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87,65:143,73:$Vx,74:105},o($VQ,[2,82]),o($VQ,[2,84],{19:119,75:144,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,76:[1,145],77:[1,146],78:[1,147],79:[1,148]}),{19:119,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,49:[1,149]},{49:[1,150],71:$VO,72:$VP},{13:[1,151]},{13:[1,152]},{18:$Vm,32:64},{2:$V0,6:43,7:4,8:5,9:6,10:[1,153],11:7,12:8,14:9,15:10,16:12,17:13,18:$V1,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,31:27,32:28,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,64:$V7,80:$V8,87:$V9,88:$Va,90:$Vb,92:$Vc,93:$Vd,94:$Ve,99:$Vf,100:$Vg},{12:81,18:$Vo,19:80,34:154,41:$Vp,42:[1,155],47:76,48:$Vq,50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87},{12:81,18:$Vo,19:80,34:156,41:$VE,42:$Vl,47:76,48:$Vq,50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87},{12:81,18:$Vo,19:80,34:157,41:$Vp,42:$Vl,47:76,48:$Vq,50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87},{12:81,18:$Vo,19:80,34:158,41:$Vp,42:$Vl,47:76,48:$Vq,50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87},{12:81,18:$Vo,19:80,34:159,41:$Vp,42:$Vl,47:76,48:$Vq,50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87},{12:81,18:$Vo,19:80,34:160,41:$Vp,42:$Vl,47:76,48:$Vq,50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87},o($VF,[2,43]),o($VF,[2,36],{19:119}),o($VF,$VN,{47:76,50:78,51:79,19:80,12:81,56:87,34:120,18:$Vo,48:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu}),{19:119,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,49:[1,161]},{49:[1,162]},{12:81,18:$Vo,19:80,34:163,41:$Vp,42:$Vl,47:76,48:$Vq,50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87},{12:81,18:$Vo,19:80,34:93,41:$Vp,42:$Vl,47:76,48:$Vq,49:[1,164],50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87,98:91},{52:[1,165]},{61:[1,167],85:[1,166]},{31:168,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6},{31:169,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,97:[1,170]},{2:$V0,4:171,6:3,7:4,8:5,9:6,11:7,12:8,14:9,15:10,16:12,17:13,18:$V1,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,31:27,32:28,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,64:$V7,80:$V8,87:$V9,88:$Va,90:$Vb,92:$Vc,93:$Vd,94:$Ve,99:$Vf,100:$Vg},o($VF,[2,119]),{12:81,18:$Vo,19:80,34:172,41:$Vp,42:$Vl,47:76,48:$Vq,50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87},o($VK,[2,114]),{33:$VR,58:[1,174]},{13:[2,123]},{13:[2,124]},{13:[2,28],19:119,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD},{33:[1,175]},{59:[1,176]},{61:[1,177]},{12:81,18:$Vo,19:80,34:106,41:$Vp,42:$Vl,47:76,48:$Vq,50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87,65:178,73:$Vx,74:105},{12:81,18:$Vo,19:80,34:106,41:$Vp,42:$Vl,47:76,48:$Vq,50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87,65:179,73:$Vx,74:105},o($VQ,[2,81]),{12:81,18:$Vo,19:80,34:180,41:$Vp,42:$Vl,47:76,48:$Vq,50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87},o($VS,[2,85],{33:[1,181]}),o($VS,[2,86],{33:[1,182]}),o($VS,[2,89]),o($VS,[2,90]),{61:[1,183]},{61:[1,184]},{12:81,18:$Vo,19:80,34:106,41:$Vp,42:$Vl,47:76,48:$Vq,50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87,65:185,73:$Vx,74:105},{12:81,18:$Vo,19:80,34:106,41:$Vp,42:$Vl,47:76,48:$Vq,50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87,65:186,73:$Vx,74:105},{87:[1,187],91:[1,188]},o($VT,[2,37],{19:119,43:$VA,44:$VB,45:$VC,46:$VD}),o($VF,$VL),o($VT,[2,38],{19:119,43:$VA,44:$VB,45:$VC,46:$VD}),o($VU,[2,39],{19:119,45:$VC,46:$VD}),o($VU,[2,40],{19:119,45:$VC,46:$VD}),o($VF,[2,41],{19:119}),o($VF,[2,42],{19:119}),o($VF,[2,45]),{12:81,18:$Vo,19:80,34:189,41:$Vp,42:$Vl,47:76,48:$Vq,50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87},{19:119,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,59:[1,190]},o($VF,$VJ),o($VI,[2,56]),{31:191,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,97:[1,192]},{2:$V0,4:193,6:3,7:4,8:5,9:6,11:7,12:8,14:9,15:10,16:12,17:13,18:$V1,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,31:27,32:28,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,64:$V7,80:$V8,87:$V9,88:$Va,90:$Vb,92:$Vc,93:$Vd,94:$Ve,99:$Vf,100:$Vg},{18:[1,194]},{61:[1,195]},{61:[1,196]},{2:$V0,6:43,7:4,8:5,9:6,10:[2,118],11:7,12:8,14:9,15:10,16:12,17:13,18:$V1,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,31:27,32:28,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,64:$V7,80:$V8,87:$V9,88:$Va,90:$Vb,92:$Vc,93:$Vd,94:$Ve,99:$Vf,100:$Vg},o($VK,[2,121],{19:119,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD}),{12:81,18:$VV,19:80,21:199,34:198,41:$Vp,42:$Vl,47:76,48:$Vq,50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87,63:197},{12:81,18:$Vo,19:80,34:201,41:$Vp,42:$Vl,47:76,48:$Vq,50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87},{60:[1,202],61:[1,203]},{18:[1,204]},{2:$V0,4:205,6:3,7:4,8:5,9:6,11:7,12:8,14:9,15:10,16:12,17:13,18:$V1,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,31:27,32:28,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,64:$V7,80:$V8,87:$V9,88:$Va,90:$Vb,92:$Vc,93:$Vd,94:$Ve,99:$Vf,100:$Vg},o([13,49,71],[2,79],{72:$VP}),o($VQ,[2,80]),o($VQ,[2,83],{19:119,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD}),o($VS,[2,87]),o($VS,[2,88]),{81:206,82:207,83:208,84:$VW,86:$VX},{2:$V0,4:211,6:3,7:4,8:5,9:6,11:7,12:8,14:9,15:10,16:12,17:13,18:$V1,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,31:27,32:28,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,64:$V7,80:$V8,87:$V9,88:$Va,90:$Vb,92:$Vc,93:$Vd,94:$Ve,99:$Vf,100:$Vg},{13:[1,212],71:$VO,72:$VP},{13:[1,213],71:$VO,72:$VP},{48:[1,214]},{48:[1,215]},o($VF,[2,58],{19:119}),o($VF,$VY,{58:[1,216]}),{61:[1,217]},{61:[1,218]},{2:$V0,6:43,7:4,8:5,9:6,10:[2,117],11:7,12:8,14:9,15:10,16:12,17:13,18:$V1,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,31:27,32:28,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,64:$V7,80:$V8,87:$V9,88:$Va,90:$Vb,92:$Vc,93:$Vd,94:$Ve,99:$Vf,100:$Vg},o($VK,[2,113]),{2:$V0,4:219,6:3,7:4,8:5,9:6,11:7,12:8,14:9,15:10,16:12,17:13,18:$V1,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,31:27,32:28,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,64:$V7,80:$V8,87:$V9,88:$Va,90:$Vb,92:$Vc,93:$Vd,94:$Ve,99:$Vf,100:$Vg},{2:$V0,4:220,6:3,7:4,8:5,9:6,11:7,12:8,14:9,15:10,16:12,17:13,18:$V1,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,31:27,32:28,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,64:$V7,80:$V8,87:$V9,88:$Va,90:$Vb,92:$Vc,93:$Vd,94:$Ve,99:$Vf,100:$Vg},{13:[2,69]},{13:[2,71],19:119,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD},{13:[2,72]},o($VZ,$VG,{48:$VH,58:[1,221]}),{19:119,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,59:[1,222]},{31:223,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6},{18:$V_,50:225,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87,62:224},{33:[1,227]},{2:$V0,6:43,7:4,8:5,9:6,10:[1,228],11:7,12:8,14:9,15:10,16:12,17:13,18:$V1,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,31:27,32:28,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,64:$V7,80:$V8,87:$V9,88:$Va,90:$Vb,92:$Vc,93:$Vd,94:$Ve,99:$Vf,100:$Vg},{10:[1,229],82:230,83:231,84:$VW,86:$VX},{10:[1,232]},o($V$,[2,95]),{85:[1,233]},{12:81,18:$Vo,19:80,34:234,41:$Vp,42:$Vl,47:76,48:$Vq,50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87},{2:$V0,6:43,7:4,8:5,9:6,10:[1,235],11:7,12:8,14:9,15:10,16:12,17:13,18:$V1,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,31:27,32:28,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,64:$V7,80:$V8,87:$V9,88:$Va,90:$Vb,92:$Vc,93:$Vd,94:$Ve,99:$Vf,100:$Vg},{17:238,18:$V01,32:28,89:236},{17:238,18:$V01,32:28,89:239},{12:81,18:$Vo,19:80,34:106,41:$Vp,42:$Vl,47:76,48:$Vq,50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87,65:240,73:$Vx,74:105},{12:81,18:$Vo,19:80,34:106,41:$Vp,42:$Vl,47:76,48:$Vq,50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87,65:241,73:$Vx,74:105},{12:81,18:$Vo,19:80,34:242,41:$Vp,42:$Vl,47:76,48:$Vq,50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87},{2:$V0,4:243,6:3,7:4,8:5,9:6,11:7,12:8,14:9,15:10,16:12,17:13,18:$V1,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,31:27,32:28,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,64:$V7,80:$V8,87:$V9,88:$Va,90:$Vb,92:$Vc,93:$Vd,94:$Ve,99:$Vf,100:$Vg},{2:$V0,4:244,6:3,7:4,8:5,9:6,11:7,12:8,14:9,15:10,16:12,17:13,18:$V1,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,31:27,32:28,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,64:$V7,80:$V8,87:$V9,88:$Va,90:$Vb,92:$Vc,93:$Vd,94:$Ve,99:$Vf,100:$Vg},{2:$V0,6:43,7:4,8:5,9:6,10:[2,110],11:7,12:8,14:9,15:10,16:12,17:13,18:$V1,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,31:27,32:28,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,64:$V7,80:$V8,87:$V9,88:$Va,90:$Vb,92:$Vc,93:$Vd,94:$Ve,99:$Vf,100:$Vg},{2:$V0,6:43,7:4,8:5,9:6,10:[2,116],11:7,12:8,14:9,15:10,16:12,17:13,18:$V1,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,31:27,32:28,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,64:$V7,80:$V8,87:$V9,88:$Va,90:$Vb,92:$Vc,93:$Vd,94:$Ve,99:$Vf,100:$Vg},{12:81,18:$Vo,19:80,34:245,41:$Vp,42:$Vl,47:76,48:$Vq,50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87},{33:$V11},{58:[1,247]},{10:[1,248],40:$V21},o($V31,[2,66]),o($V31,$VG),{60:[1,250],61:[1,251]},o($V41,[2,75],{66:252}),o($Vh,[2,91]),{10:[1,253]},o($V$,[2,94]),o($Vh,[2,93]),{2:$V0,4:254,6:3,7:4,8:5,9:6,11:7,12:8,14:9,15:10,16:12,17:13,18:$V1,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,31:27,32:28,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,64:$V7,80:$V8,87:$V9,88:$Va,90:$Vb,92:$Vc,93:$Vd,94:$Ve,99:$Vf,100:$Vg},{19:119,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,85:[1,255]},o($Vh,[2,98]),{49:[1,256]},o($Vi,$Vj,{19:257,41:$Vk,42:$Vl}),{49:[2,102]},{49:[1,258]},{49:[1,259],71:$VO,72:$VP},{49:[1,260],71:$VO,72:$VP},{19:119,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,59:[1,261]},{2:$V0,6:43,7:4,8:5,9:6,10:[2,109],11:7,12:8,14:9,15:10,16:12,17:13,18:$V1,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,31:27,32:28,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,64:$V7,80:$V8,87:$V9,88:$Va,90:$Vb,92:$Vc,93:$Vd,94:$Ve,99:$Vf,100:$Vg},{2:$V0,6:43,7:4,8:5,9:6,10:[2,115],11:7,12:8,14:9,15:10,16:12,17:13,18:$V1,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,31:27,32:28,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,64:$V7,80:$V8,87:$V9,88:$Va,90:$Vb,92:$Vc,93:$Vd,94:$Ve,99:$Vf,100:$Vg},{19:119,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,59:[1,262]},{12:81,18:$VV,19:80,21:199,34:198,41:$Vp,42:$Vl,47:76,48:$Vq,50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87,63:263},{12:81,18:$Vo,19:80,34:264,41:$Vp,42:$Vl,47:76,48:$Vq,50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87},{13:[2,63]},{18:$V_,50:265,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87},{31:266,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6},{61:[1,267]},o($Vh,[2,78],{67:268,68:269,69:[1,271],70:[1,270]}),o($Vh,[2,92]),{2:$V0,6:43,7:4,8:5,9:6,10:[2,97],11:7,12:8,14:9,15:10,16:12,17:13,18:$V1,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,31:27,32:28,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,64:$V7,80:$V8,87:$V9,88:$Va,90:$Vb,92:$Vc,93:$Vd,94:$Ve,99:$Vf,100:$Vg},{2:$V0,4:272,6:3,7:4,8:5,9:6,11:7,12:8,14:9,15:10,16:12,17:13,18:$V1,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,31:27,32:28,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,64:$V7,80:$V8,87:$V9,88:$Va,90:$Vb,92:$Vc,93:$Vd,94:$Ve,99:$Vf,100:$Vg},{61:[1,273]},{49:[2,101]},{61:[1,274]},{13:[2,103]},{13:[2,104]},o($VF,$V51),o($VZ,$VY,{33:$VR,58:[1,275]}),{13:[2,70]},{19:119,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,59:[1,276]},o($V31,[2,65]),{58:[1,277]},{18:$V_,50:225,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87,62:278},o($Vh,[2,73]),o($V41,[2,74]),{61:[1,279]},{48:[1,280]},o($V$,[2,96],{7:4,8:5,9:6,11:7,12:8,14:9,15:10,16:12,17:13,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,31:27,32:28,6:43,2:$V0,18:$V1,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,64:$V7,80:$V8,87:$V9,88:$Va,90:$Vb,92:$Vc,93:$Vd,94:$Ve,99:$Vf,100:$Vg}),{2:$V0,4:281,6:3,7:4,8:5,9:6,11:7,12:8,14:9,15:10,16:12,17:13,18:$V1,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,31:27,32:28,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,64:$V7,80:$V8,87:$V9,88:$Va,90:$Vb,92:$Vc,93:$Vd,94:$Ve,99:$Vf,100:$Vg},{2:$V0,4:282,6:3,7:4,8:5,9:6,11:7,12:8,14:9,15:10,16:12,17:13,18:$V1,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,31:27,32:28,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,64:$V7,80:$V8,87:$V9,88:$Va,90:$Vb,92:$Vc,93:$Vd,94:$Ve,99:$Vf,100:$Vg},{12:81,18:$Vo,19:80,34:283,41:$Vp,42:$Vl,47:76,48:$Vq,50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87},{13:[2,61]},{12:81,18:$Vo,19:80,34:284,41:$Vp,42:$Vl,47:76,48:$Vq,50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87},{10:[1,285],40:$V21},{2:$V0,4:286,6:3,7:4,8:5,9:6,11:7,12:8,14:9,15:10,16:12,17:13,18:$V1,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,31:27,32:28,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,64:$V7,80:$V8,87:$V9,88:$Va,90:$Vb,92:$Vc,93:$Vd,94:$Ve,99:$Vf,100:$Vg},{12:81,18:$Vo,19:80,34:106,41:$Vp,42:$Vl,47:76,48:$Vq,50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87,65:287,73:$Vx,74:105},{2:$V0,6:43,7:4,8:5,9:6,10:[1,288],11:7,12:8,14:9,15:10,16:12,17:13,18:$V1,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,31:27,32:28,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,64:$V7,80:$V8,87:$V9,88:$Va,90:$Vb,92:$Vc,93:$Vd,94:$Ve,99:$Vf,100:$Vg},{2:$V0,6:43,7:4,8:5,9:6,10:[1,289],11:7,12:8,14:9,15:10,16:12,17:13,18:$V1,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,31:27,32:28,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,64:$V7,80:$V8,87:$V9,88:$Va,90:$Vb,92:$Vc,93:$Vd,94:$Ve,99:$Vf,100:$Vg},{19:119,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,59:[1,290]},{19:119,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,59:[1,291]},{40:[1,292]},{2:$V0,6:43,7:4,8:5,9:6,10:[1,293],11:7,12:8,14:9,15:10,16:12,17:13,18:$V1,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,31:27,32:28,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,64:$V7,80:$V8,87:$V9,88:$Va,90:$Vb,92:$Vc,93:$Vd,94:$Ve,99:$Vf,100:$Vg},{49:[1,294],71:$VO,72:$VP},o($Vh,[2,99]),o($Vh,[2,100]),o($VZ,$V51,{33:$V11}),{58:[1,295]},{61:[1,296]},o($Vh,[2,77]),{61:[1,297]},{12:81,18:$Vo,19:80,34:298,41:$Vp,42:$Vl,47:76,48:$Vq,50:78,51:79,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87},{18:$V_,50:225,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:87,62:299},{2:$V0,4:300,6:3,7:4,8:5,9:6,11:7,12:8,14:9,15:10,16:12,17:13,18:$V1,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,31:27,32:28,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,64:$V7,80:$V8,87:$V9,88:$Va,90:$Vb,92:$Vc,93:$Vd,94:$Ve,99:$Vf,100:$Vg},{19:119,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,59:[1,301]},{10:[1,302],40:$V21},{2:$V0,6:43,7:4,8:5,9:6,10:[1,303],11:7,12:8,14:9,15:10,16:12,17:13,18:$V1,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,31:27,32:28,35:$V2,36:$V3,37:$V4,38:$V5,39:$V6,64:$V7,80:$V8,87:$V9,88:$Va,90:$Vb,92:$Vc,93:$Vd,94:$Ve,99:$Vf,100:$Vg},{13:[2,62]},{10:[1,304]},o($V41,[2,76]),{13:[2,64]}],
defaultActions: {34:[2,105],35:[2,106],42:[2,1],135:[2,123],136:[2,124],197:[2,69],199:[2,72],238:[2,102],248:[2,63],257:[2,101],259:[2,103],260:[2,104],263:[2,70],276:[2,61],301:[2,62],304:[2,64]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  //Declarciones y tambien las importaciones
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip whitespace */
break;
case 2:/* skip whitespace */
break;
case 3:// comentario simple l√≠nea
break;
case 4:// comentario multiple l√≠neas
break;
case 5:return 52 
break;
case 6:return 53
break;
case 7:return 54
break;
case 8:return 55 
break;
case 9:return 57
break;
case 10:return 35
break;
case 11:return 36
break;
case 12:return 37
break;
case 13:return 38
break;
case 14:return 39
break;
case 15:return 42
break;
case 16:return 41
break;
case 17:return 43
break;
case 18:return 44
break;
case 19:return 45
break;
case 20:return 46
break;
case 21:return 76
break;
case 22:return 77
break;
case 23:return 'mayor_igual'
break;
case 24:return 'menor_igual'
break;
case 25:return 78
break;
case 26:return 79
break;
case 27:return 'qn_C'
break;
case 28:return 85
break;
case 29:return 71
break;
case 30:return 72
break;
case 31:return 73
break;
case 32:return 48
break;
case 33:return 49
break;
case 34:return 13
break;
case 35:return 61
break;
case 36:return 10
break;
case 37:return 58
break;
case 38:return 59
break;
case 39:return 60
break;
case 40:return 64
break;
case 41:return 70
break;
case 42:return 69
break;
case 43:return 80
break;
case 44:return 84
break;
case 45:return 86
break;
case 46:return 87
break;
case 47:return 90
break;
case 48:return 91
break;
case 49:return 88
break;
case 50:return 92
break;
case 51:return 93
break;
case 52:return 94
break;
case 53:return 97
break;
case 54:return 99
break;
case 55:return 100
break;
case 56:return 'tolower'
break;
case 57:return 'toupper'
break;
case 58:return 'round'
break;
case 59:return 'length'
break;
case 60:return 'typeof'
break;
case 61:return 'tostring'
break;
case 62:return 'tochararray'
break;
case 63:return 'push'
break;
case 64:return 'pop'
break;
case 65:return 'run'
break;
case 66:return 33
break;
case 67:return 18
break;
case 68:return 40
break;
case 69:return 5
break;
case 70: 
        console.error("Error lexico: " + yy_.yytext + " en la linea: " + yy_.yylloc.first_line + " columna: " + yy_.yylloc.first_column)
    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:(\/\/.+))/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:([0-9]+))/i,/^(?:(true|false\b))/i,/^(?:(('([a-zA-Z]|[!-[]|[\]-¬ø]|\\('|[n]|[t]|[r]|\\)|[ ])')))/i,/^(?:("[^\"]*"))/i,/^(?:\.)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:>)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:\{menor\})/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elif\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:until\b)/i,/^(?:for\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:run\b)/i,/^(?:=)/i,/^(?:(([a-zA-Z])([a-zA-Z]|[0-9]|_)*))/i,/^(?:,)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}